
HumidSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  080044e0  080044e0  000144e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  08004838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  200001d4  08004a0c  000201d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002e8  08004a0c  000202e8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c200  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a14  00000000  00000000  0002c3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002348  00000000  00000000  0002de11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000470  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000800  00000000  00000000  000305d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000032fa  00000000  00000000  00030dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f5c  00000000  00000000  000340ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00036026  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000014a8  00000000  00000000  000360a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	080044c8 	.word	0x080044c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	080044c8 	.word	0x080044c8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_InitTick+0x24>)
{
 8000ab2:	b510      	push	{r4, lr}
 8000ab4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ac0:	f000 f878 	bl	8000bb4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f83e 	bl	8000b4c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	bd10      	pop	{r4, pc}
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <HAL_Init>:
{
 8000ad8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 f824 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ffe5 	bl	8000ab0 <HAL_InitTick>
  HAL_MspInit();
 8000ae6:	f001 fb85 	bl	80021f4 <HAL_MspInit>
}
 8000aea:	2000      	movs	r0, #0
 8000aec:	bd08      	pop	{r3, pc}
	...

08000af0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000af0:	4a02      	ldr	r2, [pc, #8]	; (8000afc <HAL_IncTick+0xc>)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000200 	.word	0x20000200

08000b00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b00:	4b01      	ldr	r3, [pc, #4]	; (8000b08 <HAL_GetTick+0x8>)
 8000b02:	6818      	ldr	r0, [r3, #0]
}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000200 	.word	0x20000200

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000b0c:	b513      	push	{r0, r1, r4, lr}
 8000b0e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000b10:	f7ff fff6 	bl	8000b00 <HAL_GetTick>
 8000b14:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000b16:	f7ff fff3 	bl	8000b00 <HAL_GetTick>
 8000b1a:	9b01      	ldr	r3, [sp, #4]
 8000b1c:	1b00      	subs	r0, r0, r4
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d3f9      	bcc.n	8000b16 <HAL_Delay+0xa>
  {
  }
}
 8000b22:	b002      	add	sp, #8
 8000b24:	bd10      	pop	{r4, pc}
	...

08000b28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b2a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b42:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b44:	60d3      	str	r3, [r2, #12]
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4e:	b530      	push	{r4, r5, lr}
 8000b50:	68dc      	ldr	r4, [r3, #12]
 8000b52:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b56:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	bf28      	it	cs
 8000b60:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b68:	bf98      	it	ls
 8000b6a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b70:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b74:	bf88      	it	hi
 8000b76:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4019      	ands	r1, r3
 8000b7a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	fa05 f404 	lsl.w	r4, r5, r4
 8000b80:	3c01      	subs	r4, #1
 8000b82:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b84:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b86:	ea42 0201 	orr.w	r2, r2, r1
 8000b8a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	bfaf      	iteee	ge
 8000b90:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	4b06      	ldrlt	r3, [pc, #24]	; (8000bb0 <HAL_NVIC_SetPriority+0x64>)
 8000b96:	f000 000f 	andlt.w	r0, r0, #15
 8000b9a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	bfa5      	ittet	ge
 8000b9e:	b2d2      	uxtbge	r2, r2
 8000ba0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000baa:	bd30      	pop	{r4, r5, pc}
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	e000ed14 	.word	0xe000ed14

08000bb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d20a      	bcs.n	8000bd2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000be2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	bf0c      	ite	eq
 8000be8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bec:	f022 0204 	bicne.w	r2, r2, #4
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bf8:	4770      	bx	lr

08000bfa <HAL_SYSTICK_IRQHandler>:
{
 8000bfa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000bfc:	f7ff fffc 	bl	8000bf8 <HAL_SYSTICK_Callback>
 8000c00:	bd08      	pop	{r3, pc}
	...

08000c04 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000c04:	2300      	movs	r3, #0
{ 
 8000c06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c0a:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000da4 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c12:	4a62      	ldr	r2, [pc, #392]	; (8000d9c <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c14:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c18:	d102      	bne.n	8000c20 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8000c1a:	b003      	add	sp, #12
 8000c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c20:	f04f 0e01 	mov.w	lr, #1
 8000c24:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000c28:	ea18 060e 	ands.w	r6, r8, lr
 8000c2c:	f000 80a8 	beq.w	8000d80 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c30:	684c      	ldr	r4, [r1, #4]
 8000c32:	f024 0710 	bic.w	r7, r4, #16
 8000c36:	2f02      	cmp	r7, #2
 8000c38:	d116      	bne.n	8000c68 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000c3a:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 8000c3e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c42:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000c46:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000c4a:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000c4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c52:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c56:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000c5a:	690d      	ldr	r5, [r1, #16]
 8000c5c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c60:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c64:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000c68:	2503      	movs	r5, #3
 8000c6a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000c6e:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c72:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000c74:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c78:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000c7c:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c80:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c84:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c86:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c8c:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c90:	d811      	bhi.n	8000cb6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 8000c92:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c94:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c98:	68cf      	ldr	r7, [r1, #12]
 8000c9a:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000c9e:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ca2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ca4:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ca6:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000caa:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000cae:	409f      	lsls	r7, r3
 8000cb0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cb4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cb6:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cb8:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000cba:	688f      	ldr	r7, [r1, #8]
 8000cbc:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cc0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000cc2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000cc4:	00e5      	lsls	r5, r4, #3
 8000cc6:	d55b      	bpl.n	8000d80 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cc8:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ccc:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000cd0:	f023 0703 	bic.w	r7, r3, #3
 8000cd4:	f045 0501 	orr.w	r5, r5, #1
 8000cd8:	f8c9 5020 	str.w	r5, [r9, #32]
 8000cdc:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000ce0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ce4:	f005 0501 	and.w	r5, r5, #1
 8000ce8:	9501      	str	r5, [sp, #4]
 8000cea:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cee:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cf4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000cf8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cfc:	fa0c f50e 	lsl.w	r5, ip, lr
 8000d00:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d04:	4d26      	ldr	r5, [pc, #152]	; (8000da0 <HAL_GPIO_Init+0x19c>)
 8000d06:	42a8      	cmp	r0, r5
 8000d08:	d03c      	beq.n	8000d84 <HAL_GPIO_Init+0x180>
 8000d0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d0e:	42a8      	cmp	r0, r5
 8000d10:	d03a      	beq.n	8000d88 <HAL_GPIO_Init+0x184>
 8000d12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d16:	42a8      	cmp	r0, r5
 8000d18:	d038      	beq.n	8000d8c <HAL_GPIO_Init+0x188>
 8000d1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d1e:	42a8      	cmp	r0, r5
 8000d20:	d036      	beq.n	8000d90 <HAL_GPIO_Init+0x18c>
 8000d22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d26:	42a8      	cmp	r0, r5
 8000d28:	d034      	beq.n	8000d94 <HAL_GPIO_Init+0x190>
 8000d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d2e:	42a8      	cmp	r0, r5
 8000d30:	d032      	beq.n	8000d98 <HAL_GPIO_Init+0x194>
 8000d32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d36:	42a8      	cmp	r0, r5
 8000d38:	bf14      	ite	ne
 8000d3a:	2507      	movne	r5, #7
 8000d3c:	2506      	moveq	r5, #6
 8000d3e:	fa05 f50e 	lsl.w	r5, r5, lr
 8000d42:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d46:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d48:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000d4a:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d50:	bf0c      	ite	eq
 8000d52:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d54:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000d56:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d58:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000d5e:	bf0c      	ite	eq
 8000d60:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d62:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000d64:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d66:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d68:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000d6c:	bf0c      	ite	eq
 8000d6e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d70:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000d72:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d74:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d76:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000d78:	bf54      	ite	pl
 8000d7a:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d7c:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000d7e:	60d5      	str	r5, [r2, #12]
    position++;
 8000d80:	3301      	adds	r3, #1
 8000d82:	e747      	b.n	8000c14 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d84:	2500      	movs	r5, #0
 8000d86:	e7da      	b.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d88:	2501      	movs	r5, #1
 8000d8a:	e7d8      	b.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d8c:	2502      	movs	r5, #2
 8000d8e:	e7d6      	b.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d90:	2503      	movs	r5, #3
 8000d92:	e7d4      	b.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d94:	2504      	movs	r5, #4
 8000d96:	e7d2      	b.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d98:	2505      	movs	r5, #5
 8000d9a:	e7d0      	b.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d9c:	40010400 	.word	0x40010400
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000da8:	6903      	ldr	r3, [r0, #16]
 8000daa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000dac:	bf14      	ite	ne
 8000dae:	2001      	movne	r0, #1
 8000db0:	2000      	moveq	r0, #0
 8000db2:	4770      	bx	lr

08000db4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db4:	b10a      	cbz	r2, 8000dba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000db6:	6181      	str	r1, [r0, #24]
 8000db8:	4770      	bx	lr
 8000dba:	0409      	lsls	r1, r1, #16
 8000dbc:	e7fb      	b.n	8000db6 <HAL_GPIO_WritePin+0x2>
	...

08000dc0 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000dc2:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000dca:	d00c      	beq.n	8000de6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000dcc:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000dce:	491a      	ldr	r1, [pc, #104]	; (8000e38 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000dd0:	680b      	ldr	r3, [r1, #0]
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000dda:	6808      	ldr	r0, [r1, #0]
 8000ddc:	f000 0001 	and.w	r0, r0, #1
 8000de0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000de2:	b002      	add	sp, #8
 8000de4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000de8:	4914      	ldr	r1, [pc, #80]	; (8000e3c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000dea:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000dee:	d00f      	beq.n	8000e10 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000df0:	680a      	ldr	r2, [r1, #0]
 8000df2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000df6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000dfa:	d1e7      	bne.n	8000dcc <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000dfc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000e00:	d1e4      	bne.n	8000dcc <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000e04:	6813      	ldr	r3, [r2, #0]
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	e7de      	b.n	8000dce <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
 8000e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e1e:	9201      	str	r2, [sp, #4]
 8000e20:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000e22:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e24:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000e26:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000e2e:	6259      	str	r1, [r3, #36]	; 0x24
 8000e30:	e7e1      	b.n	8000df6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40023c00 	.word	0x40023c00
 8000e3c:	40007000 	.word	0x40007000

08000e40 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e40:	6803      	ldr	r3, [r0, #0]
{
 8000e42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	07d9      	lsls	r1, r3, #31
{
 8000e48:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4a:	d46a      	bmi.n	8000f22 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	079a      	lsls	r2, r3, #30
 8000e50:	f100 80e6 	bmi.w	8001020 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	06de      	lsls	r6, r3, #27
 8000e58:	d555      	bpl.n	8000f06 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000e5a:	4dc1      	ldr	r5, [pc, #772]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8000e5c:	68ab      	ldr	r3, [r5, #8]
 8000e5e:	f013 0f0c 	tst.w	r3, #12
 8000e62:	f040 8183 	bne.w	800116c <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e6e:	6829      	ldr	r1, [r5, #0]
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	fab3 f383 	clz	r3, r3
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	420b      	tst	r3, r1
 8000e84:	d002      	beq.n	8000e8c <HAL_RCC_OscConfig+0x4c>
 8000e86:	69a3      	ldr	r3, [r4, #24]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d06e      	beq.n	8000f6a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e8c:	4db4      	ldr	r5, [pc, #720]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8000e8e:	6a20      	ldr	r0, [r4, #32]
 8000e90:	686b      	ldr	r3, [r5, #4]
 8000e92:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e96:	4298      	cmp	r0, r3
 8000e98:	f240 814a 	bls.w	8001130 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e9c:	f7ff ff90 	bl	8000dc0 <RCC_SetFlashLatencyFromMSIRange>
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d162      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea4:	686b      	ldr	r3, [r5, #4]
 8000ea6:	6a22      	ldr	r2, [r4, #32]
 8000ea8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000eac:	4313      	orrs	r3, r2
 8000eae:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb0:	6869      	ldr	r1, [r5, #4]
 8000eb2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	fab3 f283 	clz	r2, r3
 8000ebe:	69e3      	ldr	r3, [r4, #28]
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	606b      	str	r3, [r5, #4]
 8000eca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ece:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000ed2:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000ed6:	4ba2      	ldr	r3, [pc, #648]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8000ed8:	21f0      	movs	r1, #240	; 0xf0
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	fa91 f1a1 	rbit	r1, r1
 8000ee0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000ee4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000ee6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000eea:	40c3      	lsrs	r3, r0
 8000eec:	1c58      	adds	r0, r3, #1
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000ef2:	40ca      	lsrs	r2, r1
 8000ef4:	499b      	ldr	r1, [pc, #620]	; (8001164 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000ef6:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000ef8:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000efc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000efe:	4a9a      	ldr	r2, [pc, #616]	; (8001168 <HAL_RCC_OscConfig+0x328>)
 8000f00:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000f02:	f7ff fdd5 	bl	8000ab0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	071d      	lsls	r5, r3, #28
 8000f0a:	f100 8191 	bmi.w	8001230 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	0758      	lsls	r0, r3, #29
 8000f12:	f100 81d3 	bmi.w	80012bc <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	f040 8257 	bne.w	80013cc <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e024      	b.n	8000f6c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f22:	4b8f      	ldr	r3, [pc, #572]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	f002 020c 	and.w	r2, r2, #12
 8000f2a:	2a08      	cmp	r2, #8
 8000f2c:	d007      	beq.n	8000f3e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	f002 020c 	and.w	r2, r2, #12
 8000f34:	2a0c      	cmp	r2, #12
 8000f36:	d11c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x132>
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	03db      	lsls	r3, r3, #15
 8000f3c:	d519      	bpl.n	8000f72 <HAL_RCC_OscConfig+0x132>
 8000f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f42:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f46:	4a86      	ldr	r2, [pc, #536]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8000f48:	6811      	ldr	r1, [r2, #0]
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	2201      	movs	r2, #1
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	420b      	tst	r3, r1
 8000f5e:	f43f af75 	beq.w	8000e4c <HAL_RCC_OscConfig+0xc>
 8000f62:	6863      	ldr	r3, [r4, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f47f af71 	bne.w	8000e4c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f6a:	2001      	movs	r0, #1
}
 8000f6c:	b003      	add	sp, #12
 8000f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	4d7a      	ldr	r5, [pc, #488]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d120      	bne.n	8000fbc <HAL_RCC_OscConfig+0x17c>
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f82:	f7ff fdbd 	bl	8000b00 <HAL_GetTick>
 8000f86:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000f8a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8c:	2601      	movs	r6, #1
 8000f8e:	4f74      	ldr	r7, [pc, #464]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8000f90:	fa95 f3a5 	rbit	r3, r5
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	fa95 f3a5 	rbit	r3, r5
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	fa06 f303 	lsl.w	r3, r6, r3
 8000fa6:	4213      	tst	r3, r2
 8000fa8:	f47f af50 	bne.w	8000e4c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fda8 	bl	8000b00 <HAL_GetTick>
 8000fb0:	eba0 0008 	sub.w	r0, r0, r8
 8000fb4:	2864      	cmp	r0, #100	; 0x64
 8000fb6:	d9eb      	bls.n	8000f90 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000fb8:	2003      	movs	r0, #3
 8000fba:	e7d7      	b.n	8000f6c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbc:	bb13      	cbnz	r3, 8001004 <HAL_RCC_OscConfig+0x1c4>
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc8:	602b      	str	r3, [r5, #0]
 8000fca:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fcc:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fd94 	bl	8000b00 <HAL_GetTick>
 8000fd8:	4680      	mov	r8, r0
 8000fda:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	682a      	ldr	r2, [r5, #0]
 8000fe0:	fa96 f3a6 	rbit	r3, r6
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	fa07 f303 	lsl.w	r3, r7, r3
 8000ff0:	4213      	tst	r3, r2
 8000ff2:	f43f af2b 	beq.w	8000e4c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fd83 	bl	8000b00 <HAL_GetTick>
 8000ffa:	eba0 0008 	sub.w	r0, r0, r8
 8000ffe:	2864      	cmp	r0, #100	; 0x64
 8001000:	d9eb      	bls.n	8000fda <HAL_RCC_OscConfig+0x19a>
 8001002:	e7d9      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001004:	2b05      	cmp	r3, #5
 8001006:	682b      	ldr	r3, [r5, #0]
 8001008:	d103      	bne.n	8001012 <HAL_RCC_OscConfig+0x1d2>
 800100a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100e:	602b      	str	r3, [r5, #0]
 8001010:	e7b3      	b.n	8000f7a <HAL_RCC_OscConfig+0x13a>
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	602b      	str	r3, [r5, #0]
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101e:	e7af      	b.n	8000f80 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001020:	4b4f      	ldr	r3, [pc, #316]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	f002 020c 	and.w	r2, r2, #12
 8001028:	2a04      	cmp	r2, #4
 800102a:	d007      	beq.n	800103c <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	f002 020c 	and.w	r2, r2, #12
 8001032:	2a0c      	cmp	r2, #12
 8001034:	d124      	bne.n	8001080 <HAL_RCC_OscConfig+0x240>
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	03df      	lsls	r7, r3, #15
 800103a:	d421      	bmi.n	8001080 <HAL_RCC_OscConfig+0x240>
 800103c:	2302      	movs	r3, #2
 800103e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	4a47      	ldr	r2, [pc, #284]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8001044:	6810      	ldr	r0, [r2, #0]
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	fab3 f383 	clz	r3, r3
 800104e:	2101      	movs	r1, #1
 8001050:	f003 031f 	and.w	r3, r3, #31
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4203      	tst	r3, r0
 800105a:	4613      	mov	r3, r2
 800105c:	d002      	beq.n	8001064 <HAL_RCC_OscConfig+0x224>
 800105e:	68e2      	ldr	r2, [r4, #12]
 8001060:	428a      	cmp	r2, r1
 8001062:	d182      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001064:	6858      	ldr	r0, [r3, #4]
 8001066:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800106a:	fa92 f2a2 	rbit	r2, r2
 800106e:	fab2 f182 	clz	r1, r2
 8001072:	6922      	ldr	r2, [r4, #16]
 8001074:	408a      	lsls	r2, r1
 8001076:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800107a:	430a      	orrs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e6e9      	b.n	8000e54 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001080:	68e2      	ldr	r2, [r4, #12]
 8001082:	2501      	movs	r5, #1
 8001084:	b382      	cbz	r2, 80010e8 <HAL_RCC_OscConfig+0x2a8>
 8001086:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001092:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800109a:	f7ff fd31 	bl	8000b00 <HAL_GetTick>
 800109e:	2702      	movs	r7, #2
 80010a0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a2:	4e2f      	ldr	r6, [pc, #188]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 80010a4:	fa97 f3a7 	rbit	r3, r7
 80010a8:	6832      	ldr	r2, [r6, #0]
 80010aa:	fa97 f3a7 	rbit	r3, r7
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	fa05 f303 	lsl.w	r3, r5, r3
 80010ba:	4213      	tst	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	6871      	ldr	r1, [r6, #4]
 80010c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	fab3 f283 	clz	r2, r3
 80010cc:	6923      	ldr	r3, [r4, #16]
 80010ce:	4093      	lsls	r3, r2
 80010d0:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80010d4:	4313      	orrs	r3, r2
 80010d6:	6073      	str	r3, [r6, #4]
 80010d8:	e6bc      	b.n	8000e54 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fd11 	bl	8000b00 <HAL_GetTick>
 80010de:	eba0 0008 	sub.w	r0, r0, r8
 80010e2:	2802      	cmp	r0, #2
 80010e4:	d9de      	bls.n	80010a4 <HAL_RCC_OscConfig+0x264>
 80010e6:	e767      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
 80010e8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010fc:	f7ff fd00 	bl	8000b00 <HAL_GetTick>
 8001100:	2602      	movs	r6, #2
 8001102:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001104:	4f16      	ldr	r7, [pc, #88]	; (8001160 <HAL_RCC_OscConfig+0x320>)
 8001106:	fa96 f3a6 	rbit	r3, r6
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	fa96 f3a6 	rbit	r3, r6
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	fa05 f303 	lsl.w	r3, r5, r3
 800111c:	4213      	tst	r3, r2
 800111e:	f43f ae99 	beq.w	8000e54 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fced 	bl	8000b00 <HAL_GetTick>
 8001126:	eba0 0008 	sub.w	r0, r0, r8
 800112a:	2802      	cmp	r0, #2
 800112c:	d9eb      	bls.n	8001106 <HAL_RCC_OscConfig+0x2c6>
 800112e:	e743      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001130:	686b      	ldr	r3, [r5, #4]
 8001132:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001136:	4303      	orrs	r3, r0
 8001138:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113a:	6869      	ldr	r1, [r5, #4]
 800113c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	fab3 f283 	clz	r2, r3
 8001148:	69e3      	ldr	r3, [r4, #28]
 800114a:	4093      	lsls	r3, r2
 800114c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001150:	4313      	orrs	r3, r2
 8001152:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001154:	f7ff fe34 	bl	8000dc0 <RCC_SetFlashLatencyFromMSIRange>
 8001158:	2800      	cmp	r0, #0
 800115a:	f43f aeb6 	beq.w	8000eca <HAL_RCC_OscConfig+0x8a>
 800115e:	e704      	b.n	8000f6a <HAL_RCC_OscConfig+0x12a>
 8001160:	40023800 	.word	0x40023800
 8001164:	080045b5 	.word	0x080045b5
 8001168:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800116c:	69a2      	ldr	r2, [r4, #24]
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	2a00      	cmp	r2, #0
 8001174:	d037      	beq.n	80011e6 <HAL_RCC_OscConfig+0x3a6>
 8001176:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	2601      	movs	r6, #1
 8001180:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001184:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800118c:	f7ff fcb8 	bl	8000b00 <HAL_GetTick>
 8001190:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001194:	4680      	mov	r8, r0
 8001196:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800119a:	682a      	ldr	r2, [r5, #0]
 800119c:	fa97 f3a7 	rbit	r3, r7
 80011a0:	fab3 f383 	clz	r3, r3
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	fa06 f303 	lsl.w	r3, r6, r3
 80011ac:	4213      	tst	r3, r2
 80011ae:	d013      	beq.n	80011d8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011b0:	686b      	ldr	r3, [r5, #4]
 80011b2:	6a22      	ldr	r2, [r4, #32]
 80011b4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011b8:	4313      	orrs	r3, r2
 80011ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011bc:	6869      	ldr	r1, [r5, #4]
 80011be:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	fab3 f283 	clz	r2, r3
 80011ca:	69e3      	ldr	r3, [r4, #28]
 80011cc:	4093      	lsls	r3, r2
 80011ce:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80011d2:	4313      	orrs	r3, r2
 80011d4:	606b      	str	r3, [r5, #4]
 80011d6:	e696      	b.n	8000f06 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc92 	bl	8000b00 <HAL_GetTick>
 80011dc:	eba0 0008 	sub.w	r0, r0, r8
 80011e0:	2802      	cmp	r0, #2
 80011e2:	d9d8      	bls.n	8001196 <HAL_RCC_OscConfig+0x356>
 80011e4:	e6e8      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
 80011e6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011f2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011fa:	f7ff fc81 	bl	8000b00 <HAL_GetTick>
 80011fe:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001202:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001204:	2701      	movs	r7, #1
 8001206:	fa96 f3a6 	rbit	r3, r6
 800120a:	682a      	ldr	r2, [r5, #0]
 800120c:	fa96 f3a6 	rbit	r3, r6
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa07 f303 	lsl.w	r3, r7, r3
 800121c:	4213      	tst	r3, r2
 800121e:	f43f ae72 	beq.w	8000f06 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fc6d 	bl	8000b00 <HAL_GetTick>
 8001226:	eba0 0008 	sub.w	r0, r0, r8
 800122a:	2802      	cmp	r0, #2
 800122c:	d9eb      	bls.n	8001206 <HAL_RCC_OscConfig+0x3c6>
 800122e:	e6c3      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001230:	6962      	ldr	r2, [r4, #20]
 8001232:	2501      	movs	r5, #1
 8001234:	49a9      	ldr	r1, [pc, #676]	; (80014dc <HAL_RCC_OscConfig+0x69c>)
 8001236:	b302      	cbz	r2, 800127a <HAL_RCC_OscConfig+0x43a>
 8001238:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	440b      	add	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001246:	f7ff fc5b 	bl	8000b00 <HAL_GetTick>
 800124a:	2602      	movs	r6, #2
 800124c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	4fa4      	ldr	r7, [pc, #656]	; (80014e0 <HAL_RCC_OscConfig+0x6a0>)
 8001250:	fa96 f3a6 	rbit	r3, r6
 8001254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001256:	fa96 f3a6 	rbit	r3, r6
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	fa05 f303 	lsl.w	r3, r5, r3
 8001266:	4213      	tst	r3, r2
 8001268:	f47f ae51 	bne.w	8000f0e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc48 	bl	8000b00 <HAL_GetTick>
 8001270:	eba0 0008 	sub.w	r0, r0, r8
 8001274:	2802      	cmp	r0, #2
 8001276:	d9eb      	bls.n	8001250 <HAL_RCC_OscConfig+0x410>
 8001278:	e69e      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
 800127a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	440b      	add	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001288:	f7ff fc3a 	bl	8000b00 <HAL_GetTick>
 800128c:	2602      	movs	r6, #2
 800128e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	4f93      	ldr	r7, [pc, #588]	; (80014e0 <HAL_RCC_OscConfig+0x6a0>)
 8001292:	fa96 f3a6 	rbit	r3, r6
 8001296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001298:	fa96 f3a6 	rbit	r3, r6
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	fa05 f303 	lsl.w	r3, r5, r3
 80012a8:	4213      	tst	r3, r2
 80012aa:	f43f ae30 	beq.w	8000f0e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc27 	bl	8000b00 <HAL_GetTick>
 80012b2:	eba0 0008 	sub.w	r0, r0, r8
 80012b6:	2802      	cmp	r0, #2
 80012b8:	d9eb      	bls.n	8001292 <HAL_RCC_OscConfig+0x452>
 80012ba:	e67d      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x6a0>)
 80012be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c0:	00d1      	lsls	r1, r2, #3
 80012c2:	d434      	bmi.n	800132e <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 80012c4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	4d82      	ldr	r5, [pc, #520]	; (80014e4 <HAL_RCC_OscConfig+0x6a4>)
 80012da:	682b      	ldr	r3, [r5, #0]
 80012dc:	05da      	lsls	r2, r3, #23
 80012de:	d528      	bpl.n	8001332 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	68a3      	ldr	r3, [r4, #8]
 80012e2:	4d7f      	ldr	r5, [pc, #508]	; (80014e0 <HAL_RCC_OscConfig+0x6a0>)
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d134      	bne.n	8001352 <HAL_RCC_OscConfig+0x512>
 80012e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80012f0:	f7ff fc06 	bl	8000b00 <HAL_GetTick>
 80012f4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80012f8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fa:	2701      	movs	r7, #1
 80012fc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80014e0 <HAL_RCC_OscConfig+0x6a0>
 8001300:	fa95 f3a5 	rbit	r3, r5
 8001304:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8001308:	fa95 f3a5 	rbit	r3, r5
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	fa07 f303 	lsl.w	r3, r7, r3
 8001318:	4213      	tst	r3, r2
 800131a:	d04e      	beq.n	80013ba <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 800131c:	2e00      	cmp	r6, #0
 800131e:	f43f adfa 	beq.w	8000f16 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001322:	4a6f      	ldr	r2, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x6a0>)
 8001324:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132a:	6253      	str	r3, [r2, #36]	; 0x24
 800132c:	e5f3      	b.n	8000f16 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2600      	movs	r6, #0
 8001330:	e7d2      	b.n	80012d8 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001332:	682b      	ldr	r3, [r5, #0]
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800133a:	f7ff fbe1 	bl	8000b00 <HAL_GetTick>
 800133e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	05db      	lsls	r3, r3, #23
 8001344:	d4cc      	bmi.n	80012e0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001346:	f7ff fbdb 	bl	8000b00 <HAL_GetTick>
 800134a:	1bc0      	subs	r0, r0, r7
 800134c:	2864      	cmp	r0, #100	; 0x64
 800134e:	d9f7      	bls.n	8001340 <HAL_RCC_OscConfig+0x500>
 8001350:	e632      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	bb23      	cbnz	r3, 800139e <HAL_RCC_OscConfig+0x55e>
 8001354:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001356:	f44f 7700 	mov.w	r7, #512	; 0x200
 800135a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800135e:	636b      	str	r3, [r5, #52]	; 0x34
 8001360:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800136a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800136c:	f7ff fbc8 	bl	8000b00 <HAL_GetTick>
 8001370:	4681      	mov	r9, r0
 8001372:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001376:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001378:	fa97 f3a7 	rbit	r3, r7
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	fa08 f303 	lsl.w	r3, r8, r3
 8001388:	4213      	tst	r3, r2
 800138a:	d0c7      	beq.n	800131c <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff fbb8 	bl	8000b00 <HAL_GetTick>
 8001390:	f241 3388 	movw	r3, #5000	; 0x1388
 8001394:	eba0 0009 	sub.w	r0, r0, r9
 8001398:	4298      	cmp	r0, r3
 800139a:	d9ea      	bls.n	8001372 <HAL_RCC_OscConfig+0x532>
 800139c:	e60c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139e:	2b05      	cmp	r3, #5
 80013a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013a2:	d103      	bne.n	80013ac <HAL_RCC_OscConfig+0x56c>
 80013a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a8:	636b      	str	r3, [r5, #52]	; 0x34
 80013aa:	e79d      	b.n	80012e8 <HAL_RCC_OscConfig+0x4a8>
 80013ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b0:	636b      	str	r3, [r5, #52]	; 0x34
 80013b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013b8:	e799      	b.n	80012ee <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fba1 	bl	8000b00 <HAL_GetTick>
 80013be:	f241 3388 	movw	r3, #5000	; 0x1388
 80013c2:	eba0 0009 	sub.w	r0, r0, r9
 80013c6:	4298      	cmp	r0, r3
 80013c8:	d99a      	bls.n	8001300 <HAL_RCC_OscConfig+0x4c0>
 80013ca:	e5f5      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013cc:	4d44      	ldr	r5, [pc, #272]	; (80014e0 <HAL_RCC_OscConfig+0x6a0>)
 80013ce:	68ab      	ldr	r3, [r5, #8]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	f43f adc8 	beq.w	8000f6a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013da:	2a02      	cmp	r2, #2
 80013dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e0:	d156      	bne.n	8001490 <HAL_RCC_OscConfig+0x650>
 80013e2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013f0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb82 	bl	8000b00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 80013fe:	4680      	mov	r8, r0
 8001400:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001404:	2501      	movs	r5, #1
 8001406:	fa97 f3a7 	rbit	r3, r7
 800140a:	6832      	ldr	r2, [r6, #0]
 800140c:	fa97 f3a7 	rbit	r3, r7
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	f003 031f 	and.w	r3, r3, #31
 8001418:	fa05 f303 	lsl.w	r3, r5, r3
 800141c:	4213      	tst	r3, r2
 800141e:	d130      	bne.n	8001482 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001420:	68b2      	ldr	r2, [r6, #8]
 8001422:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001424:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001426:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800142a:	430b      	orrs	r3, r1
 800142c:	4313      	orrs	r3, r2
 800142e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001430:	4313      	orrs	r3, r2
 8001432:	60b3      	str	r3, [r6, #8]
 8001434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001438:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001444:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800144c:	f7ff fb58 	bl	8000b00 <HAL_GetTick>
 8001450:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001454:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001456:	2501      	movs	r5, #1
 8001458:	4e21      	ldr	r6, [pc, #132]	; (80014e0 <HAL_RCC_OscConfig+0x6a0>)
 800145a:	fa94 f3a4 	rbit	r3, r4
 800145e:	6832      	ldr	r2, [r6, #0]
 8001460:	fa94 f3a4 	rbit	r3, r4
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	fa05 f303 	lsl.w	r3, r5, r3
 8001470:	4213      	tst	r3, r2
 8001472:	f47f ad54 	bne.w	8000f1e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb43 	bl	8000b00 <HAL_GetTick>
 800147a:	1bc0      	subs	r0, r0, r7
 800147c:	2802      	cmp	r0, #2
 800147e:	d9ec      	bls.n	800145a <HAL_RCC_OscConfig+0x61a>
 8001480:	e59a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb3d 	bl	8000b00 <HAL_GetTick>
 8001486:	eba0 0008 	sub.w	r0, r0, r8
 800148a:	2802      	cmp	r0, #2
 800148c:	d9bb      	bls.n	8001406 <HAL_RCC_OscConfig+0x5c6>
 800148e:	e593      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
 8001490:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	2200      	movs	r2, #0
 800149a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800149e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb2b 	bl	8000b00 <HAL_GetTick>
 80014aa:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80014ae:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	2601      	movs	r6, #1
 80014b2:	fa94 f3a4 	rbit	r3, r4
 80014b6:	682a      	ldr	r2, [r5, #0]
 80014b8:	fa94 f3a4 	rbit	r3, r4
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	fa06 f303 	lsl.w	r3, r6, r3
 80014c8:	4213      	tst	r3, r2
 80014ca:	f43f ad28 	beq.w	8000f1e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff fb17 	bl	8000b00 <HAL_GetTick>
 80014d2:	1bc0      	subs	r0, r0, r7
 80014d4:	2802      	cmp	r0, #2
 80014d6:	d9ec      	bls.n	80014b2 <HAL_RCC_OscConfig+0x672>
 80014d8:	e56e      	b.n	8000fb8 <HAL_RCC_OscConfig+0x178>
 80014da:	bf00      	nop
 80014dc:	1091c1a0 	.word	0x1091c1a0
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80014e8:	491e      	ldr	r1, [pc, #120]	; (8001564 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80014ea:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80014ec:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80014ee:	f003 020c 	and.w	r2, r3, #12
 80014f2:	2a08      	cmp	r2, #8
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_GetSysClockFreq+0x1a>
 80014f6:	2a0c      	cmp	r2, #12
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_GetSysClockFreq+0x1e>
 80014fa:	2a04      	cmp	r2, #4
 80014fc:	d122      	bne.n	8001544 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 80014fe:	481a      	ldr	r0, [pc, #104]	; (8001568 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001500:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001502:	481a      	ldr	r0, [pc, #104]	; (800156c <HAL_RCC_GetSysClockFreq+0x84>)
 8001504:	bd10      	pop	{r4, pc}
 8001506:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800150a:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800150e:	fab2 f282 	clz	r2, r2
 8001512:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001516:	fa20 f202 	lsr.w	r2, r0, r2
 800151a:	4815      	ldr	r0, [pc, #84]	; (8001570 <HAL_RCC_GetSysClockFreq+0x88>)
 800151c:	5c84      	ldrb	r4, [r0, r2]
 800151e:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001522:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001526:	fab0 f280 	clz	r2, r0
 800152a:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800152e:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001530:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001532:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001534:	bf4c      	ite	mi
 8001536:	4b0d      	ldrmi	r3, [pc, #52]	; (800156c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001538:	4b0b      	ldrpl	r3, [pc, #44]	; (8001568 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 800153a:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 800153c:	4363      	muls	r3, r4
 800153e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001542:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001544:	6848      	ldr	r0, [r1, #4]
 8001546:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001556:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001558:	1c43      	adds	r3, r0, #1
 800155a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800155e:	4098      	lsls	r0, r3
 8001560:	bd10      	pop	{r4, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	00f42400 	.word	0x00f42400
 800156c:	007a1200 	.word	0x007a1200
 8001570:	080045cd 	.word	0x080045cd

08001574 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001574:	4b6a      	ldr	r3, [pc, #424]	; (8001720 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800157a:	681a      	ldr	r2, [r3, #0]
{
 800157c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800157e:	f002 0201 	and.w	r2, r2, #1
 8001582:	428a      	cmp	r2, r1
{
 8001584:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001586:	d330      	bcc.n	80015ea <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	6832      	ldr	r2, [r6, #0]
 800158a:	0794      	lsls	r4, r2, #30
 800158c:	d440      	bmi.n	8001610 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158e:	07d0      	lsls	r0, r2, #31
 8001590:	d446      	bmi.n	8001620 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1ac>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f002 0201 	and.w	r2, r2, #1
 800159a:	4295      	cmp	r5, r2
 800159c:	f0c0 80ae 	bcc.w	80016fc <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	6832      	ldr	r2, [r6, #0]
 80015a2:	0751      	lsls	r1, r2, #29
 80015a4:	f100 80b3 	bmi.w	800170e <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a8:	0713      	lsls	r3, r2, #28
 80015aa:	d507      	bpl.n	80015bc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ac:	4a5d      	ldr	r2, [pc, #372]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 80015ae:	6931      	ldr	r1, [r6, #16]
 80015b0:	6893      	ldr	r3, [r2, #8]
 80015b2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015bc:	f7ff ff94 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80015c0:	4b58      	ldr	r3, [pc, #352]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 80015c2:	22f0      	movs	r2, #240	; 0xf0
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	fa92 f2a2 	rbit	r2, r2
 80015ca:	fab2 f282 	clz	r2, r2
 80015ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d2:	40d3      	lsrs	r3, r2
 80015d4:	4a54      	ldr	r2, [pc, #336]	; (8001728 <HAL_RCC_ClockConfig+0x1b4>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	40d8      	lsrs	r0, r3
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fa66 	bl	8000ab0 <HAL_InitTick>
  return HAL_OK;
 80015e4:	2000      	movs	r0, #0
}
 80015e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	2901      	cmp	r1, #1
 80015ec:	bf02      	ittt	eq
 80015ee:	681a      	ldreq	r2, [r3, #0]
 80015f0:	f042 0204 	orreq.w	r2, r2, #4
 80015f4:	601a      	streq	r2, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	4299      	cmp	r1, r3
 8001608:	d0be      	beq.n	8001588 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800160a:	2001      	movs	r0, #1
 800160c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4944      	ldr	r1, [pc, #272]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 8001612:	68b0      	ldr	r0, [r6, #8]
 8001614:	688b      	ldr	r3, [r1, #8]
 8001616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800161a:	4303      	orrs	r3, r0
 800161c:	608b      	str	r3, [r1, #8]
 800161e:	e7b6      	b.n	800158e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001620:	6872      	ldr	r2, [r6, #4]
 8001622:	4940      	ldr	r1, [pc, #256]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 8001624:	2a02      	cmp	r2, #2
 8001626:	d10f      	bne.n	8001648 <HAL_RCC_ClockConfig+0xd4>
 8001628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001630:	6808      	ldr	r0, [r1, #0]
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	2101      	movs	r1, #1
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4203      	tst	r3, r0
 8001646:	e013      	b.n	8001670 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001648:	2a03      	cmp	r2, #3
 800164a:	d102      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
 800164c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001650:	e7ec      	b.n	800162c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001652:	2a01      	cmp	r2, #1
 8001654:	d129      	bne.n	80016aa <HAL_RCC_ClockConfig+0x136>
 8001656:	2302      	movs	r3, #2
 8001658:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	6809      	ldr	r1, [r1, #0]
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001670:	d0cb      	beq.n	800160a <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4c2c      	ldr	r4, [pc, #176]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001678:	68a3      	ldr	r3, [r4, #8]
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	431a      	orrs	r2, r3
 8001680:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001682:	f7ff fa3d 	bl	8000b00 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001688:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	2b02      	cmp	r3, #2
 800168c:	d110      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800168e:	68a3      	ldr	r3, [r4, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	f43f af7c 	beq.w	8001592 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169a:	f7ff fa31 	bl	8000b00 <HAL_GetTick>
 800169e:	1bc0      	subs	r0, r0, r7
 80016a0:	4540      	cmp	r0, r8
 80016a2:	d9f4      	bls.n	800168e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 80016a4:	2003      	movs	r0, #3
 80016a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ae:	e7bd      	b.n	800162c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d10b      	bne.n	80016cc <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b4:	68a3      	ldr	r3, [r4, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	f43f af69 	beq.w	8001592 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff fa1e 	bl	8000b00 <HAL_GetTick>
 80016c4:	1bc0      	subs	r0, r0, r7
 80016c6:	4540      	cmp	r0, r8
 80016c8:	d9f4      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x140>
 80016ca:	e7eb      	b.n	80016a4 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d110      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d0:	68a3      	ldr	r3, [r4, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	f43f af5b 	beq.w	8001592 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff fa10 	bl	8000b00 <HAL_GetTick>
 80016e0:	1bc0      	subs	r0, r0, r7
 80016e2:	4540      	cmp	r0, r8
 80016e4:	d9f4      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x15c>
 80016e6:	e7dd      	b.n	80016a4 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fa0a 	bl	8000b00 <HAL_GetTick>
 80016ec:	1bc0      	subs	r0, r0, r7
 80016ee:	4540      	cmp	r0, r8
 80016f0:	d8d8      	bhi.n	80016a4 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016f2:	68a3      	ldr	r3, [r4, #8]
 80016f4:	f013 0f0c 	tst.w	r3, #12
 80016f8:	d1f6      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x174>
 80016fa:	e74a      	b.n	8001592 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	07da      	lsls	r2, r3, #31
 8001708:	f53f af7f 	bmi.w	800160a <HAL_RCC_ClockConfig+0x96>
 800170c:	e748      	b.n	80015a0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170e:	4905      	ldr	r1, [pc, #20]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 8001710:	68f0      	ldr	r0, [r6, #12]
 8001712:	688b      	ldr	r3, [r1, #8]
 8001714:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001718:	4303      	orrs	r3, r0
 800171a:	608b      	str	r3, [r1, #8]
 800171c:	e744      	b.n	80015a8 <HAL_RCC_ClockConfig+0x34>
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	080045b5 	.word	0x080045b5
 800172c:	20000000 	.word	0x20000000

08001730 <HAL_RCC_GetHCLKFreq>:
}
 8001730:	4b01      	ldr	r3, [pc, #4]	; (8001738 <HAL_RCC_GetHCLKFreq+0x8>)
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000000 	.word	0x20000000

0800173c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_RCC_GetPCLK1Freq+0x24>)
 800173e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	fa92 f2a2 	rbit	r2, r2
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001750:	40d3      	lsrs	r3, r2
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001758:	6810      	ldr	r0, [r2, #0]
}    
 800175a:	40d8      	lsrs	r0, r3
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	080045c5 	.word	0x080045c5
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_RCC_GetPCLK2Freq+0x24>)
 800176e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	fa92 f2a2 	rbit	r2, r2
 8001778:	fab2 f282 	clz	r2, r2
 800177c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001780:	40d3      	lsrs	r3, r2
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001788:	6810      	ldr	r0, [r2, #0]
} 
 800178a:	40d8      	lsrs	r0, r3
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	080045c5 	.word	0x080045c5
 8001798:	20000000 	.word	0x20000000

0800179c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017a0:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017a2:	6805      	ldr	r5, [r0, #0]
 80017a4:	68c2      	ldr	r2, [r0, #12]
 80017a6:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017a8:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ae:	4313      	orrs	r3, r2
 80017b0:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017b2:	6883      	ldr	r3, [r0, #8]
 80017b4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80017b6:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017b8:	4303      	orrs	r3, r0
 80017ba:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80017be:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80017c4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017c8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017ce:	696b      	ldr	r3, [r5, #20]
 80017d0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80017d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d8:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017da:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017de:	616b      	str	r3, [r5, #20]
 80017e0:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017e2:	d17f      	bne.n	80018e4 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80017e4:	429d      	cmp	r5, r3
 80017e6:	f04f 0419 	mov.w	r4, #25
 80017ea:	d147      	bne.n	800187c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017ec:	f7ff ffbe 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 80017f0:	fb04 f300 	mul.w	r3, r4, r0
 80017f4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80017f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80017fc:	007f      	lsls	r7, r7, #1
 80017fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001802:	fbb3 f3f8 	udiv	r3, r3, r8
 8001806:	011f      	lsls	r7, r3, #4
 8001808:	f7ff ffb0 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 800180c:	4360      	muls	r0, r4
 800180e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fbb0 f6f3 	udiv	r6, r0, r3
 8001818:	f7ff ffa8 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 800181c:	4360      	muls	r0, r4
 800181e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fbb0 f3f3 	udiv	r3, r0, r3
 8001828:	fbb3 f3f8 	udiv	r3, r3, r8
 800182c:	fb08 6313 	mls	r3, r8, r3, r6
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	3332      	adds	r3, #50	; 0x32
 8001834:	fbb3 f3f8 	udiv	r3, r3, r8
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800183e:	f7ff ff95 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 8001842:	4360      	muls	r0, r4
 8001844:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001848:	0052      	lsls	r2, r2, #1
 800184a:	fbb0 faf2 	udiv	sl, r0, r2
 800184e:	f7ff ff8d 	bl	800176c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001852:	4360      	muls	r0, r4
 8001854:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001862:	fb08 a313 	mls	r3, r8, r3, sl
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	3332      	adds	r3, #50	; 0x32
 800186a:	fbb3 f3f8 	udiv	r3, r3, r8
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001874:	4433      	add	r3, r6
 8001876:	60ab      	str	r3, [r5, #8]
 8001878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800187c:	f7ff ff5e 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 8001880:	fb04 f300 	mul.w	r3, r4, r0
 8001884:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001888:	f04f 0864 	mov.w	r8, #100	; 0x64
 800188c:	007f      	lsls	r7, r7, #1
 800188e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001892:	fbb3 f3f8 	udiv	r3, r3, r8
 8001896:	011f      	lsls	r7, r3, #4
 8001898:	f7ff ff50 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 800189c:	4360      	muls	r0, r4
 800189e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fbb0 f6f3 	udiv	r6, r0, r3
 80018a8:	f7ff ff48 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 80018ac:	4360      	muls	r0, r4
 80018ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80018bc:	fb08 6313 	mls	r3, r8, r3, r6
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	3332      	adds	r3, #50	; 0x32
 80018c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80018ce:	f7ff ff35 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 80018d2:	4360      	muls	r0, r4
 80018d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80018d8:	0052      	lsls	r2, r2, #1
 80018da:	fbb0 faf2 	udiv	sl, r0, r2
 80018de:	f7ff ff2d 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 80018e2:	e7b6      	b.n	8001852 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 80018e4:	429d      	cmp	r5, r3
 80018e6:	f04f 0419 	mov.w	r4, #25
 80018ea:	d143      	bne.n	8001974 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018ec:	f7ff ff3e 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 80018f0:	fb04 f300 	mul.w	r3, r4, r0
 80018f4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80018f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018fc:	00b6      	lsls	r6, r6, #2
 80018fe:	fbb3 f3f6 	udiv	r3, r3, r6
 8001902:	fbb3 f3f8 	udiv	r3, r3, r8
 8001906:	011e      	lsls	r6, r3, #4
 8001908:	f7ff ff30 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 800190c:	4360      	muls	r0, r4
 800190e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fbb0 f7f3 	udiv	r7, r0, r3
 8001918:	f7ff ff28 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 800191c:	4360      	muls	r0, r4
 800191e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	fbb0 f3f3 	udiv	r3, r0, r3
 8001928:	fbb3 f3f8 	udiv	r3, r3, r8
 800192c:	fb08 7313 	mls	r3, r8, r3, r7
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	3332      	adds	r3, #50	; 0x32
 8001934:	fbb3 f3f8 	udiv	r3, r3, r8
 8001938:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800193c:	f7ff ff16 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 8001940:	4360      	muls	r0, r4
 8001942:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	fbb0 faf2 	udiv	sl, r0, r2
 800194c:	f7ff ff0e 	bl	800176c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001950:	4360      	muls	r0, r4
 8001952:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fbb0 f3f3 	udiv	r3, r0, r3
 800195c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001960:	fb08 a313 	mls	r3, r8, r3, sl
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	3332      	adds	r3, #50	; 0x32
 8001968:	fbb3 f3f8 	udiv	r3, r3, r8
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	433b      	orrs	r3, r7
 8001972:	e77f      	b.n	8001874 <UART_SetConfig+0xd8>
 8001974:	f7ff fee2 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 8001978:	fb04 f300 	mul.w	r3, r4, r0
 800197c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001980:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001984:	00b6      	lsls	r6, r6, #2
 8001986:	fbb3 f3f6 	udiv	r3, r3, r6
 800198a:	fbb3 f3f8 	udiv	r3, r3, r8
 800198e:	011e      	lsls	r6, r3, #4
 8001990:	f7ff fed4 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 8001994:	4360      	muls	r0, r4
 8001996:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fbb0 f7f3 	udiv	r7, r0, r3
 80019a0:	f7ff fecc 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 80019a4:	4360      	muls	r0, r4
 80019a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80019b4:	fb08 7313 	mls	r3, r8, r3, r7
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	3332      	adds	r3, #50	; 0x32
 80019bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80019c0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80019c4:	f7ff feba 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 80019c8:	4360      	muls	r0, r4
 80019ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	fbb0 faf2 	udiv	sl, r0, r2
 80019d4:	f7ff feb2 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 80019d8:	e7ba      	b.n	8001950 <UART_SetConfig+0x1b4>
 80019da:	bf00      	nop
 80019dc:	40013800 	.word	0x40013800

080019e0 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e2:	4604      	mov	r4, r0
 80019e4:	460e      	mov	r6, r1
 80019e6:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80019e8:	f7ff f88a 	bl	8000b00 <HAL_GetTick>
 80019ec:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80019ee:	6822      	ldr	r2, [r4, #0]
 80019f0:	6813      	ldr	r3, [r2, #0]
 80019f2:	ea36 0303 	bics.w	r3, r6, r3
 80019f6:	d101      	bne.n	80019fc <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80019f8:	2000      	movs	r0, #0
}
 80019fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80019fc:	1c6b      	adds	r3, r5, #1
 80019fe:	d0f7      	beq.n	80019f0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a00:	b9c5      	cbnz	r5, 8001a34 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a02:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8001a04:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	f022 0220 	bic.w	r2, r2, #32
 8001a14:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a1c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a34:	f7ff f864 	bl	8000b00 <HAL_GetTick>
 8001a38:	1bc0      	subs	r0, r0, r7
 8001a3a:	4285      	cmp	r5, r0
 8001a3c:	d2d7      	bcs.n	80019ee <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8001a3e:	e7e0      	b.n	8001a02 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08001a40 <HAL_UART_Init>:
{
 8001a40:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001a42:	4604      	mov	r4, r0
 8001a44:	b330      	cbz	r0, 8001a94 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001a46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a4e:	b91b      	cbnz	r3, 8001a58 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a54:	f000 fc1e 	bl	8002294 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001a58:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001a5a:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001a5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a60:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a62:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a68:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a6a:	f7ff fe97 	bl	800179c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a6e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a70:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a80:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a88:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001a8a:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001a8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001a92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
}
 8001a96:	bd10      	pop	{r4, pc}

08001a98 <HAL_UART_Transmit>:
{
 8001a98:	b570      	push	{r4, r5, r6, lr}
 8001a9a:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8001a9c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8001aa0:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8001aa2:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001aa4:	2901      	cmp	r1, #1
{
 8001aa6:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001aa8:	d001      	beq.n	8001aae <HAL_UART_Transmit+0x16>
 8001aaa:	2922      	cmp	r1, #34	; 0x22
 8001aac:	d14d      	bne.n	8001b4a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8001aae:	2d00      	cmp	r5, #0
 8001ab0:	d049      	beq.n	8001b46 <HAL_UART_Transmit+0xae>
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	d047      	beq.n	8001b46 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001ab6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d045      	beq.n	8001b4a <HAL_UART_Transmit+0xb2>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001ac8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8001acc:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001ace:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001ad4:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8001ad6:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001ad8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8001adc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001ade:	b98a      	cbnz	r2, 8001b04 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001ae0:	4632      	mov	r2, r6
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff ff7b 	bl	80019e0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001aea:	b9c0      	cbnz	r0, 8001b1e <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001aec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001af0:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001af2:	bf0c      	ite	eq
 8001af4:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8001af6:	2301      	movne	r3, #1
 8001af8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001afc:	2300      	movs	r3, #0
 8001afe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b04:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8001b06:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8001b0c:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001b0e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001b12:	4632      	mov	r2, r6
 8001b14:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b16:	d10d      	bne.n	8001b34 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001b18:	f7ff ff62 	bl	80019e0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001b1c:	b108      	cbz	r0, 8001b22 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001b1e:	2003      	movs	r0, #3
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b22:	882b      	ldrh	r3, [r5, #0]
 8001b24:	6822      	ldr	r2, [r4, #0]
 8001b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	b943      	cbnz	r3, 8001b42 <HAL_UART_Transmit+0xaa>
          pData +=2;
 8001b30:	3502      	adds	r5, #2
 8001b32:	e7d3      	b.n	8001adc <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001b34:	f7ff ff54 	bl	80019e0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	782a      	ldrb	r2, [r5, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	3501      	adds	r5, #1
 8001b44:	e7ca      	b.n	8001adc <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8001b46:	2001      	movs	r0, #1
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001b4a:	2002      	movs	r0, #2
}
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b50 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <DWT_Delay_Init+0x38>)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001b58:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b60:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <DWT_Delay_Init+0x3c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001b78:	bf00      	nop
     __ASM volatile ("NOP");
 8001b7a:	bf00      	nop
  __ASM volatile ("NOP");
 8001b7c:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001b7e:	6858      	ldr	r0, [r3, #4]
     }
     else
  {
    return 1; /*clock cycle counter not started*/
  }
}
 8001b80:	fab0 f080 	clz	r0, r0
 8001b84:	0940      	lsrs	r0, r0, #5
 8001b86:	4770      	bx	lr
 8001b88:	e000edf0 	.word	0xe000edf0
 8001b8c:	e0001000 	.word	0xe0001000

08001b90 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001b92:	4c09      	ldr	r4, [pc, #36]	; (8001bb8 <DWT_Delay_us+0x28>)
{
 8001b94:	9001      	str	r0, [sp, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001b96:	6865      	ldr	r5, [r4, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001b98:	f7ff fdca 	bl	8001730 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <DWT_Delay_us+0x2c>)
 8001b9e:	9b01      	ldr	r3, [sp, #4]
 8001ba0:	fbb0 f0f2 	udiv	r0, r0, r2
 8001ba4:	4343      	muls	r3, r0
 8001ba6:	9301      	str	r3, [sp, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	9a01      	ldr	r2, [sp, #4]
 8001bac:	1b5b      	subs	r3, r3, r5
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d3fa      	bcc.n	8001ba8 <DWT_Delay_us+0x18>
}
 8001bb2:	b003      	add	sp, #12
 8001bb4:	bd30      	pop	{r4, r5, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e0001000 	.word	0xe0001000
 8001bbc:	000f4240 	.word	0x000f4240

08001bc0 <set_gpio_output>:
GPIO_InitTypeDef GPIO_InitStruct;
void set_gpio_output (void)
{
	/*Configure GPIO pin output: PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2208      	movs	r2, #8
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <set_gpio_output+0x14>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <set_gpio_output+0x18>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	e881 000c 	stmia.w	r1, {r2, r3}
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60cb      	str	r3, [r1, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f7ff b818 	b.w	8000c04 <HAL_GPIO_Init>
 8001bd4:	20000280 	.word	0x20000280
 8001bd8:	40020400 	.word	0x40020400

08001bdc <set_gpio_input>:
}

void set_gpio_input (void)
{
	/*Configure GPIO pin input: PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <set_gpio_input+0x14>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <set_gpio_input+0x18>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001be2:	600b      	str	r3, [r1, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	604b      	str	r3, [r1, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	608b      	str	r3, [r1, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f7ff b80b 	b.w	8000c04 <HAL_GPIO_Init>
 8001bee:	bf00      	nop
 8001bf0:	20000280 	.word	0x20000280
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <DHT22_start>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void DHT22_start (void)
{
 8001bf8:	b510      	push	{r4, lr}
	set_gpio_output ();  // set the pin as output
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, 0);   // pull the pin low
 8001bfa:	4c0c      	ldr	r4, [pc, #48]	; (8001c2c <DHT22_start+0x34>)
	set_gpio_output ();  // set the pin as output
 8001bfc:	f7ff ffe0 	bl	8001bc0 <set_gpio_output>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, 0);   // pull the pin low
 8001c00:	2200      	movs	r2, #0
 8001c02:	2108      	movs	r1, #8
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff f8d5 	bl	8000db4 <HAL_GPIO_WritePin>
	DWT_Delay_us (500);   // wait for 500us
 8001c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c0e:	f7ff ffbf 	bl	8001b90 <DWT_Delay_us>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_3, 1);   // pull the pin high
 8001c12:	4620      	mov	r0, r4
 8001c14:	2201      	movs	r2, #1
 8001c16:	2108      	movs	r1, #8
 8001c18:	f7ff f8cc 	bl	8000db4 <HAL_GPIO_WritePin>
	DWT_Delay_us (30);   // wait for 30us
 8001c1c:	201e      	movs	r0, #30
 8001c1e:	f7ff ffb7 	bl	8001b90 <DWT_Delay_us>
	set_gpio_input ();   // set as input
}
 8001c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	set_gpio_input ();   // set as input
 8001c26:	f7ff bfd9 	b.w	8001bdc <set_gpio_input>
 8001c2a:	bf00      	nop
 8001c2c:	40020400 	.word	0x40020400

08001c30 <check_response>:

void check_response (void)
{
 8001c30:	b510      	push	{r4, lr}
	DWT_Delay_us (40);
 8001c32:	2028      	movs	r0, #40	; 0x28
 8001c34:	f7ff ffac 	bl	8001b90 <DWT_Delay_us>
	if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)))
 8001c38:	2108      	movs	r1, #8
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <check_response+0x38>)
 8001c3c:	f7ff f8b4 	bl	8000da8 <HAL_GPIO_ReadPin>
 8001c40:	b950      	cbnz	r0, 8001c58 <check_response+0x28>
	{
		DWT_Delay_us (80);
 8001c42:	2050      	movs	r0, #80	; 0x50
 8001c44:	f7ff ffa4 	bl	8001b90 <DWT_Delay_us>
		if ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3))) check = 1;
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4807      	ldr	r0, [pc, #28]	; (8001c68 <check_response+0x38>)
 8001c4c:	f7ff f8ac 	bl	8000da8 <HAL_GPIO_ReadPin>
 8001c50:	b110      	cbz	r0, 8001c58 <check_response+0x28>
 8001c52:	2201      	movs	r2, #1
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <check_response+0x3c>)
 8001c56:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)));   // wait for the pin to go low
 8001c58:	4c03      	ldr	r4, [pc, #12]	; (8001c68 <check_response+0x38>)
 8001c5a:	2108      	movs	r1, #8
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff f8a3 	bl	8000da8 <HAL_GPIO_ReadPin>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d1f9      	bne.n	8001c5a <check_response+0x2a>
}
 8001c66:	bd10      	pop	{r4, pc}
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	200001f0 	.word	0x200001f0

08001c70 <read_data>:

uint8_t read_data (void)
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	2400      	movs	r4, #0
 8001c74:	2507      	movs	r5, #7
	uint8_t i,j;
	for (j=0;j<8;j++)
	{
		while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)));   // wait for the pin to go high
 8001c76:	4e10      	ldr	r6, [pc, #64]	; (8001cb8 <read_data+0x48>)
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f7ff f894 	bl	8000da8 <HAL_GPIO_ReadPin>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d0f9      	beq.n	8001c78 <read_data+0x8>
		DWT_Delay_us (40);   // wait for 40 us
 8001c84:	2028      	movs	r0, #40	; 0x28
 8001c86:	f7ff ff83 	bl	8001b90 <DWT_Delay_us>
		if ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)) == 0)   // if the pin is low
 8001c8a:	2108      	movs	r1, #8
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f7ff f88b 	bl	8000da8 <HAL_GPIO_ReadPin>
 8001c92:	2301      	movs	r3, #1
		{
			i&= ~(1<<(7-j));   // write 0
 8001c94:	40ab      	lsls	r3, r5
		if ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)) == 0)   // if the pin is low
 8001c96:	b960      	cbnz	r0, 8001cb2 <read_data+0x42>
			i&= ~(1<<(7-j));   // write 0
 8001c98:	ea24 0403 	bic.w	r4, r4, r3
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
		while ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3)));  // wait for the pin to go low
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	f7ff f882 	bl	8000da8 <HAL_GPIO_ReadPin>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1f9      	bne.n	8001c9c <read_data+0x2c>
	for (j=0;j<8;j++)
 8001ca8:	f115 35ff 	adds.w	r5, r5, #4294967295
 8001cac:	d2e4      	bcs.n	8001c78 <read_data+0x8>
	}
	return i;
}
 8001cae:	4620      	mov	r0, r4
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001cb2:	431c      	orrs	r4, r3
 8001cb4:	b2e4      	uxtb	r4, r4
 8001cb6:	e7f1      	b.n	8001c9c <read_data+0x2c>
 8001cb8:	40020400 	.word	0x40020400

08001cbc <ESP8266_Init>:

/* USER CODE END 0 */
void ESP8266_Init(UART_HandleTypeDef *uart1){
 8001cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t at1[]="AT\n";
	uint8_t at2[]="AT+RST\n";
 8001cc0:	4a37      	ldr	r2, [pc, #220]	; (8001da0 <ESP8266_Init+0xe4>)
void ESP8266_Init(UART_HandleTypeDef *uart1){
 8001cc2:	b094      	sub	sp, #80	; 0x50
	uint8_t at2[]="AT+RST\n";
 8001cc4:	6851      	ldr	r1, [r2, #4]
void ESP8266_Init(UART_HandleTypeDef *uart1){
 8001cc6:	4604      	mov	r4, r0
	uint8_t at2[]="AT+RST\n";
 8001cc8:	6810      	ldr	r0, [r2, #0]
	uint8_t at3[]="AT+CWMODE=1\n";
 8001cca:	aa03      	add	r2, sp, #12
 8001ccc:	4615      	mov	r5, r2
	uint8_t at1[]="AT\n";
 8001cce:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <ESP8266_Init+0xe8>)
 8001cd0:	9300      	str	r3, [sp, #0]
	uint8_t at2[]="AT+RST\n";
 8001cd2:	ab01      	add	r3, sp, #4
 8001cd4:	c303      	stmia	r3!, {r0, r1}
	uint8_t at3[]="AT+CWMODE=1\n";
 8001cd6:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <ESP8266_Init+0xec>)
 8001cd8:	f103 0708 	add.w	r7, r3, #8
 8001cdc:	4616      	mov	r6, r2
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	c603      	stmia	r6!, {r0, r1}
 8001ce6:	42bb      	cmp	r3, r7
 8001ce8:	4632      	mov	r2, r6
 8001cea:	d1f7      	bne.n	8001cdc <ESP8266_Init+0x20>
	uint8_t at4[]="AT+CWJAP=\"MinhHoang\",\"19982006\"\n";
 8001cec:	aa0b      	add	r2, sp, #44	; 0x2c
 8001cee:	4617      	mov	r7, r2
	uint8_t at3[]="AT+CWMODE=1\n";
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	791b      	ldrb	r3, [r3, #4]
 8001cf4:	6030      	str	r0, [r6, #0]
 8001cf6:	7133      	strb	r3, [r6, #4]
	uint8_t at4[]="AT+CWJAP=\"MinhHoang\",\"19982006\"\n";
 8001cf8:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <ESP8266_Init+0xf0>)
 8001cfa:	f103 0e20 	add.w	lr, r3, #32
 8001cfe:	4616      	mov	r6, r2
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	3308      	adds	r3, #8
 8001d06:	c603      	stmia	r6!, {r0, r1}
 8001d08:	4573      	cmp	r3, lr
 8001d0a:	4632      	mov	r2, r6
 8001d0c:	d1f7      	bne.n	8001cfe <ESP8266_Init+0x42>
	uint8_t at5[]="AT+CIPMUX=0\n";
 8001d0e:	aa07      	add	r2, sp, #28
 8001d10:	4690      	mov	r8, r2
	uint8_t at4[]="AT+CWJAP=\"MinhHoang\",\"19982006\"\n";
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	7033      	strb	r3, [r6, #0]
	uint8_t at5[]="AT+CIPMUX=0\n";
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <ESP8266_Init+0xf4>)
 8001d18:	f103 0e08 	add.w	lr, r3, #8
 8001d1c:	4616      	mov	r6, r2
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	3308      	adds	r3, #8
 8001d24:	c603      	stmia	r6!, {r0, r1}
 8001d26:	4573      	cmp	r3, lr
 8001d28:	4632      	mov	r2, r6
 8001d2a:	d1f7      	bne.n	8001d1c <ESP8266_Init+0x60>
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	791b      	ldrb	r3, [r3, #4]
	HAL_UART_Transmit(uart1, at1, sizeof(at1), 100);
 8001d30:	4669      	mov	r1, sp
	uint8_t at5[]="AT+CIPMUX=0\n";
 8001d32:	6030      	str	r0, [r6, #0]
 8001d34:	7133      	strb	r3, [r6, #4]
	HAL_UART_Transmit(uart1, at1, sizeof(at1), 100);
 8001d36:	2204      	movs	r2, #4
 8001d38:	2364      	movs	r3, #100	; 0x64
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff feac 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d44:	f7fe fee2 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, at2, sizeof(at2), 100);
 8001d48:	a901      	add	r1, sp, #4
 8001d4a:	2364      	movs	r3, #100	; 0x64
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff fea2 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d58:	f7fe fed8 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, at3, sizeof(at3), 100);
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	220d      	movs	r2, #13
 8001d62:	4620      	mov	r0, r4
 8001d64:	f7ff fe98 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d6c:	f7fe fece 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, at4, sizeof(at4), 100);
 8001d70:	4639      	mov	r1, r7
 8001d72:	2364      	movs	r3, #100	; 0x64
 8001d74:	2221      	movs	r2, #33	; 0x21
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff fe8e 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d80:	f7fe fec4 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, at5, sizeof(at5), 100);
 8001d84:	2364      	movs	r3, #100	; 0x64
 8001d86:	220d      	movs	r2, #13
 8001d88:	4641      	mov	r1, r8
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff fe84 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d94:	f7fe feba 	bl	8000b0c <HAL_Delay>
}
 8001d98:	b014      	add	sp, #80	; 0x50
 8001d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d9e:	bf00      	nop
 8001da0:	080044e0 	.word	0x080044e0
 8001da4:	000a5441 	.word	0x000a5441
 8001da8:	080044e8 	.word	0x080044e8
 8001dac:	080044f5 	.word	0x080044f5
 8001db0:	08004516 	.word	0x08004516

08001db4 <Send_To_Server>:

void Send_To_Server(UART_HandleTypeDef *uart1, uint16_t temperature, uint16_t humidity){
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	b0c7      	sub	sp, #284	; 0x11c
 8001db8:	4616      	mov	r6, r2
	uint8_t start[]="AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\n";
 8001dba:	aa0a      	add	r2, sp, #40	; 0x28
void Send_To_Server(UART_HandleTypeDef *uart1, uint16_t temperature, uint16_t humidity){
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	468e      	mov	lr, r1
 8001dc0:	4615      	mov	r5, r2
	uint8_t start[]="AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\n";
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <Send_To_Server+0x164>)
 8001dc4:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 8001dc8:	4617      	mov	r7, r2
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	3308      	adds	r3, #8
 8001dd0:	c703      	stmia	r7!, {r0, r1}
 8001dd2:	4563      	cmp	r3, ip
 8001dd4:	463a      	mov	r2, r7
 8001dd6:	d1f7      	bne.n	8001dc8 <Send_To_Server+0x14>
	uint8_t send[]="AT+CIPSEND=51\n";
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <Send_To_Server+0x168>)
 8001dda:	aa06      	add	r2, sp, #24
 8001ddc:	f103 0c08 	add.w	ip, r3, #8
 8001de0:	4617      	mov	r7, r2
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	3308      	adds	r3, #8
 8001de8:	c703      	stmia	r7!, {r0, r1}
 8001dea:	4563      	cmp	r3, ip
 8001dec:	463a      	mov	r2, r7
 8001dee:	d1f7      	bne.n	8001de0 <Send_To_Server+0x2c>
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	8899      	ldrh	r1, [r3, #4]
 8001df4:	799b      	ldrb	r3, [r3, #6]
 8001df6:	6038      	str	r0, [r7, #0]
 8001df8:	71bb      	strb	r3, [r7, #6]
	uint8_t close[]="AT+CIPCLOSE\n";
 8001dfa:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <Send_To_Server+0x16c>)
	uint8_t send[]="AT+CIPSEND=51\n";
 8001dfc:	80b9      	strh	r1, [r7, #4]
	uint8_t close[]="AT+CIPCLOSE\n";
 8001dfe:	aa02      	add	r2, sp, #8
 8001e00:	f103 0c08 	add.w	ip, r3, #8
 8001e04:	4617      	mov	r7, r2
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	3308      	adds	r3, #8
 8001e0c:	c703      	stmia	r7!, {r0, r1}
 8001e0e:	4563      	cmp	r3, ip
 8001e10:	463a      	mov	r2, r7
 8001e12:	d1f7      	bne.n	8001e04 <Send_To_Server+0x50>
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	791b      	ldrb	r3, [r3, #4]
 8001e18:	6038      	str	r0, [r7, #0]
 8001e1a:	713b      	strb	r3, [r7, #4]
	uint8_t tempdata[100];
	uint8_t humidata[100];
	sprintf((char *)tempdata, "GET /update?api_key=%s&field%d=%d\r\n", API_WRITE_KEY, 1, temperature / 10);
 8001e1c:	270a      	movs	r7, #10
 8001e1e:	fbbe f3f7 	udiv	r3, lr, r7
 8001e22:	4a40      	ldr	r2, [pc, #256]	; (8001f24 <Send_To_Server+0x170>)
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4940      	ldr	r1, [pc, #256]	; (8001f28 <Send_To_Server+0x174>)
 8001e28:	2301      	movs	r3, #1
 8001e2a:	a814      	add	r0, sp, #80	; 0x50
 8001e2c:	f000 ff30 	bl	8002c90 <siprintf>
	sprintf((char *)humidata, "GET /update?api_key=%s&field%d=%d\r\n", API_WRITE_KEY, 2, humidity / 10);
 8001e30:	fbb6 f6f7 	udiv	r6, r6, r7
 8001e34:	2302      	movs	r3, #2
 8001e36:	4a3b      	ldr	r2, [pc, #236]	; (8001f24 <Send_To_Server+0x170>)
 8001e38:	493b      	ldr	r1, [pc, #236]	; (8001f28 <Send_To_Server+0x174>)
 8001e3a:	9600      	str	r6, [sp, #0]
 8001e3c:	a82d      	add	r0, sp, #180	; 0xb4
 8001e3e:	f000 ff27 	bl	8002c90 <siprintf>
	HAL_UART_Transmit(uart1, close, strlen((char *)close), 100);
 8001e42:	a802      	add	r0, sp, #8
 8001e44:	f7fe f99c 	bl	8000180 <strlen>
 8001e48:	a902      	add	r1, sp, #8
 8001e4a:	b282      	uxth	r2, r0
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff fe22 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e58:	f7fe fe58 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, start, strlen((char *)start), 100);
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f7fe f98f 	bl	8000180 <strlen>
 8001e62:	4629      	mov	r1, r5
 8001e64:	b282      	uxth	r2, r0
 8001e66:	2364      	movs	r3, #100	; 0x64
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff fe15 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e72:	f7fe fe4b 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, send, strlen((char *)send), 100);
 8001e76:	a806      	add	r0, sp, #24
 8001e78:	f7fe f982 	bl	8000180 <strlen>
 8001e7c:	a906      	add	r1, sp, #24
 8001e7e:	b282      	uxth	r2, r0
 8001e80:	2364      	movs	r3, #100	; 0x64
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff fe08 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e8c:	f7fe fe3e 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, tempdata, strlen((char *)tempdata), 100);
 8001e90:	a814      	add	r0, sp, #80	; 0x50
 8001e92:	f7fe f975 	bl	8000180 <strlen>
 8001e96:	a914      	add	r1, sp, #80	; 0x50
 8001e98:	b282      	uxth	r2, r0
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff fdfb 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea6:	f7fe fe31 	bl	8000b0c <HAL_Delay>

	HAL_UART_Transmit(uart1, close, strlen((char *)close), 100);
 8001eaa:	a802      	add	r0, sp, #8
 8001eac:	f7fe f968 	bl	8000180 <strlen>
 8001eb0:	a902      	add	r1, sp, #8
 8001eb2:	b282      	uxth	r2, r0
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff fdee 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001ebc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec0:	f7fe fe24 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, start, strlen((char *)start), 100);
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f7fe f95b 	bl	8000180 <strlen>
 8001eca:	4629      	mov	r1, r5
 8001ecc:	b282      	uxth	r2, r0
 8001ece:	2364      	movs	r3, #100	; 0x64
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fde1 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eda:	f7fe fe17 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, send, strlen((char *)send), 100);
 8001ede:	a806      	add	r0, sp, #24
 8001ee0:	f7fe f94e 	bl	8000180 <strlen>
 8001ee4:	a906      	add	r1, sp, #24
 8001ee6:	b282      	uxth	r2, r0
 8001ee8:	2364      	movs	r3, #100	; 0x64
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff fdd4 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef4:	f7fe fe0a 	bl	8000b0c <HAL_Delay>
	HAL_UART_Transmit(uart1, humidata, strlen((char *)humidata), 100);
 8001ef8:	a82d      	add	r0, sp, #180	; 0xb4
 8001efa:	f7fe f941 	bl	8000180 <strlen>
 8001efe:	2364      	movs	r3, #100	; 0x64
 8001f00:	b282      	uxth	r2, r0
 8001f02:	a92d      	add	r1, sp, #180	; 0xb4
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff fdc7 	bl	8001a98 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001f0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0e:	f7fe fdfd 	bl	8000b0c <HAL_Delay>
}
 8001f12:	b047      	add	sp, #284	; 0x11c
 8001f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	08004558 	.word	0x08004558
 8001f1c:	08004580 	.word	0x08004580
 8001f20:	0800458f 	.word	0x0800458f
 8001f24:	08004523 	.word	0x08004523
 8001f28:	08004534 	.word	0x08004534

08001f2c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <SystemClock_Config+0x7c>)
{
 8001f2e:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f30:	6813      	ldr	r3, [r2, #0]
{
 8001f32:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3c:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f42:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f4e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f50:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001f52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f56:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f58:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f5a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001f5c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5e:	f7fe ff6f 	bl	8000e40 <HAL_RCC_OscConfig>
 8001f62:	b100      	cbz	r0, 8001f66 <SystemClock_Config+0x3a>
 8001f64:	e7fe      	b.n	8001f64 <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f66:	220f      	movs	r2, #15
 8001f68:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f6c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6e:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f70:	4621      	mov	r1, r4
 8001f72:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f74:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f78:	f7ff fafc 	bl	8001574 <HAL_RCC_ClockConfig>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	b100      	cbz	r0, 8001f82 <SystemClock_Config+0x56>
 8001f80:	e7fe      	b.n	8001f80 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f82:	f7ff fbd5 	bl	8001730 <HAL_RCC_GetHCLKFreq>
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f8e:	f7fe fe11 	bl	8000bb4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f92:	2004      	movs	r0, #4
 8001f94:	f7fe fe24 	bl	8000be0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f98:	4622      	mov	r2, r4
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7fe fdd4 	bl	8000b4c <HAL_NVIC_SetPriority>
}
 8001fa4:	b012      	add	sp, #72	; 0x48
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	40007000 	.word	0x40007000

08001fac <main>:
{
 8001fac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001fb0:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001fb2:	f7fe fd91 	bl	8000ad8 <HAL_Init>
  SystemClock_Config();
 8001fb6:	f7ff ffb9 	bl	8001f2c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <main+0x1e8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fbc:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fc0:	4875      	ldr	r0, [pc, #468]	; (8002198 <main+0x1ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	f042 0204 	orr.w	r2, r2, #4
 8001fc6:	61da      	str	r2, [r3, #28]
 8001fc8:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fcc:	f002 0204 	and.w	r2, r2, #4
 8001fd0:	9203      	str	r2, [sp, #12]
 8001fd2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd4:	69da      	ldr	r2, [r3, #28]
  huart2.Init.BaudRate = 115200;
 8001fd6:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	f042 0220 	orr.w	r2, r2, #32
 8001fde:	61da      	str	r2, [r3, #28]
 8001fe0:	69da      	ldr	r2, [r3, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe2:	260c      	movs	r6, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe4:	f002 0220 	and.w	r2, r2, #32
 8001fe8:	9204      	str	r2, [sp, #16]
 8001fea:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	69da      	ldr	r2, [r3, #28]
  huart2.Instance = USART2;
 8001fee:	4c6b      	ldr	r4, [pc, #428]	; (800219c <main+0x1f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	61da      	str	r2, [r3, #28]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	f002 0201 	and.w	r2, r2, #1
 8001ffc:	9205      	str	r2, [sp, #20]
 8001ffe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	f042 0202 	orr.w	r2, r2, #2
 8002006:	61da      	str	r2, [r3, #28]
 8002008:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	9306      	str	r3, [sp, #24]
 8002012:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002014:	f7fe fece 	bl	8000db4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201e:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <main+0x1f4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002020:	a907      	add	r1, sp, #28
 8002022:	4860      	ldr	r0, [pc, #384]	; (80021a4 <main+0x1f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002024:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002028:	f7fe fdec 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800202c:	2320      	movs	r3, #32
 800202e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002032:	a907      	add	r1, sp, #28
 8002034:	4858      	ldr	r0, [pc, #352]	; (8002198 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800203c:	f7fe fde2 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002040:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	4859      	ldr	r0, [pc, #356]	; (80021a8 <main+0x1fc>)
 8002044:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002046:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f7fe fdda 	bl	8000c04 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002050:	4b56      	ldr	r3, [pc, #344]	; (80021ac <main+0x200>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002052:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8002054:	e884 0088 	stmia.w	r4, {r3, r7}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002058:	60a5      	str	r5, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800205a:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205c:	6125      	str	r5, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205e:	6166      	str	r6, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002060:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002062:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002064:	f7ff fcec 	bl	8001a40 <HAL_UART_Init>
 8002068:	b100      	cbz	r0, 800206c <main+0xc0>
 800206a:	e7fe      	b.n	800206a <main+0xbe>
  huart1.Instance = USART1;
 800206c:	4d50      	ldr	r5, [pc, #320]	; (80021b0 <main+0x204>)
 800206e:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <main+0x208>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002070:	60a8      	str	r0, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002072:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002074:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800207a:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 800207c:	e885 0088 	stmia.w	r5, {r3, r7}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002080:	616e      	str	r6, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002082:	f7ff fcdd 	bl	8001a40 <HAL_UART_Init>
 8002086:	b100      	cbz	r0, 800208a <main+0xde>
 8002088:	e7fe      	b.n	8002088 <main+0xdc>
  DWT_Delay_Init();
 800208a:	f7ff fd61 	bl	8001b50 <DWT_Delay_Init>
  ESP8266_Init(&huart1);
 800208e:	4628      	mov	r0, r5
 8002090:	f7ff fe14 	bl	8001cbc <ESP8266_Init>
	 sprintf((char *)temp, "Temp: %d.%dC\n", temp_low, temp_high);
 8002094:	4e48      	ldr	r6, [pc, #288]	; (80021b8 <main+0x20c>)
	 sprintf((char *)humi, "RH: %d.%d\n", rh_low, rh_high);
 8002096:	4d49      	ldr	r5, [pc, #292]	; (80021bc <main+0x210>)
	  DHT22_start ();
 8002098:	f7ff fdae 	bl	8001bf8 <DHT22_start>
	  check_response ();
 800209c:	f7ff fdc8 	bl	8001c30 <check_response>
	  Rh_byte1 = read_data ();
 80020a0:	f7ff fde6 	bl	8001c70 <read_data>
 80020a4:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80021d8 <main+0x22c>
	  Rh_byte2 = read_data ();
 80020a8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80021dc <main+0x230>
	  Rh_byte1 = read_data ();
 80020ac:	f889 0000 	strb.w	r0, [r9]
	  Rh_byte2 = read_data ();
 80020b0:	f7ff fdde 	bl	8001c70 <read_data>
 80020b4:	f888 0000 	strb.w	r0, [r8]
	  Temp_byte1 = read_data ();
 80020b8:	f7ff fdda 	bl	8001c70 <read_data>
 80020bc:	f8df a120 	ldr.w	sl, [pc, #288]	; 80021e0 <main+0x234>
	  Temp_byte2 = read_data ();
 80020c0:	4f3f      	ldr	r7, [pc, #252]	; (80021c0 <main+0x214>)
	  Temp_byte1 = read_data ();
 80020c2:	f88a 0000 	strb.w	r0, [sl]
	  Temp_byte2 = read_data ();
 80020c6:	f7ff fdd3 	bl	8001c70 <read_data>
 80020ca:	7038      	strb	r0, [r7, #0]
	  sum = read_data();
 80020cc:	f7ff fdd0 	bl	8001c70 <read_data>
	  temp_low = TEMP/10;
 80020d0:	f04f 0e0a 	mov.w	lr, #10
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80020d4:	7839      	ldrb	r1, [r7, #0]
 80020d6:	f89a c000 	ldrb.w	ip, [sl]
	  sum = read_data();
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <main+0x218>)
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 80020dc:	ea41 2c0c 	orr.w	ip, r1, ip, lsl #8
	  temp_low = TEMP/10;
 80020e0:	fbbc f1fe 	udiv	r1, ip, lr
	  sum = read_data();
 80020e4:	8018      	strh	r0, [r3, #0]
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 80020e6:	f898 3000 	ldrb.w	r3, [r8]
 80020ea:	f899 0000 	ldrb.w	r0, [r9]
	  temp_low = TEMP/10;
 80020ee:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 80021e4 <main+0x238>
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 80020f2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	  temp_low = TEMP/10;
 80020f6:	b28b      	uxth	r3, r1
 80020f8:	f8cb 3000 	str.w	r3, [fp]
	  rh_low = RH/10;
 80020fc:	fbb0 f3fe 	udiv	r3, r0, lr
	  temp_high = TEMP%10;
 8002100:	fb0e c111 	mls	r1, lr, r1, ip
 8002104:	4a30      	ldr	r2, [pc, #192]	; (80021c8 <main+0x21c>)
 8002106:	b289      	uxth	r1, r1
 8002108:	6011      	str	r1, [r2, #0]
	  rh_low = RH/10;
 800210a:	b299      	uxth	r1, r3
	  rh_high = RH%10;
 800210c:	fb0e 0313 	mls	r3, lr, r3, r0
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 8002110:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80021e8 <main+0x23c>
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8002114:	4f2d      	ldr	r7, [pc, #180]	; (80021cc <main+0x220>)
	  rh_low = RH/10;
 8002116:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80021ec <main+0x240>
	  rh_high = RH%10;
 800211a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80021f0 <main+0x244>
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 800211e:	f8a8 0000 	strh.w	r0, [r8]
	  rh_high = RH%10;
 8002122:	b29b      	uxth	r3, r3
	  HAL_Delay (1000);
 8002124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8002128:	f8a7 c000 	strh.w	ip, [r7]
	  temp_high = TEMP%10;
 800212c:	9201      	str	r2, [sp, #4]
	  rh_low = RH/10;
 800212e:	f8c9 1000 	str.w	r1, [r9]
	  rh_high = RH%10;
 8002132:	f8ca 3000 	str.w	r3, [sl]
	  HAL_Delay (1000);
 8002136:	f7fe fce9 	bl	8000b0c <HAL_Delay>
	 sprintf((char *)temp, "Temp: %d.%dC\n", temp_low, temp_high);
 800213a:	9a01      	ldr	r2, [sp, #4]
 800213c:	4924      	ldr	r1, [pc, #144]	; (80021d0 <main+0x224>)
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	4630      	mov	r0, r6
 8002142:	f8db 2000 	ldr.w	r2, [fp]
 8002146:	f000 fda3 	bl	8002c90 <siprintf>
	 HAL_UART_Transmit(&huart2, temp, strlen(temp), 100);
 800214a:	4630      	mov	r0, r6
 800214c:	f7fe f818 	bl	8000180 <strlen>
 8002150:	4631      	mov	r1, r6
 8002152:	b282      	uxth	r2, r0
 8002154:	2364      	movs	r3, #100	; 0x64
 8002156:	4620      	mov	r0, r4
 8002158:	f7ff fc9e 	bl	8001a98 <HAL_UART_Transmit>
	 sprintf((char *)humi, "RH: %d.%d\n", rh_low, rh_high);
 800215c:	f8da 3000 	ldr.w	r3, [sl]
 8002160:	f8d9 2000 	ldr.w	r2, [r9]
 8002164:	491b      	ldr	r1, [pc, #108]	; (80021d4 <main+0x228>)
 8002166:	4628      	mov	r0, r5
 8002168:	f000 fd92 	bl	8002c90 <siprintf>
	 HAL_UART_Transmit(&huart2, humi, strlen(humi), 100);
 800216c:	4628      	mov	r0, r5
 800216e:	f7fe f807 	bl	8000180 <strlen>
 8002172:	2364      	movs	r3, #100	; 0x64
 8002174:	b282      	uxth	r2, r0
 8002176:	4629      	mov	r1, r5
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff fc8d 	bl	8001a98 <HAL_UART_Transmit>
	 Send_To_Server(&huart1, TEMP, RH);
 800217e:	f8b8 2000 	ldrh.w	r2, [r8]
 8002182:	8839      	ldrh	r1, [r7, #0]
 8002184:	480a      	ldr	r0, [pc, #40]	; (80021b0 <main+0x204>)
 8002186:	f7ff fe15 	bl	8001db4 <Send_To_Server>
	 HAL_Delay(1000);
 800218a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800218e:	f7fe fcbd 	bl	8000b0c <HAL_Delay>
 8002192:	e781      	b.n	8002098 <main+0xec>
 8002194:	40023800 	.word	0x40023800
 8002198:	40020000 	.word	0x40020000
 800219c:	2000029c 	.word	0x2000029c
 80021a0:	10110000 	.word	0x10110000
 80021a4:	40020800 	.word	0x40020800
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40004400 	.word	0x40004400
 80021b0:	2000023c 	.word	0x2000023c
 80021b4:	40013800 	.word	0x40013800
 80021b8:	20000222 	.word	0x20000222
 80021bc:	20000204 	.word	0x20000204
 80021c0:	200002e2 	.word	0x200002e2
 80021c4:	20000216 	.word	0x20000216
 80021c8:	20000238 	.word	0x20000238
 80021cc:	20000234 	.word	0x20000234
 80021d0:	0800459c 	.word	0x0800459c
 80021d4:	080045aa 	.word	0x080045aa
 80021d8:	20000218 	.word	0x20000218
 80021dc:	2000027d 	.word	0x2000027d
 80021e0:	2000027c 	.word	0x2000027c
 80021e4:	200002dc 	.word	0x200002dc
 80021e8:	20000220 	.word	0x20000220
 80021ec:	20000294 	.word	0x20000294
 80021f0:	2000021c 	.word	0x2000021c

080021f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021f8:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 80021fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
 8002202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002204:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	621a      	str	r2, [r3, #32]
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	f002 0201 	and.w	r2, r2, #1
 800221a:	9202      	str	r2, [sp, #8]
 800221c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002220:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	9303      	str	r3, [sp, #12]
 800222e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002230:	f7fe fc7a 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	f06f 000b 	mvn.w	r0, #11
 800223a:	4611      	mov	r1, r2
 800223c:	f7fe fc86 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	f06f 000a 	mvn.w	r0, #10
 8002246:	4611      	mov	r1, r2
 8002248:	f7fe fc80 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	f06f 0009 	mvn.w	r0, #9
 8002252:	4611      	mov	r1, r2
 8002254:	f7fe fc7a 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	f06f 0004 	mvn.w	r0, #4
 800225e:	4611      	mov	r1, r2
 8002260:	f7fe fc74 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	f06f 0003 	mvn.w	r0, #3
 800226a:	4611      	mov	r1, r2
 800226c:	f7fe fc6e 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	f06f 0001 	mvn.w	r0, #1
 8002276:	4611      	mov	r1, r2
 8002278:	f7fe fc68 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 30ff 	mov.w	r0, #4294967295
 8002282:	4611      	mov	r1, r2
 8002284:	f7fe fc62 	bl	8000b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002288:	b005      	add	sp, #20
 800228a:	f85d fb04 	ldr.w	pc, [sp], #4
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002294:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002296:	6802      	ldr	r2, [r0, #0]
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_UART_MspInit+0x44>)
 800229a:	429a      	cmp	r2, r3
 800229c:	d118      	bne.n	80022d0 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80022a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	480b      	ldr	r0, [pc, #44]	; (80022dc <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022b8:	230c      	movs	r3, #12
 80022ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c8:	2307      	movs	r3, #7
 80022ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f7fe fc9a 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022d0:	b007      	add	sp, #28
 80022d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022d6:	bf00      	nop
 80022d8:	40004400 	.word	0x40004400
 80022dc:	40020000 	.word	0x40020000

080022e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80022e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e2:	f7fe fc05 	bl	8000af0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80022ea:	f7fe bc86 	b.w	8000bfa <HAL_SYSTICK_IRQHandler>
	...

080022f0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <SystemInit+0x3c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <SystemInit+0x40>)
 80022fe:	400a      	ands	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002308:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 800230c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002314:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800231c:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002326:	4b03      	ldr	r3, [pc, #12]	; (8002334 <SystemInit+0x44>)
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	4770      	bx	lr
 800232c:	40023800 	.word	0x40023800
 8002330:	88ffc00c 	.word	0x88ffc00c
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002338:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800233a:	e003      	b.n	8002344 <LoopCopyDataInit>

0800233c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800233e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002340:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002342:	3104      	adds	r1, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002344:	480a      	ldr	r0, [pc, #40]	; (8002370 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002348:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800234a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800234c:	d3f6      	bcc.n	800233c <CopyDataInit>
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002350:	e002      	b.n	8002358 <LoopFillZerobss>

08002352 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002354:	f842 3b04 	str.w	r3, [r2], #4

08002358 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800235a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800235c:	d3f9      	bcc.n	8002352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800235e:	f7ff ffc7 	bl	80022f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f000 f80f 	bl	8002384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002366:	f7ff fe21 	bl	8001fac <main>
  bx lr
 800236a:	4770      	bx	lr
  ldr r3, =_sidata
 800236c:	08004838 	.word	0x08004838
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002374:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8002378:	200001d4 	.word	0x200001d4
  ldr r3, = _ebss
 800237c:	200002e8 	.word	0x200002e8

08002380 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC1_IRQHandler>
	...

08002384 <__libc_init_array>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	2500      	movs	r5, #0
 8002388:	4e0c      	ldr	r6, [pc, #48]	; (80023bc <__libc_init_array+0x38>)
 800238a:	4c0d      	ldr	r4, [pc, #52]	; (80023c0 <__libc_init_array+0x3c>)
 800238c:	1ba4      	subs	r4, r4, r6
 800238e:	10a4      	asrs	r4, r4, #2
 8002390:	42a5      	cmp	r5, r4
 8002392:	d109      	bne.n	80023a8 <__libc_init_array+0x24>
 8002394:	f002 f898 	bl	80044c8 <_init>
 8002398:	2500      	movs	r5, #0
 800239a:	4e0a      	ldr	r6, [pc, #40]	; (80023c4 <__libc_init_array+0x40>)
 800239c:	4c0a      	ldr	r4, [pc, #40]	; (80023c8 <__libc_init_array+0x44>)
 800239e:	1ba4      	subs	r4, r4, r6
 80023a0:	10a4      	asrs	r4, r4, #2
 80023a2:	42a5      	cmp	r5, r4
 80023a4:	d105      	bne.n	80023b2 <__libc_init_array+0x2e>
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023ac:	4798      	blx	r3
 80023ae:	3501      	adds	r5, #1
 80023b0:	e7ee      	b.n	8002390 <__libc_init_array+0xc>
 80023b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023b6:	4798      	blx	r3
 80023b8:	3501      	adds	r5, #1
 80023ba:	e7f2      	b.n	80023a2 <__libc_init_array+0x1e>
 80023bc:	08004830 	.word	0x08004830
 80023c0:	08004830 	.word	0x08004830
 80023c4:	08004830 	.word	0x08004830
 80023c8:	08004834 	.word	0x08004834

080023cc <__cvt>:
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d2:	461e      	mov	r6, r3
 80023d4:	bfbb      	ittet	lt
 80023d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80023da:	461e      	movlt	r6, r3
 80023dc:	2300      	movge	r3, #0
 80023de:	232d      	movlt	r3, #45	; 0x2d
 80023e0:	b088      	sub	sp, #32
 80023e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80023e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80023e6:	f027 0720 	bic.w	r7, r7, #32
 80023ea:	2f46      	cmp	r7, #70	; 0x46
 80023ec:	4614      	mov	r4, r2
 80023ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80023f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80023f4:	700b      	strb	r3, [r1, #0]
 80023f6:	d004      	beq.n	8002402 <__cvt+0x36>
 80023f8:	2f45      	cmp	r7, #69	; 0x45
 80023fa:	d100      	bne.n	80023fe <__cvt+0x32>
 80023fc:	3501      	adds	r5, #1
 80023fe:	2302      	movs	r3, #2
 8002400:	e000      	b.n	8002404 <__cvt+0x38>
 8002402:	2303      	movs	r3, #3
 8002404:	aa07      	add	r2, sp, #28
 8002406:	9204      	str	r2, [sp, #16]
 8002408:	aa06      	add	r2, sp, #24
 800240a:	9203      	str	r2, [sp, #12]
 800240c:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002410:	4622      	mov	r2, r4
 8002412:	4633      	mov	r3, r6
 8002414:	f000 fcec 	bl	8002df0 <_dtoa_r>
 8002418:	2f47      	cmp	r7, #71	; 0x47
 800241a:	4680      	mov	r8, r0
 800241c:	d102      	bne.n	8002424 <__cvt+0x58>
 800241e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002420:	07db      	lsls	r3, r3, #31
 8002422:	d526      	bpl.n	8002472 <__cvt+0xa6>
 8002424:	2f46      	cmp	r7, #70	; 0x46
 8002426:	eb08 0905 	add.w	r9, r8, r5
 800242a:	d111      	bne.n	8002450 <__cvt+0x84>
 800242c:	f898 3000 	ldrb.w	r3, [r8]
 8002430:	2b30      	cmp	r3, #48	; 0x30
 8002432:	d10a      	bne.n	800244a <__cvt+0x7e>
 8002434:	2200      	movs	r2, #0
 8002436:	2300      	movs	r3, #0
 8002438:	4620      	mov	r0, r4
 800243a:	4631      	mov	r1, r6
 800243c:	f7fe fac8 	bl	80009d0 <__aeabi_dcmpeq>
 8002440:	b918      	cbnz	r0, 800244a <__cvt+0x7e>
 8002442:	f1c5 0501 	rsb	r5, r5, #1
 8002446:	f8ca 5000 	str.w	r5, [sl]
 800244a:	f8da 3000 	ldr.w	r3, [sl]
 800244e:	4499      	add	r9, r3
 8002450:	2200      	movs	r2, #0
 8002452:	2300      	movs	r3, #0
 8002454:	4620      	mov	r0, r4
 8002456:	4631      	mov	r1, r6
 8002458:	f7fe faba 	bl	80009d0 <__aeabi_dcmpeq>
 800245c:	b938      	cbnz	r0, 800246e <__cvt+0xa2>
 800245e:	2230      	movs	r2, #48	; 0x30
 8002460:	9b07      	ldr	r3, [sp, #28]
 8002462:	4599      	cmp	r9, r3
 8002464:	d905      	bls.n	8002472 <__cvt+0xa6>
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	9107      	str	r1, [sp, #28]
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e7f8      	b.n	8002460 <__cvt+0x94>
 800246e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002472:	4640      	mov	r0, r8
 8002474:	9b07      	ldr	r3, [sp, #28]
 8002476:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002478:	eba3 0308 	sub.w	r3, r3, r8
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	b008      	add	sp, #32
 8002480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002484 <__exponent>:
 8002484:	4603      	mov	r3, r0
 8002486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002488:	2900      	cmp	r1, #0
 800248a:	f803 2b02 	strb.w	r2, [r3], #2
 800248e:	bfb6      	itet	lt
 8002490:	222d      	movlt	r2, #45	; 0x2d
 8002492:	222b      	movge	r2, #43	; 0x2b
 8002494:	4249      	neglt	r1, r1
 8002496:	2909      	cmp	r1, #9
 8002498:	7042      	strb	r2, [r0, #1]
 800249a:	dd21      	ble.n	80024e0 <__exponent+0x5c>
 800249c:	f10d 0207 	add.w	r2, sp, #7
 80024a0:	4617      	mov	r7, r2
 80024a2:	260a      	movs	r6, #10
 80024a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80024a8:	fb06 1115 	mls	r1, r6, r5, r1
 80024ac:	2d09      	cmp	r5, #9
 80024ae:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80024b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80024b6:	f102 34ff 	add.w	r4, r2, #4294967295
 80024ba:	4629      	mov	r1, r5
 80024bc:	dc09      	bgt.n	80024d2 <__exponent+0x4e>
 80024be:	3130      	adds	r1, #48	; 0x30
 80024c0:	3a02      	subs	r2, #2
 80024c2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80024c6:	42ba      	cmp	r2, r7
 80024c8:	461c      	mov	r4, r3
 80024ca:	d304      	bcc.n	80024d6 <__exponent+0x52>
 80024cc:	1a20      	subs	r0, r4, r0
 80024ce:	b003      	add	sp, #12
 80024d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d2:	4622      	mov	r2, r4
 80024d4:	e7e6      	b.n	80024a4 <__exponent+0x20>
 80024d6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80024da:	f803 1b01 	strb.w	r1, [r3], #1
 80024de:	e7f2      	b.n	80024c6 <__exponent+0x42>
 80024e0:	2230      	movs	r2, #48	; 0x30
 80024e2:	461c      	mov	r4, r3
 80024e4:	4411      	add	r1, r2
 80024e6:	f804 2b02 	strb.w	r2, [r4], #2
 80024ea:	7059      	strb	r1, [r3, #1]
 80024ec:	e7ee      	b.n	80024cc <__exponent+0x48>
	...

080024f0 <_printf_float>:
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	b091      	sub	sp, #68	; 0x44
 80024f6:	460c      	mov	r4, r1
 80024f8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80024fa:	4693      	mov	fp, r2
 80024fc:	461e      	mov	r6, r3
 80024fe:	4605      	mov	r5, r0
 8002500:	f001 fa4a 	bl	8003998 <_localeconv_r>
 8002504:	6803      	ldr	r3, [r0, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	9309      	str	r3, [sp, #36]	; 0x24
 800250a:	f7fd fe39 	bl	8000180 <strlen>
 800250e:	2300      	movs	r3, #0
 8002510:	930e      	str	r3, [sp, #56]	; 0x38
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	900a      	str	r0, [sp, #40]	; 0x28
 8002516:	3307      	adds	r3, #7
 8002518:	f023 0307 	bic.w	r3, r3, #7
 800251c:	f103 0208 	add.w	r2, r3, #8
 8002520:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002524:	f8d4 a000 	ldr.w	sl, [r4]
 8002528:	603a      	str	r2, [r7, #0]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002532:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8002536:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002538:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800253c:	930b      	str	r3, [sp, #44]	; 0x2c
 800253e:	f04f 32ff 	mov.w	r2, #4294967295
 8002542:	4ba6      	ldr	r3, [pc, #664]	; (80027dc <_printf_float+0x2ec>)
 8002544:	4638      	mov	r0, r7
 8002546:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002548:	f7fe fa74 	bl	8000a34 <__aeabi_dcmpun>
 800254c:	2800      	cmp	r0, #0
 800254e:	f040 81f7 	bne.w	8002940 <_printf_float+0x450>
 8002552:	f04f 32ff 	mov.w	r2, #4294967295
 8002556:	4ba1      	ldr	r3, [pc, #644]	; (80027dc <_printf_float+0x2ec>)
 8002558:	4638      	mov	r0, r7
 800255a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800255c:	f7fe fa4c 	bl	80009f8 <__aeabi_dcmple>
 8002560:	2800      	cmp	r0, #0
 8002562:	f040 81ed 	bne.w	8002940 <_printf_float+0x450>
 8002566:	2200      	movs	r2, #0
 8002568:	2300      	movs	r3, #0
 800256a:	4638      	mov	r0, r7
 800256c:	4649      	mov	r1, r9
 800256e:	f7fe fa39 	bl	80009e4 <__aeabi_dcmplt>
 8002572:	b110      	cbz	r0, 800257a <_printf_float+0x8a>
 8002574:	232d      	movs	r3, #45	; 0x2d
 8002576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800257a:	4b99      	ldr	r3, [pc, #612]	; (80027e0 <_printf_float+0x2f0>)
 800257c:	4f99      	ldr	r7, [pc, #612]	; (80027e4 <_printf_float+0x2f4>)
 800257e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002582:	bf98      	it	ls
 8002584:	461f      	movls	r7, r3
 8002586:	2303      	movs	r3, #3
 8002588:	f04f 0900 	mov.w	r9, #0
 800258c:	6123      	str	r3, [r4, #16]
 800258e:	f02a 0304 	bic.w	r3, sl, #4
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	9600      	str	r6, [sp, #0]
 8002596:	465b      	mov	r3, fp
 8002598:	aa0f      	add	r2, sp, #60	; 0x3c
 800259a:	4621      	mov	r1, r4
 800259c:	4628      	mov	r0, r5
 800259e:	f000 f9df 	bl	8002960 <_printf_common>
 80025a2:	3001      	adds	r0, #1
 80025a4:	f040 809a 	bne.w	80026dc <_printf_float+0x1ec>
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	b011      	add	sp, #68	; 0x44
 80025ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025b2:	6862      	ldr	r2, [r4, #4]
 80025b4:	a80e      	add	r0, sp, #56	; 0x38
 80025b6:	1c53      	adds	r3, r2, #1
 80025b8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80025bc:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 80025c0:	d141      	bne.n	8002646 <_printf_float+0x156>
 80025c2:	2206      	movs	r2, #6
 80025c4:	6062      	str	r2, [r4, #4]
 80025c6:	2100      	movs	r1, #0
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	6863      	ldr	r3, [r4, #4]
 80025ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80025d2:	9005      	str	r0, [sp, #20]
 80025d4:	9202      	str	r2, [sp, #8]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	463a      	mov	r2, r7
 80025da:	464b      	mov	r3, r9
 80025dc:	9106      	str	r1, [sp, #24]
 80025de:	f8cd 8010 	str.w	r8, [sp, #16]
 80025e2:	f8cd e00c 	str.w	lr, [sp, #12]
 80025e6:	4628      	mov	r0, r5
 80025e8:	f7ff fef0 	bl	80023cc <__cvt>
 80025ec:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80025f0:	2b47      	cmp	r3, #71	; 0x47
 80025f2:	4607      	mov	r7, r0
 80025f4:	d109      	bne.n	800260a <_printf_float+0x11a>
 80025f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025f8:	1cd8      	adds	r0, r3, #3
 80025fa:	db02      	blt.n	8002602 <_printf_float+0x112>
 80025fc:	6862      	ldr	r2, [r4, #4]
 80025fe:	4293      	cmp	r3, r2
 8002600:	dd59      	ble.n	80026b6 <_printf_float+0x1c6>
 8002602:	f1a8 0802 	sub.w	r8, r8, #2
 8002606:	fa5f f888 	uxtb.w	r8, r8
 800260a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800260e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002610:	d836      	bhi.n	8002680 <_printf_float+0x190>
 8002612:	3901      	subs	r1, #1
 8002614:	4642      	mov	r2, r8
 8002616:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800261a:	910d      	str	r1, [sp, #52]	; 0x34
 800261c:	f7ff ff32 	bl	8002484 <__exponent>
 8002620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002622:	4681      	mov	r9, r0
 8002624:	1883      	adds	r3, r0, r2
 8002626:	2a01      	cmp	r2, #1
 8002628:	6123      	str	r3, [r4, #16]
 800262a:	dc02      	bgt.n	8002632 <_printf_float+0x142>
 800262c:	6822      	ldr	r2, [r4, #0]
 800262e:	07d1      	lsls	r1, r2, #31
 8002630:	d501      	bpl.n	8002636 <_printf_float+0x146>
 8002632:	3301      	adds	r3, #1
 8002634:	6123      	str	r3, [r4, #16]
 8002636:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0aa      	beq.n	8002594 <_printf_float+0xa4>
 800263e:	232d      	movs	r3, #45	; 0x2d
 8002640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002644:	e7a6      	b.n	8002594 <_printf_float+0xa4>
 8002646:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800264a:	d002      	beq.n	8002652 <_printf_float+0x162>
 800264c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002650:	d1b9      	bne.n	80025c6 <_printf_float+0xd6>
 8002652:	b19a      	cbz	r2, 800267c <_printf_float+0x18c>
 8002654:	2100      	movs	r1, #0
 8002656:	9106      	str	r1, [sp, #24]
 8002658:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800265c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	9005      	str	r0, [sp, #20]
 8002664:	463a      	mov	r2, r7
 8002666:	f8cd 8010 	str.w	r8, [sp, #16]
 800266a:	f8cd e00c 	str.w	lr, [sp, #12]
 800266e:	9102      	str	r1, [sp, #8]
 8002670:	464b      	mov	r3, r9
 8002672:	4628      	mov	r0, r5
 8002674:	f7ff feaa 	bl	80023cc <__cvt>
 8002678:	4607      	mov	r7, r0
 800267a:	e7bc      	b.n	80025f6 <_printf_float+0x106>
 800267c:	2201      	movs	r2, #1
 800267e:	e7a1      	b.n	80025c4 <_printf_float+0xd4>
 8002680:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002684:	d119      	bne.n	80026ba <_printf_float+0x1ca>
 8002686:	2900      	cmp	r1, #0
 8002688:	6863      	ldr	r3, [r4, #4]
 800268a:	dd0c      	ble.n	80026a6 <_printf_float+0x1b6>
 800268c:	6121      	str	r1, [r4, #16]
 800268e:	b913      	cbnz	r3, 8002696 <_printf_float+0x1a6>
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	07d2      	lsls	r2, r2, #31
 8002694:	d502      	bpl.n	800269c <_printf_float+0x1ac>
 8002696:	3301      	adds	r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	6123      	str	r3, [r4, #16]
 800269c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800269e:	f04f 0900 	mov.w	r9, #0
 80026a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80026a4:	e7c7      	b.n	8002636 <_printf_float+0x146>
 80026a6:	b913      	cbnz	r3, 80026ae <_printf_float+0x1be>
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	07d0      	lsls	r0, r2, #31
 80026ac:	d501      	bpl.n	80026b2 <_printf_float+0x1c2>
 80026ae:	3302      	adds	r3, #2
 80026b0:	e7f3      	b.n	800269a <_printf_float+0x1aa>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e7f1      	b.n	800269a <_printf_float+0x1aa>
 80026b6:	f04f 0867 	mov.w	r8, #103	; 0x67
 80026ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026be:	4293      	cmp	r3, r2
 80026c0:	db05      	blt.n	80026ce <_printf_float+0x1de>
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	6123      	str	r3, [r4, #16]
 80026c6:	07d1      	lsls	r1, r2, #31
 80026c8:	d5e8      	bpl.n	800269c <_printf_float+0x1ac>
 80026ca:	3301      	adds	r3, #1
 80026cc:	e7e5      	b.n	800269a <_printf_float+0x1aa>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bfcc      	ite	gt
 80026d2:	2301      	movgt	r3, #1
 80026d4:	f1c3 0302 	rsble	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	e7de      	b.n	800269a <_printf_float+0x1aa>
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	055a      	lsls	r2, r3, #21
 80026e0:	d407      	bmi.n	80026f2 <_printf_float+0x202>
 80026e2:	6923      	ldr	r3, [r4, #16]
 80026e4:	463a      	mov	r2, r7
 80026e6:	4659      	mov	r1, fp
 80026e8:	4628      	mov	r0, r5
 80026ea:	47b0      	blx	r6
 80026ec:	3001      	adds	r0, #1
 80026ee:	d12a      	bne.n	8002746 <_printf_float+0x256>
 80026f0:	e75a      	b.n	80025a8 <_printf_float+0xb8>
 80026f2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80026f6:	f240 80dc 	bls.w	80028b2 <_printf_float+0x3c2>
 80026fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026fe:	2200      	movs	r2, #0
 8002700:	2300      	movs	r3, #0
 8002702:	f7fe f965 	bl	80009d0 <__aeabi_dcmpeq>
 8002706:	2800      	cmp	r0, #0
 8002708:	d039      	beq.n	800277e <_printf_float+0x28e>
 800270a:	2301      	movs	r3, #1
 800270c:	4a36      	ldr	r2, [pc, #216]	; (80027e8 <_printf_float+0x2f8>)
 800270e:	4659      	mov	r1, fp
 8002710:	4628      	mov	r0, r5
 8002712:	47b0      	blx	r6
 8002714:	3001      	adds	r0, #1
 8002716:	f43f af47 	beq.w	80025a8 <_printf_float+0xb8>
 800271a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800271c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800271e:	429a      	cmp	r2, r3
 8002720:	db02      	blt.n	8002728 <_printf_float+0x238>
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	07d8      	lsls	r0, r3, #31
 8002726:	d50e      	bpl.n	8002746 <_printf_float+0x256>
 8002728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800272a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800272c:	4659      	mov	r1, fp
 800272e:	4628      	mov	r0, r5
 8002730:	47b0      	blx	r6
 8002732:	3001      	adds	r0, #1
 8002734:	f43f af38 	beq.w	80025a8 <_printf_float+0xb8>
 8002738:	2700      	movs	r7, #0
 800273a:	f104 081a 	add.w	r8, r4, #26
 800273e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002740:	3b01      	subs	r3, #1
 8002742:	429f      	cmp	r7, r3
 8002744:	db11      	blt.n	800276a <_printf_float+0x27a>
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	079f      	lsls	r7, r3, #30
 800274a:	d508      	bpl.n	800275e <_printf_float+0x26e>
 800274c:	2700      	movs	r7, #0
 800274e:	f104 0819 	add.w	r8, r4, #25
 8002752:	68e3      	ldr	r3, [r4, #12]
 8002754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	429f      	cmp	r7, r3
 800275a:	f2c0 80e7 	blt.w	800292c <_printf_float+0x43c>
 800275e:	68e0      	ldr	r0, [r4, #12]
 8002760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002762:	4298      	cmp	r0, r3
 8002764:	bfb8      	it	lt
 8002766:	4618      	movlt	r0, r3
 8002768:	e720      	b.n	80025ac <_printf_float+0xbc>
 800276a:	2301      	movs	r3, #1
 800276c:	4642      	mov	r2, r8
 800276e:	4659      	mov	r1, fp
 8002770:	4628      	mov	r0, r5
 8002772:	47b0      	blx	r6
 8002774:	3001      	adds	r0, #1
 8002776:	f43f af17 	beq.w	80025a8 <_printf_float+0xb8>
 800277a:	3701      	adds	r7, #1
 800277c:	e7df      	b.n	800273e <_printf_float+0x24e>
 800277e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002780:	2b00      	cmp	r3, #0
 8002782:	dc33      	bgt.n	80027ec <_printf_float+0x2fc>
 8002784:	2301      	movs	r3, #1
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <_printf_float+0x2f8>)
 8002788:	4659      	mov	r1, fp
 800278a:	4628      	mov	r0, r5
 800278c:	47b0      	blx	r6
 800278e:	3001      	adds	r0, #1
 8002790:	f43f af0a 	beq.w	80025a8 <_printf_float+0xb8>
 8002794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002796:	b923      	cbnz	r3, 80027a2 <_printf_float+0x2b2>
 8002798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800279a:	b913      	cbnz	r3, 80027a2 <_printf_float+0x2b2>
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	07d9      	lsls	r1, r3, #31
 80027a0:	d5d1      	bpl.n	8002746 <_printf_float+0x256>
 80027a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027a6:	4659      	mov	r1, fp
 80027a8:	4628      	mov	r0, r5
 80027aa:	47b0      	blx	r6
 80027ac:	3001      	adds	r0, #1
 80027ae:	f43f aefb 	beq.w	80025a8 <_printf_float+0xb8>
 80027b2:	f04f 0800 	mov.w	r8, #0
 80027b6:	f104 091a 	add.w	r9, r4, #26
 80027ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027bc:	425b      	negs	r3, r3
 80027be:	4598      	cmp	r8, r3
 80027c0:	db01      	blt.n	80027c6 <_printf_float+0x2d6>
 80027c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027c4:	e78e      	b.n	80026e4 <_printf_float+0x1f4>
 80027c6:	2301      	movs	r3, #1
 80027c8:	464a      	mov	r2, r9
 80027ca:	4659      	mov	r1, fp
 80027cc:	4628      	mov	r0, r5
 80027ce:	47b0      	blx	r6
 80027d0:	3001      	adds	r0, #1
 80027d2:	f43f aee9 	beq.w	80025a8 <_printf_float+0xb8>
 80027d6:	f108 0801 	add.w	r8, r8, #1
 80027da:	e7ee      	b.n	80027ba <_printf_float+0x2ca>
 80027dc:	7fefffff 	.word	0x7fefffff
 80027e0:	080045d6 	.word	0x080045d6
 80027e4:	080045da 	.word	0x080045da
 80027e8:	080045e6 	.word	0x080045e6
 80027ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027f0:	429a      	cmp	r2, r3
 80027f2:	bfa8      	it	ge
 80027f4:	461a      	movge	r2, r3
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	4690      	mov	r8, r2
 80027fa:	dc36      	bgt.n	800286a <_printf_float+0x37a>
 80027fc:	f04f 0a00 	mov.w	sl, #0
 8002800:	f104 031a 	add.w	r3, r4, #26
 8002804:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002808:	930b      	str	r3, [sp, #44]	; 0x2c
 800280a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800280e:	eba9 0308 	sub.w	r3, r9, r8
 8002812:	459a      	cmp	sl, r3
 8002814:	db31      	blt.n	800287a <_printf_float+0x38a>
 8002816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002818:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800281a:	429a      	cmp	r2, r3
 800281c:	db38      	blt.n	8002890 <_printf_float+0x3a0>
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	07da      	lsls	r2, r3, #31
 8002822:	d435      	bmi.n	8002890 <_printf_float+0x3a0>
 8002824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002826:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002828:	eba3 0209 	sub.w	r2, r3, r9
 800282c:	eba3 0801 	sub.w	r8, r3, r1
 8002830:	4590      	cmp	r8, r2
 8002832:	bfa8      	it	ge
 8002834:	4690      	movge	r8, r2
 8002836:	f1b8 0f00 	cmp.w	r8, #0
 800283a:	dc31      	bgt.n	80028a0 <_printf_float+0x3b0>
 800283c:	2700      	movs	r7, #0
 800283e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002842:	f104 091a 	add.w	r9, r4, #26
 8002846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	eba3 0308 	sub.w	r3, r3, r8
 8002850:	429f      	cmp	r7, r3
 8002852:	f6bf af78 	bge.w	8002746 <_printf_float+0x256>
 8002856:	2301      	movs	r3, #1
 8002858:	464a      	mov	r2, r9
 800285a:	4659      	mov	r1, fp
 800285c:	4628      	mov	r0, r5
 800285e:	47b0      	blx	r6
 8002860:	3001      	adds	r0, #1
 8002862:	f43f aea1 	beq.w	80025a8 <_printf_float+0xb8>
 8002866:	3701      	adds	r7, #1
 8002868:	e7ed      	b.n	8002846 <_printf_float+0x356>
 800286a:	4613      	mov	r3, r2
 800286c:	4659      	mov	r1, fp
 800286e:	463a      	mov	r2, r7
 8002870:	4628      	mov	r0, r5
 8002872:	47b0      	blx	r6
 8002874:	3001      	adds	r0, #1
 8002876:	d1c1      	bne.n	80027fc <_printf_float+0x30c>
 8002878:	e696      	b.n	80025a8 <_printf_float+0xb8>
 800287a:	2301      	movs	r3, #1
 800287c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800287e:	4659      	mov	r1, fp
 8002880:	4628      	mov	r0, r5
 8002882:	47b0      	blx	r6
 8002884:	3001      	adds	r0, #1
 8002886:	f43f ae8f 	beq.w	80025a8 <_printf_float+0xb8>
 800288a:	f10a 0a01 	add.w	sl, sl, #1
 800288e:	e7bc      	b.n	800280a <_printf_float+0x31a>
 8002890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002894:	4659      	mov	r1, fp
 8002896:	4628      	mov	r0, r5
 8002898:	47b0      	blx	r6
 800289a:	3001      	adds	r0, #1
 800289c:	d1c2      	bne.n	8002824 <_printf_float+0x334>
 800289e:	e683      	b.n	80025a8 <_printf_float+0xb8>
 80028a0:	4643      	mov	r3, r8
 80028a2:	eb07 0209 	add.w	r2, r7, r9
 80028a6:	4659      	mov	r1, fp
 80028a8:	4628      	mov	r0, r5
 80028aa:	47b0      	blx	r6
 80028ac:	3001      	adds	r0, #1
 80028ae:	d1c5      	bne.n	800283c <_printf_float+0x34c>
 80028b0:	e67a      	b.n	80025a8 <_printf_float+0xb8>
 80028b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028b4:	2a01      	cmp	r2, #1
 80028b6:	dc01      	bgt.n	80028bc <_printf_float+0x3cc>
 80028b8:	07db      	lsls	r3, r3, #31
 80028ba:	d534      	bpl.n	8002926 <_printf_float+0x436>
 80028bc:	2301      	movs	r3, #1
 80028be:	463a      	mov	r2, r7
 80028c0:	4659      	mov	r1, fp
 80028c2:	4628      	mov	r0, r5
 80028c4:	47b0      	blx	r6
 80028c6:	3001      	adds	r0, #1
 80028c8:	f43f ae6e 	beq.w	80025a8 <_printf_float+0xb8>
 80028cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028d0:	4659      	mov	r1, fp
 80028d2:	4628      	mov	r0, r5
 80028d4:	47b0      	blx	r6
 80028d6:	3001      	adds	r0, #1
 80028d8:	f43f ae66 	beq.w	80025a8 <_printf_float+0xb8>
 80028dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028e0:	2200      	movs	r2, #0
 80028e2:	2300      	movs	r3, #0
 80028e4:	f7fe f874 	bl	80009d0 <__aeabi_dcmpeq>
 80028e8:	b150      	cbz	r0, 8002900 <_printf_float+0x410>
 80028ea:	2700      	movs	r7, #0
 80028ec:	f104 081a 	add.w	r8, r4, #26
 80028f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028f2:	3b01      	subs	r3, #1
 80028f4:	429f      	cmp	r7, r3
 80028f6:	db0c      	blt.n	8002912 <_printf_float+0x422>
 80028f8:	464b      	mov	r3, r9
 80028fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028fe:	e6f2      	b.n	80026e6 <_printf_float+0x1f6>
 8002900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002902:	1c7a      	adds	r2, r7, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	4659      	mov	r1, fp
 8002908:	4628      	mov	r0, r5
 800290a:	47b0      	blx	r6
 800290c:	3001      	adds	r0, #1
 800290e:	d1f3      	bne.n	80028f8 <_printf_float+0x408>
 8002910:	e64a      	b.n	80025a8 <_printf_float+0xb8>
 8002912:	2301      	movs	r3, #1
 8002914:	4642      	mov	r2, r8
 8002916:	4659      	mov	r1, fp
 8002918:	4628      	mov	r0, r5
 800291a:	47b0      	blx	r6
 800291c:	3001      	adds	r0, #1
 800291e:	f43f ae43 	beq.w	80025a8 <_printf_float+0xb8>
 8002922:	3701      	adds	r7, #1
 8002924:	e7e4      	b.n	80028f0 <_printf_float+0x400>
 8002926:	2301      	movs	r3, #1
 8002928:	463a      	mov	r2, r7
 800292a:	e7ec      	b.n	8002906 <_printf_float+0x416>
 800292c:	2301      	movs	r3, #1
 800292e:	4642      	mov	r2, r8
 8002930:	4659      	mov	r1, fp
 8002932:	4628      	mov	r0, r5
 8002934:	47b0      	blx	r6
 8002936:	3001      	adds	r0, #1
 8002938:	f43f ae36 	beq.w	80025a8 <_printf_float+0xb8>
 800293c:	3701      	adds	r7, #1
 800293e:	e708      	b.n	8002752 <_printf_float+0x262>
 8002940:	463a      	mov	r2, r7
 8002942:	464b      	mov	r3, r9
 8002944:	4638      	mov	r0, r7
 8002946:	4649      	mov	r1, r9
 8002948:	f7fe f874 	bl	8000a34 <__aeabi_dcmpun>
 800294c:	2800      	cmp	r0, #0
 800294e:	f43f ae30 	beq.w	80025b2 <_printf_float+0xc2>
 8002952:	4b01      	ldr	r3, [pc, #4]	; (8002958 <_printf_float+0x468>)
 8002954:	4f01      	ldr	r7, [pc, #4]	; (800295c <_printf_float+0x46c>)
 8002956:	e612      	b.n	800257e <_printf_float+0x8e>
 8002958:	080045de 	.word	0x080045de
 800295c:	080045e2 	.word	0x080045e2

08002960 <_printf_common>:
 8002960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002964:	4691      	mov	r9, r2
 8002966:	461f      	mov	r7, r3
 8002968:	688a      	ldr	r2, [r1, #8]
 800296a:	690b      	ldr	r3, [r1, #16]
 800296c:	4606      	mov	r6, r0
 800296e:	4293      	cmp	r3, r2
 8002970:	bfb8      	it	lt
 8002972:	4613      	movlt	r3, r2
 8002974:	f8c9 3000 	str.w	r3, [r9]
 8002978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800297c:	460c      	mov	r4, r1
 800297e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002982:	b112      	cbz	r2, 800298a <_printf_common+0x2a>
 8002984:	3301      	adds	r3, #1
 8002986:	f8c9 3000 	str.w	r3, [r9]
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	0699      	lsls	r1, r3, #26
 800298e:	bf42      	ittt	mi
 8002990:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002994:	3302      	addmi	r3, #2
 8002996:	f8c9 3000 	strmi.w	r3, [r9]
 800299a:	6825      	ldr	r5, [r4, #0]
 800299c:	f015 0506 	ands.w	r5, r5, #6
 80029a0:	d107      	bne.n	80029b2 <_printf_common+0x52>
 80029a2:	f104 0a19 	add.w	sl, r4, #25
 80029a6:	68e3      	ldr	r3, [r4, #12]
 80029a8:	f8d9 2000 	ldr.w	r2, [r9]
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	429d      	cmp	r5, r3
 80029b0:	db2a      	blt.n	8002a08 <_printf_common+0xa8>
 80029b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	3300      	adds	r3, #0
 80029ba:	bf18      	it	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	0692      	lsls	r2, r2, #26
 80029c0:	d42f      	bmi.n	8002a22 <_printf_common+0xc2>
 80029c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029c6:	4639      	mov	r1, r7
 80029c8:	4630      	mov	r0, r6
 80029ca:	47c0      	blx	r8
 80029cc:	3001      	adds	r0, #1
 80029ce:	d022      	beq.n	8002a16 <_printf_common+0xb6>
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	68e5      	ldr	r5, [r4, #12]
 80029d4:	f003 0306 	and.w	r3, r3, #6
 80029d8:	2b04      	cmp	r3, #4
 80029da:	bf18      	it	ne
 80029dc:	2500      	movne	r5, #0
 80029de:	f8d9 2000 	ldr.w	r2, [r9]
 80029e2:	f04f 0900 	mov.w	r9, #0
 80029e6:	bf08      	it	eq
 80029e8:	1aad      	subeq	r5, r5, r2
 80029ea:	68a3      	ldr	r3, [r4, #8]
 80029ec:	6922      	ldr	r2, [r4, #16]
 80029ee:	bf08      	it	eq
 80029f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bfc4      	itt	gt
 80029f8:	1a9b      	subgt	r3, r3, r2
 80029fa:	18ed      	addgt	r5, r5, r3
 80029fc:	341a      	adds	r4, #26
 80029fe:	454d      	cmp	r5, r9
 8002a00:	d11b      	bne.n	8002a3a <_printf_common+0xda>
 8002a02:	2000      	movs	r0, #0
 8002a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a08:	2301      	movs	r3, #1
 8002a0a:	4652      	mov	r2, sl
 8002a0c:	4639      	mov	r1, r7
 8002a0e:	4630      	mov	r0, r6
 8002a10:	47c0      	blx	r8
 8002a12:	3001      	adds	r0, #1
 8002a14:	d103      	bne.n	8002a1e <_printf_common+0xbe>
 8002a16:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1e:	3501      	adds	r5, #1
 8002a20:	e7c1      	b.n	80029a6 <_printf_common+0x46>
 8002a22:	2030      	movs	r0, #48	; 0x30
 8002a24:	18e1      	adds	r1, r4, r3
 8002a26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a30:	4422      	add	r2, r4
 8002a32:	3302      	adds	r3, #2
 8002a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a38:	e7c3      	b.n	80029c2 <_printf_common+0x62>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	4639      	mov	r1, r7
 8002a40:	4630      	mov	r0, r6
 8002a42:	47c0      	blx	r8
 8002a44:	3001      	adds	r0, #1
 8002a46:	d0e6      	beq.n	8002a16 <_printf_common+0xb6>
 8002a48:	f109 0901 	add.w	r9, r9, #1
 8002a4c:	e7d7      	b.n	80029fe <_printf_common+0x9e>
	...

08002a50 <_printf_i>:
 8002a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a54:	4617      	mov	r7, r2
 8002a56:	7e0a      	ldrb	r2, [r1, #24]
 8002a58:	b085      	sub	sp, #20
 8002a5a:	2a6e      	cmp	r2, #110	; 0x6e
 8002a5c:	4698      	mov	r8, r3
 8002a5e:	4606      	mov	r6, r0
 8002a60:	460c      	mov	r4, r1
 8002a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a64:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002a68:	f000 80bc 	beq.w	8002be4 <_printf_i+0x194>
 8002a6c:	d81a      	bhi.n	8002aa4 <_printf_i+0x54>
 8002a6e:	2a63      	cmp	r2, #99	; 0x63
 8002a70:	d02e      	beq.n	8002ad0 <_printf_i+0x80>
 8002a72:	d80a      	bhi.n	8002a8a <_printf_i+0x3a>
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	f000 80c8 	beq.w	8002c0a <_printf_i+0x1ba>
 8002a7a:	2a58      	cmp	r2, #88	; 0x58
 8002a7c:	f000 808a 	beq.w	8002b94 <_printf_i+0x144>
 8002a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002a88:	e02a      	b.n	8002ae0 <_printf_i+0x90>
 8002a8a:	2a64      	cmp	r2, #100	; 0x64
 8002a8c:	d001      	beq.n	8002a92 <_printf_i+0x42>
 8002a8e:	2a69      	cmp	r2, #105	; 0x69
 8002a90:	d1f6      	bne.n	8002a80 <_printf_i+0x30>
 8002a92:	6821      	ldr	r1, [r4, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002a9a:	d023      	beq.n	8002ae4 <_printf_i+0x94>
 8002a9c:	1d11      	adds	r1, r2, #4
 8002a9e:	6019      	str	r1, [r3, #0]
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	e027      	b.n	8002af4 <_printf_i+0xa4>
 8002aa4:	2a73      	cmp	r2, #115	; 0x73
 8002aa6:	f000 80b4 	beq.w	8002c12 <_printf_i+0x1c2>
 8002aaa:	d808      	bhi.n	8002abe <_printf_i+0x6e>
 8002aac:	2a6f      	cmp	r2, #111	; 0x6f
 8002aae:	d02a      	beq.n	8002b06 <_printf_i+0xb6>
 8002ab0:	2a70      	cmp	r2, #112	; 0x70
 8002ab2:	d1e5      	bne.n	8002a80 <_printf_i+0x30>
 8002ab4:	680a      	ldr	r2, [r1, #0]
 8002ab6:	f042 0220 	orr.w	r2, r2, #32
 8002aba:	600a      	str	r2, [r1, #0]
 8002abc:	e003      	b.n	8002ac6 <_printf_i+0x76>
 8002abe:	2a75      	cmp	r2, #117	; 0x75
 8002ac0:	d021      	beq.n	8002b06 <_printf_i+0xb6>
 8002ac2:	2a78      	cmp	r2, #120	; 0x78
 8002ac4:	d1dc      	bne.n	8002a80 <_printf_i+0x30>
 8002ac6:	2278      	movs	r2, #120	; 0x78
 8002ac8:	496f      	ldr	r1, [pc, #444]	; (8002c88 <_printf_i+0x238>)
 8002aca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002ace:	e064      	b.n	8002b9a <_printf_i+0x14a>
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002ad6:	1d11      	adds	r1, r2, #4
 8002ad8:	6019      	str	r1, [r3, #0]
 8002ada:	6813      	ldr	r3, [r2, #0]
 8002adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0a3      	b.n	8002c2c <_printf_i+0x1dc>
 8002ae4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ae8:	f102 0104 	add.w	r1, r2, #4
 8002aec:	6019      	str	r1, [r3, #0]
 8002aee:	d0d7      	beq.n	8002aa0 <_printf_i+0x50>
 8002af0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da03      	bge.n	8002b00 <_printf_i+0xb0>
 8002af8:	222d      	movs	r2, #45	; 0x2d
 8002afa:	425b      	negs	r3, r3
 8002afc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b00:	4962      	ldr	r1, [pc, #392]	; (8002c8c <_printf_i+0x23c>)
 8002b02:	220a      	movs	r2, #10
 8002b04:	e017      	b.n	8002b36 <_printf_i+0xe6>
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002b0e:	d003      	beq.n	8002b18 <_printf_i+0xc8>
 8002b10:	1d08      	adds	r0, r1, #4
 8002b12:	6018      	str	r0, [r3, #0]
 8002b14:	680b      	ldr	r3, [r1, #0]
 8002b16:	e006      	b.n	8002b26 <_printf_i+0xd6>
 8002b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b1c:	f101 0004 	add.w	r0, r1, #4
 8002b20:	6018      	str	r0, [r3, #0]
 8002b22:	d0f7      	beq.n	8002b14 <_printf_i+0xc4>
 8002b24:	880b      	ldrh	r3, [r1, #0]
 8002b26:	2a6f      	cmp	r2, #111	; 0x6f
 8002b28:	bf14      	ite	ne
 8002b2a:	220a      	movne	r2, #10
 8002b2c:	2208      	moveq	r2, #8
 8002b2e:	4957      	ldr	r1, [pc, #348]	; (8002c8c <_printf_i+0x23c>)
 8002b30:	2000      	movs	r0, #0
 8002b32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002b36:	6865      	ldr	r5, [r4, #4]
 8002b38:	2d00      	cmp	r5, #0
 8002b3a:	60a5      	str	r5, [r4, #8]
 8002b3c:	f2c0 809c 	blt.w	8002c78 <_printf_i+0x228>
 8002b40:	6820      	ldr	r0, [r4, #0]
 8002b42:	f020 0004 	bic.w	r0, r0, #4
 8002b46:	6020      	str	r0, [r4, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13f      	bne.n	8002bcc <_printf_i+0x17c>
 8002b4c:	2d00      	cmp	r5, #0
 8002b4e:	f040 8095 	bne.w	8002c7c <_printf_i+0x22c>
 8002b52:	4675      	mov	r5, lr
 8002b54:	2a08      	cmp	r2, #8
 8002b56:	d10b      	bne.n	8002b70 <_printf_i+0x120>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	07da      	lsls	r2, r3, #31
 8002b5c:	d508      	bpl.n	8002b70 <_printf_i+0x120>
 8002b5e:	6923      	ldr	r3, [r4, #16]
 8002b60:	6862      	ldr	r2, [r4, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	bfde      	ittt	le
 8002b66:	2330      	movle	r3, #48	; 0x30
 8002b68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b70:	ebae 0305 	sub.w	r3, lr, r5
 8002b74:	6123      	str	r3, [r4, #16]
 8002b76:	f8cd 8000 	str.w	r8, [sp]
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	aa03      	add	r2, sp, #12
 8002b7e:	4621      	mov	r1, r4
 8002b80:	4630      	mov	r0, r6
 8002b82:	f7ff feed 	bl	8002960 <_printf_common>
 8002b86:	3001      	adds	r0, #1
 8002b88:	d155      	bne.n	8002c36 <_printf_i+0x1e6>
 8002b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8e:	b005      	add	sp, #20
 8002b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b94:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002b98:	493c      	ldr	r1, [pc, #240]	; (8002c8c <_printf_i+0x23c>)
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ba2:	f100 0504 	add.w	r5, r0, #4
 8002ba6:	601d      	str	r5, [r3, #0]
 8002ba8:	d001      	beq.n	8002bae <_printf_i+0x15e>
 8002baa:	6803      	ldr	r3, [r0, #0]
 8002bac:	e002      	b.n	8002bb4 <_printf_i+0x164>
 8002bae:	0655      	lsls	r5, r2, #25
 8002bb0:	d5fb      	bpl.n	8002baa <_printf_i+0x15a>
 8002bb2:	8803      	ldrh	r3, [r0, #0]
 8002bb4:	07d0      	lsls	r0, r2, #31
 8002bb6:	bf44      	itt	mi
 8002bb8:	f042 0220 	orrmi.w	r2, r2, #32
 8002bbc:	6022      	strmi	r2, [r4, #0]
 8002bbe:	b91b      	cbnz	r3, 8002bc8 <_printf_i+0x178>
 8002bc0:	6822      	ldr	r2, [r4, #0]
 8002bc2:	f022 0220 	bic.w	r2, r2, #32
 8002bc6:	6022      	str	r2, [r4, #0]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	e7b1      	b.n	8002b30 <_printf_i+0xe0>
 8002bcc:	4675      	mov	r5, lr
 8002bce:	fbb3 f0f2 	udiv	r0, r3, r2
 8002bd2:	fb02 3310 	mls	r3, r2, r0, r3
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d1f5      	bne.n	8002bce <_printf_i+0x17e>
 8002be2:	e7b7      	b.n	8002b54 <_printf_i+0x104>
 8002be4:	6808      	ldr	r0, [r1, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002bec:	6949      	ldr	r1, [r1, #20]
 8002bee:	d004      	beq.n	8002bfa <_printf_i+0x1aa>
 8002bf0:	1d10      	adds	r0, r2, #4
 8002bf2:	6018      	str	r0, [r3, #0]
 8002bf4:	6813      	ldr	r3, [r2, #0]
 8002bf6:	6019      	str	r1, [r3, #0]
 8002bf8:	e007      	b.n	8002c0a <_printf_i+0x1ba>
 8002bfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bfe:	f102 0004 	add.w	r0, r2, #4
 8002c02:	6018      	str	r0, [r3, #0]
 8002c04:	6813      	ldr	r3, [r2, #0]
 8002c06:	d0f6      	beq.n	8002bf6 <_printf_i+0x1a6>
 8002c08:	8019      	strh	r1, [r3, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	4675      	mov	r5, lr
 8002c0e:	6123      	str	r3, [r4, #16]
 8002c10:	e7b1      	b.n	8002b76 <_printf_i+0x126>
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	1d11      	adds	r1, r2, #4
 8002c16:	6019      	str	r1, [r3, #0]
 8002c18:	6815      	ldr	r5, [r2, #0]
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	6862      	ldr	r2, [r4, #4]
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f000 fed0 	bl	80039c4 <memchr>
 8002c24:	b108      	cbz	r0, 8002c2a <_printf_i+0x1da>
 8002c26:	1b40      	subs	r0, r0, r5
 8002c28:	6060      	str	r0, [r4, #4]
 8002c2a:	6863      	ldr	r3, [r4, #4]
 8002c2c:	6123      	str	r3, [r4, #16]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c34:	e79f      	b.n	8002b76 <_printf_i+0x126>
 8002c36:	6923      	ldr	r3, [r4, #16]
 8002c38:	462a      	mov	r2, r5
 8002c3a:	4639      	mov	r1, r7
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	47c0      	blx	r8
 8002c40:	3001      	adds	r0, #1
 8002c42:	d0a2      	beq.n	8002b8a <_printf_i+0x13a>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	079b      	lsls	r3, r3, #30
 8002c48:	d507      	bpl.n	8002c5a <_printf_i+0x20a>
 8002c4a:	2500      	movs	r5, #0
 8002c4c:	f104 0919 	add.w	r9, r4, #25
 8002c50:	68e3      	ldr	r3, [r4, #12]
 8002c52:	9a03      	ldr	r2, [sp, #12]
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	429d      	cmp	r5, r3
 8002c58:	db05      	blt.n	8002c66 <_printf_i+0x216>
 8002c5a:	68e0      	ldr	r0, [r4, #12]
 8002c5c:	9b03      	ldr	r3, [sp, #12]
 8002c5e:	4298      	cmp	r0, r3
 8002c60:	bfb8      	it	lt
 8002c62:	4618      	movlt	r0, r3
 8002c64:	e793      	b.n	8002b8e <_printf_i+0x13e>
 8002c66:	2301      	movs	r3, #1
 8002c68:	464a      	mov	r2, r9
 8002c6a:	4639      	mov	r1, r7
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	47c0      	blx	r8
 8002c70:	3001      	adds	r0, #1
 8002c72:	d08a      	beq.n	8002b8a <_printf_i+0x13a>
 8002c74:	3501      	adds	r5, #1
 8002c76:	e7eb      	b.n	8002c50 <_printf_i+0x200>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1a7      	bne.n	8002bcc <_printf_i+0x17c>
 8002c7c:	780b      	ldrb	r3, [r1, #0]
 8002c7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c86:	e765      	b.n	8002b54 <_printf_i+0x104>
 8002c88:	080045f9 	.word	0x080045f9
 8002c8c:	080045e8 	.word	0x080045e8

08002c90 <siprintf>:
 8002c90:	b40e      	push	{r1, r2, r3}
 8002c92:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c96:	b500      	push	{lr}
 8002c98:	b09c      	sub	sp, #112	; 0x70
 8002c9a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002c9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ca2:	9104      	str	r1, [sp, #16]
 8002ca4:	9107      	str	r1, [sp, #28]
 8002ca6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002caa:	ab1d      	add	r3, sp, #116	; 0x74
 8002cac:	9002      	str	r0, [sp, #8]
 8002cae:	9006      	str	r0, [sp, #24]
 8002cb0:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <siprintf+0x44>)
 8002cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cb6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002cba:	6800      	ldr	r0, [r0, #0]
 8002cbc:	a902      	add	r1, sp, #8
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	f001 fa7e 	bl	80041c0 <_svfiprintf_r>
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	9b02      	ldr	r3, [sp, #8]
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	b01c      	add	sp, #112	; 0x70
 8002ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cd0:	b003      	add	sp, #12
 8002cd2:	4770      	bx	lr
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <quorem>:
 8002cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cdc:	6903      	ldr	r3, [r0, #16]
 8002cde:	690c      	ldr	r4, [r1, #16]
 8002ce0:	4680      	mov	r8, r0
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	f300 8082 	bgt.w	8002dec <quorem+0x114>
 8002ce8:	3c01      	subs	r4, #1
 8002cea:	f101 0714 	add.w	r7, r1, #20
 8002cee:	f100 0614 	add.w	r6, r0, #20
 8002cf2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002cf6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002cfa:	3501      	adds	r5, #1
 8002cfc:	fbb0 f5f5 	udiv	r5, r0, r5
 8002d00:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002d04:	eb06 030e 	add.w	r3, r6, lr
 8002d08:	eb07 090e 	add.w	r9, r7, lr
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	b38d      	cbz	r5, 8002d74 <quorem+0x9c>
 8002d10:	f04f 0a00 	mov.w	sl, #0
 8002d14:	4638      	mov	r0, r7
 8002d16:	46b4      	mov	ip, r6
 8002d18:	46d3      	mov	fp, sl
 8002d1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8002d1e:	b293      	uxth	r3, r2
 8002d20:	fb05 a303 	mla	r3, r5, r3, sl
 8002d24:	0c12      	lsrs	r2, r2, #16
 8002d26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002d2a:	fb05 a202 	mla	r2, r5, r2, sl
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	ebab 0303 	sub.w	r3, fp, r3
 8002d34:	f8bc b000 	ldrh.w	fp, [ip]
 8002d38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002d3c:	445b      	add	r3, fp
 8002d3e:	fa1f fb82 	uxth.w	fp, r2
 8002d42:	f8dc 2000 	ldr.w	r2, [ip]
 8002d46:	4581      	cmp	r9, r0
 8002d48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002d4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d56:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002d5a:	f84c 3b04 	str.w	r3, [ip], #4
 8002d5e:	d2dc      	bcs.n	8002d1a <quorem+0x42>
 8002d60:	f856 300e 	ldr.w	r3, [r6, lr]
 8002d64:	b933      	cbnz	r3, 8002d74 <quorem+0x9c>
 8002d66:	9b01      	ldr	r3, [sp, #4]
 8002d68:	3b04      	subs	r3, #4
 8002d6a:	429e      	cmp	r6, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	d331      	bcc.n	8002dd4 <quorem+0xfc>
 8002d70:	f8c8 4010 	str.w	r4, [r8, #16]
 8002d74:	4640      	mov	r0, r8
 8002d76:	f001 f846 	bl	8003e06 <__mcmp>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	db26      	blt.n	8002dcc <quorem+0xf4>
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f04f 0e00 	mov.w	lr, #0
 8002d84:	3501      	adds	r5, #1
 8002d86:	f857 1b04 	ldr.w	r1, [r7], #4
 8002d8a:	f8d0 c000 	ldr.w	ip, [r0]
 8002d8e:	b28b      	uxth	r3, r1
 8002d90:	ebae 0303 	sub.w	r3, lr, r3
 8002d94:	fa1f f28c 	uxth.w	r2, ip
 8002d98:	4413      	add	r3, r2
 8002d9a:	0c0a      	lsrs	r2, r1, #16
 8002d9c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002daa:	45b9      	cmp	r9, r7
 8002dac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002db0:	f840 3b04 	str.w	r3, [r0], #4
 8002db4:	d2e7      	bcs.n	8002d86 <quorem+0xae>
 8002db6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002dba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002dbe:	b92a      	cbnz	r2, 8002dcc <quorem+0xf4>
 8002dc0:	3b04      	subs	r3, #4
 8002dc2:	429e      	cmp	r6, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	d30b      	bcc.n	8002de0 <quorem+0x108>
 8002dc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8002dcc:	4628      	mov	r0, r5
 8002dce:	b003      	add	sp, #12
 8002dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d1c9      	bne.n	8002d70 <quorem+0x98>
 8002ddc:	3c01      	subs	r4, #1
 8002dde:	e7c4      	b.n	8002d6a <quorem+0x92>
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	3b04      	subs	r3, #4
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d1ef      	bne.n	8002dc8 <quorem+0xf0>
 8002de8:	3c01      	subs	r4, #1
 8002dea:	e7ea      	b.n	8002dc2 <quorem+0xea>
 8002dec:	2000      	movs	r0, #0
 8002dee:	e7ee      	b.n	8002dce <quorem+0xf6>

08002df0 <_dtoa_r>:
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002df6:	b095      	sub	sp, #84	; 0x54
 8002df8:	4604      	mov	r4, r0
 8002dfa:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e00:	b93e      	cbnz	r6, 8002e12 <_dtoa_r+0x22>
 8002e02:	2010      	movs	r0, #16
 8002e04:	f000 fdd6 	bl	80039b4 <malloc>
 8002e08:	6260      	str	r0, [r4, #36]	; 0x24
 8002e0a:	6046      	str	r6, [r0, #4]
 8002e0c:	6086      	str	r6, [r0, #8]
 8002e0e:	6006      	str	r6, [r0, #0]
 8002e10:	60c6      	str	r6, [r0, #12]
 8002e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	b151      	cbz	r1, 8002e2e <_dtoa_r+0x3e>
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	604a      	str	r2, [r1, #4]
 8002e20:	608b      	str	r3, [r1, #8]
 8002e22:	4620      	mov	r0, r4
 8002e24:	f000 fe1b 	bl	8003a5e <_Bfree>
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bfb7      	itett	lt
 8002e34:	2301      	movlt	r3, #1
 8002e36:	2300      	movge	r3, #0
 8002e38:	602b      	strlt	r3, [r5, #0]
 8002e3a:	9b03      	ldrlt	r3, [sp, #12]
 8002e3c:	bfae      	itee	ge
 8002e3e:	602b      	strge	r3, [r5, #0]
 8002e40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002e44:	9303      	strlt	r3, [sp, #12]
 8002e46:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002e4a:	4bab      	ldr	r3, [pc, #684]	; (80030f8 <_dtoa_r+0x308>)
 8002e4c:	ea33 0309 	bics.w	r3, r3, r9
 8002e50:	d11b      	bne.n	8002e8a <_dtoa_r+0x9a>
 8002e52:	f242 730f 	movw	r3, #9999	; 0x270f
 8002e56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	b923      	cbnz	r3, 8002e68 <_dtoa_r+0x78>
 8002e5e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f000 8583 	beq.w	800396e <_dtoa_r+0xb7e>
 8002e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e6a:	b953      	cbnz	r3, 8002e82 <_dtoa_r+0x92>
 8002e6c:	4ba3      	ldr	r3, [pc, #652]	; (80030fc <_dtoa_r+0x30c>)
 8002e6e:	e021      	b.n	8002eb4 <_dtoa_r+0xc4>
 8002e70:	4ba3      	ldr	r3, [pc, #652]	; (8003100 <_dtoa_r+0x310>)
 8002e72:	9306      	str	r3, [sp, #24]
 8002e74:	3308      	adds	r3, #8
 8002e76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	9806      	ldr	r0, [sp, #24]
 8002e7c:	b015      	add	sp, #84	; 0x54
 8002e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e82:	4b9e      	ldr	r3, [pc, #632]	; (80030fc <_dtoa_r+0x30c>)
 8002e84:	9306      	str	r3, [sp, #24]
 8002e86:	3303      	adds	r3, #3
 8002e88:	e7f5      	b.n	8002e76 <_dtoa_r+0x86>
 8002e8a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2300      	movs	r3, #0
 8002e92:	4630      	mov	r0, r6
 8002e94:	4639      	mov	r1, r7
 8002e96:	f7fd fd9b 	bl	80009d0 <__aeabi_dcmpeq>
 8002e9a:	4680      	mov	r8, r0
 8002e9c:	b160      	cbz	r0, 8002eb8 <_dtoa_r+0xc8>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 855e 	beq.w	8003968 <_dtoa_r+0xb78>
 8002eac:	4b95      	ldr	r3, [pc, #596]	; (8003104 <_dtoa_r+0x314>)
 8002eae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	9306      	str	r3, [sp, #24]
 8002eb6:	e7e0      	b.n	8002e7a <_dtoa_r+0x8a>
 8002eb8:	ab12      	add	r3, sp, #72	; 0x48
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	ab13      	add	r3, sp, #76	; 0x4c
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f001 f817 	bl	8003ef8 <__d2b>
 8002eca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002ece:	4682      	mov	sl, r0
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	d07d      	beq.n	8002fd0 <_dtoa_r+0x1e0>
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002eda:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002ede:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002ee2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002ee6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002eea:	2200      	movs	r2, #0
 8002eec:	4b86      	ldr	r3, [pc, #536]	; (8003108 <_dtoa_r+0x318>)
 8002eee:	f7fd f953 	bl	8000198 <__aeabi_dsub>
 8002ef2:	a37b      	add	r3, pc, #492	; (adr r3, 80030e0 <_dtoa_r+0x2f0>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd fb02 	bl	8000500 <__aeabi_dmul>
 8002efc:	a37a      	add	r3, pc, #488	; (adr r3, 80030e8 <_dtoa_r+0x2f8>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd f94b 	bl	800019c <__adddf3>
 8002f06:	4606      	mov	r6, r0
 8002f08:	4628      	mov	r0, r5
 8002f0a:	460f      	mov	r7, r1
 8002f0c:	f7fd fa92 	bl	8000434 <__aeabi_i2d>
 8002f10:	a377      	add	r3, pc, #476	; (adr r3, 80030f0 <_dtoa_r+0x300>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd faf3 	bl	8000500 <__aeabi_dmul>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4630      	mov	r0, r6
 8002f20:	4639      	mov	r1, r7
 8002f22:	f7fd f93b 	bl	800019c <__adddf3>
 8002f26:	4606      	mov	r6, r0
 8002f28:	460f      	mov	r7, r1
 8002f2a:	f7fd fd99 	bl	8000a60 <__aeabi_d2iz>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4683      	mov	fp, r0
 8002f32:	2300      	movs	r3, #0
 8002f34:	4630      	mov	r0, r6
 8002f36:	4639      	mov	r1, r7
 8002f38:	f7fd fd54 	bl	80009e4 <__aeabi_dcmplt>
 8002f3c:	b158      	cbz	r0, 8002f56 <_dtoa_r+0x166>
 8002f3e:	4658      	mov	r0, fp
 8002f40:	f7fd fa78 	bl	8000434 <__aeabi_i2d>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4630      	mov	r0, r6
 8002f4a:	4639      	mov	r1, r7
 8002f4c:	f7fd fd40 	bl	80009d0 <__aeabi_dcmpeq>
 8002f50:	b908      	cbnz	r0, 8002f56 <_dtoa_r+0x166>
 8002f52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f56:	f1bb 0f16 	cmp.w	fp, #22
 8002f5a:	d858      	bhi.n	800300e <_dtoa_r+0x21e>
 8002f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f60:	496a      	ldr	r1, [pc, #424]	; (800310c <_dtoa_r+0x31c>)
 8002f62:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8002f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f6a:	f7fd fd59 	bl	8000a20 <__aeabi_dcmpgt>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d04f      	beq.n	8003012 <_dtoa_r+0x222>
 8002f72:	2300      	movs	r3, #0
 8002f74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f78:	930d      	str	r3, [sp, #52]	; 0x34
 8002f7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f7c:	1b5d      	subs	r5, r3, r5
 8002f7e:	1e6b      	subs	r3, r5, #1
 8002f80:	9307      	str	r3, [sp, #28]
 8002f82:	bf43      	ittte	mi
 8002f84:	2300      	movmi	r3, #0
 8002f86:	f1c5 0801 	rsbmi	r8, r5, #1
 8002f8a:	9307      	strmi	r3, [sp, #28]
 8002f8c:	f04f 0800 	movpl.w	r8, #0
 8002f90:	f1bb 0f00 	cmp.w	fp, #0
 8002f94:	db3f      	blt.n	8003016 <_dtoa_r+0x226>
 8002f96:	9b07      	ldr	r3, [sp, #28]
 8002f98:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002f9c:	445b      	add	r3, fp
 8002f9e:	9307      	str	r3, [sp, #28]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9308      	str	r3, [sp, #32]
 8002fa4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002fa6:	2b09      	cmp	r3, #9
 8002fa8:	f200 80b4 	bhi.w	8003114 <_dtoa_r+0x324>
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	bfc4      	itt	gt
 8002fb0:	3b04      	subgt	r3, #4
 8002fb2:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002fb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002fb6:	bfc8      	it	gt
 8002fb8:	2600      	movgt	r6, #0
 8002fba:	f1a3 0302 	sub.w	r3, r3, #2
 8002fbe:	bfd8      	it	le
 8002fc0:	2601      	movle	r6, #1
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	f200 80b2 	bhi.w	800312c <_dtoa_r+0x33c>
 8002fc8:	e8df f003 	tbb	[pc, r3]
 8002fcc:	782d8684 	.word	0x782d8684
 8002fd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002fd2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002fd4:	441d      	add	r5, r3
 8002fd6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	dd11      	ble.n	8003002 <_dtoa_r+0x212>
 8002fde:	9a02      	ldr	r2, [sp, #8]
 8002fe0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002fe4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002fe8:	fa22 f000 	lsr.w	r0, r2, r0
 8002fec:	fa09 f303 	lsl.w	r3, r9, r3
 8002ff0:	4318      	orrs	r0, r3
 8002ff2:	f7fd fa0f 	bl	8000414 <__aeabi_ui2d>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002ffc:	3d01      	subs	r5, #1
 8002ffe:	9310      	str	r3, [sp, #64]	; 0x40
 8003000:	e773      	b.n	8002eea <_dtoa_r+0xfa>
 8003002:	f1c3 0020 	rsb	r0, r3, #32
 8003006:	9b02      	ldr	r3, [sp, #8]
 8003008:	fa03 f000 	lsl.w	r0, r3, r0
 800300c:	e7f1      	b.n	8002ff2 <_dtoa_r+0x202>
 800300e:	2301      	movs	r3, #1
 8003010:	e7b2      	b.n	8002f78 <_dtoa_r+0x188>
 8003012:	900d      	str	r0, [sp, #52]	; 0x34
 8003014:	e7b1      	b.n	8002f7a <_dtoa_r+0x18a>
 8003016:	f1cb 0300 	rsb	r3, fp, #0
 800301a:	9308      	str	r3, [sp, #32]
 800301c:	2300      	movs	r3, #0
 800301e:	eba8 080b 	sub.w	r8, r8, fp
 8003022:	930c      	str	r3, [sp, #48]	; 0x30
 8003024:	e7be      	b.n	8002fa4 <_dtoa_r+0x1b4>
 8003026:	2301      	movs	r3, #1
 8003028:	9309      	str	r3, [sp, #36]	; 0x24
 800302a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800302c:	2b00      	cmp	r3, #0
 800302e:	f340 8080 	ble.w	8003132 <_dtoa_r+0x342>
 8003032:	4699      	mov	r9, r3
 8003034:	9304      	str	r3, [sp, #16]
 8003036:	2200      	movs	r2, #0
 8003038:	2104      	movs	r1, #4
 800303a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800303c:	606a      	str	r2, [r5, #4]
 800303e:	f101 0214 	add.w	r2, r1, #20
 8003042:	429a      	cmp	r2, r3
 8003044:	d97a      	bls.n	800313c <_dtoa_r+0x34c>
 8003046:	6869      	ldr	r1, [r5, #4]
 8003048:	4620      	mov	r0, r4
 800304a:	f000 fcd4 	bl	80039f6 <_Balloc>
 800304e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003050:	6028      	str	r0, [r5, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b9 0f0e 	cmp.w	r9, #14
 8003058:	9306      	str	r3, [sp, #24]
 800305a:	f200 80f0 	bhi.w	800323e <_dtoa_r+0x44e>
 800305e:	2e00      	cmp	r6, #0
 8003060:	f000 80ed 	beq.w	800323e <_dtoa_r+0x44e>
 8003064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003068:	f1bb 0f00 	cmp.w	fp, #0
 800306c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003070:	dd79      	ble.n	8003166 <_dtoa_r+0x376>
 8003072:	4a26      	ldr	r2, [pc, #152]	; (800310c <_dtoa_r+0x31c>)
 8003074:	f00b 030f 	and.w	r3, fp, #15
 8003078:	ea4f 162b 	mov.w	r6, fp, asr #4
 800307c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003080:	06f0      	lsls	r0, r6, #27
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800308a:	d55c      	bpl.n	8003146 <_dtoa_r+0x356>
 800308c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <_dtoa_r+0x320>)
 8003092:	2503      	movs	r5, #3
 8003094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003098:	f7fd fb5c 	bl	8000754 <__aeabi_ddiv>
 800309c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030a0:	f006 060f 	and.w	r6, r6, #15
 80030a4:	4f1a      	ldr	r7, [pc, #104]	; (8003110 <_dtoa_r+0x320>)
 80030a6:	2e00      	cmp	r6, #0
 80030a8:	d14f      	bne.n	800314a <_dtoa_r+0x35a>
 80030aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80030ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b2:	f7fd fb4f 	bl	8000754 <__aeabi_ddiv>
 80030b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030ba:	e06e      	b.n	800319a <_dtoa_r+0x3aa>
 80030bc:	2301      	movs	r3, #1
 80030be:	9309      	str	r3, [sp, #36]	; 0x24
 80030c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80030c2:	445b      	add	r3, fp
 80030c4:	f103 0901 	add.w	r9, r3, #1
 80030c8:	9304      	str	r3, [sp, #16]
 80030ca:	464b      	mov	r3, r9
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	bfb8      	it	lt
 80030d0:	2301      	movlt	r3, #1
 80030d2:	e7b0      	b.n	8003036 <_dtoa_r+0x246>
 80030d4:	2300      	movs	r3, #0
 80030d6:	e7a7      	b.n	8003028 <_dtoa_r+0x238>
 80030d8:	2300      	movs	r3, #0
 80030da:	e7f0      	b.n	80030be <_dtoa_r+0x2ce>
 80030dc:	f3af 8000 	nop.w
 80030e0:	636f4361 	.word	0x636f4361
 80030e4:	3fd287a7 	.word	0x3fd287a7
 80030e8:	8b60c8b3 	.word	0x8b60c8b3
 80030ec:	3fc68a28 	.word	0x3fc68a28
 80030f0:	509f79fb 	.word	0x509f79fb
 80030f4:	3fd34413 	.word	0x3fd34413
 80030f8:	7ff00000 	.word	0x7ff00000
 80030fc:	08004613 	.word	0x08004613
 8003100:	0800460a 	.word	0x0800460a
 8003104:	080045e7 	.word	0x080045e7
 8003108:	3ff80000 	.word	0x3ff80000
 800310c:	08004640 	.word	0x08004640
 8003110:	08004618 	.word	0x08004618
 8003114:	2601      	movs	r6, #1
 8003116:	2300      	movs	r3, #0
 8003118:	9609      	str	r6, [sp, #36]	; 0x24
 800311a:	931e      	str	r3, [sp, #120]	; 0x78
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	2200      	movs	r2, #0
 8003122:	9304      	str	r3, [sp, #16]
 8003124:	4699      	mov	r9, r3
 8003126:	2312      	movs	r3, #18
 8003128:	921f      	str	r2, [sp, #124]	; 0x7c
 800312a:	e784      	b.n	8003036 <_dtoa_r+0x246>
 800312c:	2301      	movs	r3, #1
 800312e:	9309      	str	r3, [sp, #36]	; 0x24
 8003130:	e7f4      	b.n	800311c <_dtoa_r+0x32c>
 8003132:	2301      	movs	r3, #1
 8003134:	9304      	str	r3, [sp, #16]
 8003136:	4699      	mov	r9, r3
 8003138:	461a      	mov	r2, r3
 800313a:	e7f5      	b.n	8003128 <_dtoa_r+0x338>
 800313c:	686a      	ldr	r2, [r5, #4]
 800313e:	0049      	lsls	r1, r1, #1
 8003140:	3201      	adds	r2, #1
 8003142:	606a      	str	r2, [r5, #4]
 8003144:	e77b      	b.n	800303e <_dtoa_r+0x24e>
 8003146:	2502      	movs	r5, #2
 8003148:	e7ac      	b.n	80030a4 <_dtoa_r+0x2b4>
 800314a:	07f1      	lsls	r1, r6, #31
 800314c:	d508      	bpl.n	8003160 <_dtoa_r+0x370>
 800314e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003156:	f7fd f9d3 	bl	8000500 <__aeabi_dmul>
 800315a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800315e:	3501      	adds	r5, #1
 8003160:	1076      	asrs	r6, r6, #1
 8003162:	3708      	adds	r7, #8
 8003164:	e79f      	b.n	80030a6 <_dtoa_r+0x2b6>
 8003166:	f000 80a5 	beq.w	80032b4 <_dtoa_r+0x4c4>
 800316a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800316e:	f1cb 0600 	rsb	r6, fp, #0
 8003172:	4ba2      	ldr	r3, [pc, #648]	; (80033fc <_dtoa_r+0x60c>)
 8003174:	f006 020f 	and.w	r2, r6, #15
 8003178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fd f9be 	bl	8000500 <__aeabi_dmul>
 8003184:	2502      	movs	r5, #2
 8003186:	2300      	movs	r3, #0
 8003188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800318c:	4f9c      	ldr	r7, [pc, #624]	; (8003400 <_dtoa_r+0x610>)
 800318e:	1136      	asrs	r6, r6, #4
 8003190:	2e00      	cmp	r6, #0
 8003192:	f040 8084 	bne.w	800329e <_dtoa_r+0x4ae>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d18d      	bne.n	80030b6 <_dtoa_r+0x2c6>
 800319a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 808b 	beq.w	80032b8 <_dtoa_r+0x4c8>
 80031a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80031aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80031ae:	2200      	movs	r2, #0
 80031b0:	4b94      	ldr	r3, [pc, #592]	; (8003404 <_dtoa_r+0x614>)
 80031b2:	f7fd fc17 	bl	80009e4 <__aeabi_dcmplt>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d07e      	beq.n	80032b8 <_dtoa_r+0x4c8>
 80031ba:	f1b9 0f00 	cmp.w	r9, #0
 80031be:	d07b      	beq.n	80032b8 <_dtoa_r+0x4c8>
 80031c0:	9b04      	ldr	r3, [sp, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dd37      	ble.n	8003236 <_dtoa_r+0x446>
 80031c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80031ca:	2200      	movs	r2, #0
 80031cc:	4b8e      	ldr	r3, [pc, #568]	; (8003408 <_dtoa_r+0x618>)
 80031ce:	f7fd f997 	bl	8000500 <__aeabi_dmul>
 80031d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031d6:	9e04      	ldr	r6, [sp, #16]
 80031d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80031dc:	3501      	adds	r5, #1
 80031de:	4628      	mov	r0, r5
 80031e0:	f7fd f928 	bl	8000434 <__aeabi_i2d>
 80031e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031e8:	f7fd f98a 	bl	8000500 <__aeabi_dmul>
 80031ec:	4b87      	ldr	r3, [pc, #540]	; (800340c <_dtoa_r+0x61c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	f7fc ffd4 	bl	800019c <__adddf3>
 80031f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80031f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031fa:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80031fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8003200:	2e00      	cmp	r6, #0
 8003202:	d15c      	bne.n	80032be <_dtoa_r+0x4ce>
 8003204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	4b81      	ldr	r3, [pc, #516]	; (8003410 <_dtoa_r+0x620>)
 800320c:	f7fc ffc4 	bl	8000198 <__aeabi_dsub>
 8003210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003212:	462b      	mov	r3, r5
 8003214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003218:	f7fd fc02 	bl	8000a20 <__aeabi_dcmpgt>
 800321c:	2800      	cmp	r0, #0
 800321e:	f040 82f7 	bne.w	8003810 <_dtoa_r+0xa20>
 8003222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003228:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800322c:	f7fd fbda 	bl	80009e4 <__aeabi_dcmplt>
 8003230:	2800      	cmp	r0, #0
 8003232:	f040 82eb 	bne.w	800380c <_dtoa_r+0xa1c>
 8003236:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800323a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800323e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003240:	2b00      	cmp	r3, #0
 8003242:	f2c0 8150 	blt.w	80034e6 <_dtoa_r+0x6f6>
 8003246:	f1bb 0f0e 	cmp.w	fp, #14
 800324a:	f300 814c 	bgt.w	80034e6 <_dtoa_r+0x6f6>
 800324e:	4b6b      	ldr	r3, [pc, #428]	; (80033fc <_dtoa_r+0x60c>)
 8003250:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800325c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800325e:	2b00      	cmp	r3, #0
 8003260:	f280 80da 	bge.w	8003418 <_dtoa_r+0x628>
 8003264:	f1b9 0f00 	cmp.w	r9, #0
 8003268:	f300 80d6 	bgt.w	8003418 <_dtoa_r+0x628>
 800326c:	f040 82cd 	bne.w	800380a <_dtoa_r+0xa1a>
 8003270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003274:	2200      	movs	r2, #0
 8003276:	4b66      	ldr	r3, [pc, #408]	; (8003410 <_dtoa_r+0x620>)
 8003278:	f7fd f942 	bl	8000500 <__aeabi_dmul>
 800327c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003280:	f7fd fbc4 	bl	8000a0c <__aeabi_dcmpge>
 8003284:	464e      	mov	r6, r9
 8003286:	464f      	mov	r7, r9
 8003288:	2800      	cmp	r0, #0
 800328a:	f040 82a4 	bne.w	80037d6 <_dtoa_r+0x9e6>
 800328e:	9b06      	ldr	r3, [sp, #24]
 8003290:	9a06      	ldr	r2, [sp, #24]
 8003292:	1c5d      	adds	r5, r3, #1
 8003294:	2331      	movs	r3, #49	; 0x31
 8003296:	f10b 0b01 	add.w	fp, fp, #1
 800329a:	7013      	strb	r3, [r2, #0]
 800329c:	e29f      	b.n	80037de <_dtoa_r+0x9ee>
 800329e:	07f2      	lsls	r2, r6, #31
 80032a0:	d505      	bpl.n	80032ae <_dtoa_r+0x4be>
 80032a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032a6:	f7fd f92b 	bl	8000500 <__aeabi_dmul>
 80032aa:	2301      	movs	r3, #1
 80032ac:	3501      	adds	r5, #1
 80032ae:	1076      	asrs	r6, r6, #1
 80032b0:	3708      	adds	r7, #8
 80032b2:	e76d      	b.n	8003190 <_dtoa_r+0x3a0>
 80032b4:	2502      	movs	r5, #2
 80032b6:	e770      	b.n	800319a <_dtoa_r+0x3aa>
 80032b8:	465f      	mov	r7, fp
 80032ba:	464e      	mov	r6, r9
 80032bc:	e78f      	b.n	80031de <_dtoa_r+0x3ee>
 80032be:	9a06      	ldr	r2, [sp, #24]
 80032c0:	4b4e      	ldr	r3, [pc, #312]	; (80033fc <_dtoa_r+0x60c>)
 80032c2:	4432      	add	r2, r6
 80032c4:	9211      	str	r2, [sp, #68]	; 0x44
 80032c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032c8:	1e71      	subs	r1, r6, #1
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	d048      	beq.n	8003360 <_dtoa_r+0x570>
 80032ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	2000      	movs	r0, #0
 80032d8:	494e      	ldr	r1, [pc, #312]	; (8003414 <_dtoa_r+0x624>)
 80032da:	f7fd fa3b 	bl	8000754 <__aeabi_ddiv>
 80032de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80032e2:	f7fc ff59 	bl	8000198 <__aeabi_dsub>
 80032e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032ea:	9d06      	ldr	r5, [sp, #24]
 80032ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032f0:	f7fd fbb6 	bl	8000a60 <__aeabi_d2iz>
 80032f4:	4606      	mov	r6, r0
 80032f6:	f7fd f89d 	bl	8000434 <__aeabi_i2d>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003302:	f7fc ff49 	bl	8000198 <__aeabi_dsub>
 8003306:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800330a:	3630      	adds	r6, #48	; 0x30
 800330c:	f805 6b01 	strb.w	r6, [r5], #1
 8003310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003314:	f7fd fb66 	bl	80009e4 <__aeabi_dcmplt>
 8003318:	2800      	cmp	r0, #0
 800331a:	d164      	bne.n	80033e6 <_dtoa_r+0x5f6>
 800331c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003320:	2000      	movs	r0, #0
 8003322:	4938      	ldr	r1, [pc, #224]	; (8003404 <_dtoa_r+0x614>)
 8003324:	f7fc ff38 	bl	8000198 <__aeabi_dsub>
 8003328:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800332c:	f7fd fb5a 	bl	80009e4 <__aeabi_dcmplt>
 8003330:	2800      	cmp	r0, #0
 8003332:	f040 80b9 	bne.w	80034a8 <_dtoa_r+0x6b8>
 8003336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003338:	429d      	cmp	r5, r3
 800333a:	f43f af7c 	beq.w	8003236 <_dtoa_r+0x446>
 800333e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003342:	2200      	movs	r2, #0
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <_dtoa_r+0x618>)
 8003346:	f7fd f8db 	bl	8000500 <__aeabi_dmul>
 800334a:	2200      	movs	r2, #0
 800334c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <_dtoa_r+0x618>)
 8003356:	f7fd f8d3 	bl	8000500 <__aeabi_dmul>
 800335a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800335e:	e7c5      	b.n	80032ec <_dtoa_r+0x4fc>
 8003360:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003368:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800336c:	f7fd f8c8 	bl	8000500 <__aeabi_dmul>
 8003370:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003374:	9d06      	ldr	r5, [sp, #24]
 8003376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800337a:	f7fd fb71 	bl	8000a60 <__aeabi_d2iz>
 800337e:	4606      	mov	r6, r0
 8003380:	f7fd f858 	bl	8000434 <__aeabi_i2d>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800338c:	f7fc ff04 	bl	8000198 <__aeabi_dsub>
 8003390:	3630      	adds	r6, #48	; 0x30
 8003392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003394:	f805 6b01 	strb.w	r6, [r5], #1
 8003398:	42ab      	cmp	r3, r5
 800339a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	d124      	bne.n	80033ee <_dtoa_r+0x5fe>
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <_dtoa_r+0x624>)
 80033a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80033aa:	f7fc fef7 	bl	800019c <__adddf3>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033b6:	f7fd fb33 	bl	8000a20 <__aeabi_dcmpgt>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d174      	bne.n	80034a8 <_dtoa_r+0x6b8>
 80033be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80033c2:	2000      	movs	r0, #0
 80033c4:	4913      	ldr	r1, [pc, #76]	; (8003414 <_dtoa_r+0x624>)
 80033c6:	f7fc fee7 	bl	8000198 <__aeabi_dsub>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033d2:	f7fd fb07 	bl	80009e4 <__aeabi_dcmplt>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	f43f af2d 	beq.w	8003236 <_dtoa_r+0x446>
 80033dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80033e0:	1e6a      	subs	r2, r5, #1
 80033e2:	2b30      	cmp	r3, #48	; 0x30
 80033e4:	d001      	beq.n	80033ea <_dtoa_r+0x5fa>
 80033e6:	46bb      	mov	fp, r7
 80033e8:	e04d      	b.n	8003486 <_dtoa_r+0x696>
 80033ea:	4615      	mov	r5, r2
 80033ec:	e7f6      	b.n	80033dc <_dtoa_r+0x5ec>
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <_dtoa_r+0x618>)
 80033f0:	f7fd f886 	bl	8000500 <__aeabi_dmul>
 80033f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033f8:	e7bd      	b.n	8003376 <_dtoa_r+0x586>
 80033fa:	bf00      	nop
 80033fc:	08004640 	.word	0x08004640
 8003400:	08004618 	.word	0x08004618
 8003404:	3ff00000 	.word	0x3ff00000
 8003408:	40240000 	.word	0x40240000
 800340c:	401c0000 	.word	0x401c0000
 8003410:	40140000 	.word	0x40140000
 8003414:	3fe00000 	.word	0x3fe00000
 8003418:	9d06      	ldr	r5, [sp, #24]
 800341a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800341e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003422:	4630      	mov	r0, r6
 8003424:	4639      	mov	r1, r7
 8003426:	f7fd f995 	bl	8000754 <__aeabi_ddiv>
 800342a:	f7fd fb19 	bl	8000a60 <__aeabi_d2iz>
 800342e:	4680      	mov	r8, r0
 8003430:	f7fd f800 	bl	8000434 <__aeabi_i2d>
 8003434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003438:	f7fd f862 	bl	8000500 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4630      	mov	r0, r6
 8003442:	4639      	mov	r1, r7
 8003444:	f7fc fea8 	bl	8000198 <__aeabi_dsub>
 8003448:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800344c:	f805 6b01 	strb.w	r6, [r5], #1
 8003450:	9e06      	ldr	r6, [sp, #24]
 8003452:	4602      	mov	r2, r0
 8003454:	1bae      	subs	r6, r5, r6
 8003456:	45b1      	cmp	r9, r6
 8003458:	460b      	mov	r3, r1
 800345a:	d137      	bne.n	80034cc <_dtoa_r+0x6dc>
 800345c:	f7fc fe9e 	bl	800019c <__adddf3>
 8003460:	4606      	mov	r6, r0
 8003462:	460f      	mov	r7, r1
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800346c:	f7fd faba 	bl	80009e4 <__aeabi_dcmplt>
 8003470:	b9c8      	cbnz	r0, 80034a6 <_dtoa_r+0x6b6>
 8003472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003476:	4632      	mov	r2, r6
 8003478:	463b      	mov	r3, r7
 800347a:	f7fd faa9 	bl	80009d0 <__aeabi_dcmpeq>
 800347e:	b110      	cbz	r0, 8003486 <_dtoa_r+0x696>
 8003480:	f018 0f01 	tst.w	r8, #1
 8003484:	d10f      	bne.n	80034a6 <_dtoa_r+0x6b6>
 8003486:	4651      	mov	r1, sl
 8003488:	4620      	mov	r0, r4
 800348a:	f000 fae8 	bl	8003a5e <_Bfree>
 800348e:	2300      	movs	r3, #0
 8003490:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003492:	702b      	strb	r3, [r5, #0]
 8003494:	f10b 0301 	add.w	r3, fp, #1
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800349c:	2b00      	cmp	r3, #0
 800349e:	f43f acec 	beq.w	8002e7a <_dtoa_r+0x8a>
 80034a2:	601d      	str	r5, [r3, #0]
 80034a4:	e4e9      	b.n	8002e7a <_dtoa_r+0x8a>
 80034a6:	465f      	mov	r7, fp
 80034a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80034ac:	1e6b      	subs	r3, r5, #1
 80034ae:	2a39      	cmp	r2, #57	; 0x39
 80034b0:	d106      	bne.n	80034c0 <_dtoa_r+0x6d0>
 80034b2:	9a06      	ldr	r2, [sp, #24]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <_dtoa_r+0x6d8>
 80034b8:	2330      	movs	r3, #48	; 0x30
 80034ba:	7013      	strb	r3, [r2, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	3701      	adds	r7, #1
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	3201      	adds	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e78e      	b.n	80033e6 <_dtoa_r+0x5f6>
 80034c8:	461d      	mov	r5, r3
 80034ca:	e7ed      	b.n	80034a8 <_dtoa_r+0x6b8>
 80034cc:	2200      	movs	r2, #0
 80034ce:	4bb5      	ldr	r3, [pc, #724]	; (80037a4 <_dtoa_r+0x9b4>)
 80034d0:	f7fd f816 	bl	8000500 <__aeabi_dmul>
 80034d4:	2200      	movs	r2, #0
 80034d6:	2300      	movs	r3, #0
 80034d8:	4606      	mov	r6, r0
 80034da:	460f      	mov	r7, r1
 80034dc:	f7fd fa78 	bl	80009d0 <__aeabi_dcmpeq>
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d09c      	beq.n	800341e <_dtoa_r+0x62e>
 80034e4:	e7cf      	b.n	8003486 <_dtoa_r+0x696>
 80034e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	f000 8129 	beq.w	8003740 <_dtoa_r+0x950>
 80034ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80034f0:	2a01      	cmp	r2, #1
 80034f2:	f300 810e 	bgt.w	8003712 <_dtoa_r+0x922>
 80034f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034f8:	2a00      	cmp	r2, #0
 80034fa:	f000 8106 	beq.w	800370a <_dtoa_r+0x91a>
 80034fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003502:	4645      	mov	r5, r8
 8003504:	9e08      	ldr	r6, [sp, #32]
 8003506:	9a07      	ldr	r2, [sp, #28]
 8003508:	2101      	movs	r1, #1
 800350a:	441a      	add	r2, r3
 800350c:	4620      	mov	r0, r4
 800350e:	4498      	add	r8, r3
 8003510:	9207      	str	r2, [sp, #28]
 8003512:	f000 fb44 	bl	8003b9e <__i2b>
 8003516:	4607      	mov	r7, r0
 8003518:	2d00      	cmp	r5, #0
 800351a:	dd0b      	ble.n	8003534 <_dtoa_r+0x744>
 800351c:	9b07      	ldr	r3, [sp, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	dd08      	ble.n	8003534 <_dtoa_r+0x744>
 8003522:	42ab      	cmp	r3, r5
 8003524:	bfa8      	it	ge
 8003526:	462b      	movge	r3, r5
 8003528:	9a07      	ldr	r2, [sp, #28]
 800352a:	eba8 0803 	sub.w	r8, r8, r3
 800352e:	1aed      	subs	r5, r5, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	9307      	str	r3, [sp, #28]
 8003534:	9b08      	ldr	r3, [sp, #32]
 8003536:	b1fb      	cbz	r3, 8003578 <_dtoa_r+0x788>
 8003538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8104 	beq.w	8003748 <_dtoa_r+0x958>
 8003540:	2e00      	cmp	r6, #0
 8003542:	dd11      	ble.n	8003568 <_dtoa_r+0x778>
 8003544:	4639      	mov	r1, r7
 8003546:	4632      	mov	r2, r6
 8003548:	4620      	mov	r0, r4
 800354a:	f000 fbbd 	bl	8003cc8 <__pow5mult>
 800354e:	4652      	mov	r2, sl
 8003550:	4601      	mov	r1, r0
 8003552:	4607      	mov	r7, r0
 8003554:	4620      	mov	r0, r4
 8003556:	f000 fb2b 	bl	8003bb0 <__multiply>
 800355a:	4651      	mov	r1, sl
 800355c:	900a      	str	r0, [sp, #40]	; 0x28
 800355e:	4620      	mov	r0, r4
 8003560:	f000 fa7d 	bl	8003a5e <_Bfree>
 8003564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003566:	469a      	mov	sl, r3
 8003568:	9b08      	ldr	r3, [sp, #32]
 800356a:	1b9a      	subs	r2, r3, r6
 800356c:	d004      	beq.n	8003578 <_dtoa_r+0x788>
 800356e:	4651      	mov	r1, sl
 8003570:	4620      	mov	r0, r4
 8003572:	f000 fba9 	bl	8003cc8 <__pow5mult>
 8003576:	4682      	mov	sl, r0
 8003578:	2101      	movs	r1, #1
 800357a:	4620      	mov	r0, r4
 800357c:	f000 fb0f 	bl	8003b9e <__i2b>
 8003580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003582:	4606      	mov	r6, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	f340 80e1 	ble.w	800374c <_dtoa_r+0x95c>
 800358a:	461a      	mov	r2, r3
 800358c:	4601      	mov	r1, r0
 800358e:	4620      	mov	r0, r4
 8003590:	f000 fb9a 	bl	8003cc8 <__pow5mult>
 8003594:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003596:	4606      	mov	r6, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	f340 80da 	ble.w	8003752 <_dtoa_r+0x962>
 800359e:	2300      	movs	r3, #0
 80035a0:	9308      	str	r3, [sp, #32]
 80035a2:	6933      	ldr	r3, [r6, #16]
 80035a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80035a8:	6918      	ldr	r0, [r3, #16]
 80035aa:	f000 faaa 	bl	8003b02 <__hi0bits>
 80035ae:	f1c0 0020 	rsb	r0, r0, #32
 80035b2:	9b07      	ldr	r3, [sp, #28]
 80035b4:	4418      	add	r0, r3
 80035b6:	f010 001f 	ands.w	r0, r0, #31
 80035ba:	f000 80f0 	beq.w	800379e <_dtoa_r+0x9ae>
 80035be:	f1c0 0320 	rsb	r3, r0, #32
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	f340 80e2 	ble.w	800378c <_dtoa_r+0x99c>
 80035c8:	9b07      	ldr	r3, [sp, #28]
 80035ca:	f1c0 001c 	rsb	r0, r0, #28
 80035ce:	4480      	add	r8, r0
 80035d0:	4405      	add	r5, r0
 80035d2:	4403      	add	r3, r0
 80035d4:	9307      	str	r3, [sp, #28]
 80035d6:	f1b8 0f00 	cmp.w	r8, #0
 80035da:	dd05      	ble.n	80035e8 <_dtoa_r+0x7f8>
 80035dc:	4651      	mov	r1, sl
 80035de:	4642      	mov	r2, r8
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 fbbf 	bl	8003d64 <__lshift>
 80035e6:	4682      	mov	sl, r0
 80035e8:	9b07      	ldr	r3, [sp, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	dd05      	ble.n	80035fa <_dtoa_r+0x80a>
 80035ee:	4631      	mov	r1, r6
 80035f0:	461a      	mov	r2, r3
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 fbb6 	bl	8003d64 <__lshift>
 80035f8:	4606      	mov	r6, r0
 80035fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80d3 	beq.w	80037a8 <_dtoa_r+0x9b8>
 8003602:	4631      	mov	r1, r6
 8003604:	4650      	mov	r0, sl
 8003606:	f000 fbfe 	bl	8003e06 <__mcmp>
 800360a:	2800      	cmp	r0, #0
 800360c:	f280 80cc 	bge.w	80037a8 <_dtoa_r+0x9b8>
 8003610:	2300      	movs	r3, #0
 8003612:	4651      	mov	r1, sl
 8003614:	220a      	movs	r2, #10
 8003616:	4620      	mov	r0, r4
 8003618:	f000 fa38 	bl	8003a8c <__multadd>
 800361c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800361e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003622:	4682      	mov	sl, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 81a9 	beq.w	800397c <_dtoa_r+0xb8c>
 800362a:	2300      	movs	r3, #0
 800362c:	4639      	mov	r1, r7
 800362e:	220a      	movs	r2, #10
 8003630:	4620      	mov	r0, r4
 8003632:	f000 fa2b 	bl	8003a8c <__multadd>
 8003636:	9b04      	ldr	r3, [sp, #16]
 8003638:	4607      	mov	r7, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	dc03      	bgt.n	8003646 <_dtoa_r+0x856>
 800363e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003640:	2b02      	cmp	r3, #2
 8003642:	f300 80b9 	bgt.w	80037b8 <_dtoa_r+0x9c8>
 8003646:	2d00      	cmp	r5, #0
 8003648:	dd05      	ble.n	8003656 <_dtoa_r+0x866>
 800364a:	4639      	mov	r1, r7
 800364c:	462a      	mov	r2, r5
 800364e:	4620      	mov	r0, r4
 8003650:	f000 fb88 	bl	8003d64 <__lshift>
 8003654:	4607      	mov	r7, r0
 8003656:	9b08      	ldr	r3, [sp, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8110 	beq.w	800387e <_dtoa_r+0xa8e>
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4620      	mov	r0, r4
 8003662:	f000 f9c8 	bl	80039f6 <_Balloc>
 8003666:	4605      	mov	r5, r0
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	f107 010c 	add.w	r1, r7, #12
 800366e:	3202      	adds	r2, #2
 8003670:	0092      	lsls	r2, r2, #2
 8003672:	300c      	adds	r0, #12
 8003674:	f000 f9b4 	bl	80039e0 <memcpy>
 8003678:	2201      	movs	r2, #1
 800367a:	4629      	mov	r1, r5
 800367c:	4620      	mov	r0, r4
 800367e:	f000 fb71 	bl	8003d64 <__lshift>
 8003682:	9707      	str	r7, [sp, #28]
 8003684:	4607      	mov	r7, r0
 8003686:	9b02      	ldr	r3, [sp, #8]
 8003688:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	9308      	str	r3, [sp, #32]
 8003692:	4631      	mov	r1, r6
 8003694:	4650      	mov	r0, sl
 8003696:	f7ff fb1f 	bl	8002cd8 <quorem>
 800369a:	9907      	ldr	r1, [sp, #28]
 800369c:	4605      	mov	r5, r0
 800369e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80036a2:	4650      	mov	r0, sl
 80036a4:	f000 fbaf 	bl	8003e06 <__mcmp>
 80036a8:	463a      	mov	r2, r7
 80036aa:	9002      	str	r0, [sp, #8]
 80036ac:	4631      	mov	r1, r6
 80036ae:	4620      	mov	r0, r4
 80036b0:	f000 fbc3 	bl	8003e3a <__mdiff>
 80036b4:	68c3      	ldr	r3, [r0, #12]
 80036b6:	4602      	mov	r2, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 80e2 	bne.w	8003882 <_dtoa_r+0xa92>
 80036be:	4601      	mov	r1, r0
 80036c0:	9009      	str	r0, [sp, #36]	; 0x24
 80036c2:	4650      	mov	r0, sl
 80036c4:	f000 fb9f 	bl	8003e06 <__mcmp>
 80036c8:	4603      	mov	r3, r0
 80036ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036cc:	4611      	mov	r1, r2
 80036ce:	4620      	mov	r0, r4
 80036d0:	9309      	str	r3, [sp, #36]	; 0x24
 80036d2:	f000 f9c4 	bl	8003a5e <_Bfree>
 80036d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f040 80d4 	bne.w	8003886 <_dtoa_r+0xa96>
 80036de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80036e0:	2a00      	cmp	r2, #0
 80036e2:	f040 80d0 	bne.w	8003886 <_dtoa_r+0xa96>
 80036e6:	9a08      	ldr	r2, [sp, #32]
 80036e8:	2a00      	cmp	r2, #0
 80036ea:	f040 80cc 	bne.w	8003886 <_dtoa_r+0xa96>
 80036ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80036f2:	f000 80e8 	beq.w	80038c6 <_dtoa_r+0xad6>
 80036f6:	9b02      	ldr	r3, [sp, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	dd01      	ble.n	8003700 <_dtoa_r+0x910>
 80036fc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003700:	f108 0501 	add.w	r5, r8, #1
 8003704:	f888 9000 	strb.w	r9, [r8]
 8003708:	e06b      	b.n	80037e2 <_dtoa_r+0x9f2>
 800370a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800370c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003710:	e6f7      	b.n	8003502 <_dtoa_r+0x712>
 8003712:	9b08      	ldr	r3, [sp, #32]
 8003714:	f109 36ff 	add.w	r6, r9, #4294967295
 8003718:	42b3      	cmp	r3, r6
 800371a:	bfb7      	itett	lt
 800371c:	9b08      	ldrlt	r3, [sp, #32]
 800371e:	1b9e      	subge	r6, r3, r6
 8003720:	1af2      	sublt	r2, r6, r3
 8003722:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003724:	bfbf      	itttt	lt
 8003726:	9608      	strlt	r6, [sp, #32]
 8003728:	189b      	addlt	r3, r3, r2
 800372a:	930c      	strlt	r3, [sp, #48]	; 0x30
 800372c:	2600      	movlt	r6, #0
 800372e:	f1b9 0f00 	cmp.w	r9, #0
 8003732:	bfb9      	ittee	lt
 8003734:	eba8 0509 	sublt.w	r5, r8, r9
 8003738:	2300      	movlt	r3, #0
 800373a:	4645      	movge	r5, r8
 800373c:	464b      	movge	r3, r9
 800373e:	e6e2      	b.n	8003506 <_dtoa_r+0x716>
 8003740:	9e08      	ldr	r6, [sp, #32]
 8003742:	4645      	mov	r5, r8
 8003744:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003746:	e6e7      	b.n	8003518 <_dtoa_r+0x728>
 8003748:	9a08      	ldr	r2, [sp, #32]
 800374a:	e710      	b.n	800356e <_dtoa_r+0x77e>
 800374c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800374e:	2b01      	cmp	r3, #1
 8003750:	dc18      	bgt.n	8003784 <_dtoa_r+0x994>
 8003752:	9b02      	ldr	r3, [sp, #8]
 8003754:	b9b3      	cbnz	r3, 8003784 <_dtoa_r+0x994>
 8003756:	9b03      	ldr	r3, [sp, #12]
 8003758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800375c:	b9a3      	cbnz	r3, 8003788 <_dtoa_r+0x998>
 800375e:	9b03      	ldr	r3, [sp, #12]
 8003760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003764:	0d1b      	lsrs	r3, r3, #20
 8003766:	051b      	lsls	r3, r3, #20
 8003768:	b12b      	cbz	r3, 8003776 <_dtoa_r+0x986>
 800376a:	9b07      	ldr	r3, [sp, #28]
 800376c:	f108 0801 	add.w	r8, r8, #1
 8003770:	3301      	adds	r3, #1
 8003772:	9307      	str	r3, [sp, #28]
 8003774:	2301      	movs	r3, #1
 8003776:	9308      	str	r3, [sp, #32]
 8003778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800377a:	2b00      	cmp	r3, #0
 800377c:	f47f af11 	bne.w	80035a2 <_dtoa_r+0x7b2>
 8003780:	2001      	movs	r0, #1
 8003782:	e716      	b.n	80035b2 <_dtoa_r+0x7c2>
 8003784:	2300      	movs	r3, #0
 8003786:	e7f6      	b.n	8003776 <_dtoa_r+0x986>
 8003788:	9b02      	ldr	r3, [sp, #8]
 800378a:	e7f4      	b.n	8003776 <_dtoa_r+0x986>
 800378c:	f43f af23 	beq.w	80035d6 <_dtoa_r+0x7e6>
 8003790:	9a07      	ldr	r2, [sp, #28]
 8003792:	331c      	adds	r3, #28
 8003794:	441a      	add	r2, r3
 8003796:	4498      	add	r8, r3
 8003798:	441d      	add	r5, r3
 800379a:	4613      	mov	r3, r2
 800379c:	e71a      	b.n	80035d4 <_dtoa_r+0x7e4>
 800379e:	4603      	mov	r3, r0
 80037a0:	e7f6      	b.n	8003790 <_dtoa_r+0x9a0>
 80037a2:	bf00      	nop
 80037a4:	40240000 	.word	0x40240000
 80037a8:	f1b9 0f00 	cmp.w	r9, #0
 80037ac:	dc33      	bgt.n	8003816 <_dtoa_r+0xa26>
 80037ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	dd30      	ble.n	8003816 <_dtoa_r+0xa26>
 80037b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80037b8:	9b04      	ldr	r3, [sp, #16]
 80037ba:	b963      	cbnz	r3, 80037d6 <_dtoa_r+0x9e6>
 80037bc:	4631      	mov	r1, r6
 80037be:	2205      	movs	r2, #5
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 f963 	bl	8003a8c <__multadd>
 80037c6:	4601      	mov	r1, r0
 80037c8:	4606      	mov	r6, r0
 80037ca:	4650      	mov	r0, sl
 80037cc:	f000 fb1b 	bl	8003e06 <__mcmp>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	f73f ad5c 	bgt.w	800328e <_dtoa_r+0x49e>
 80037d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037d8:	9d06      	ldr	r5, [sp, #24]
 80037da:	ea6f 0b03 	mvn.w	fp, r3
 80037de:	2300      	movs	r3, #0
 80037e0:	9307      	str	r3, [sp, #28]
 80037e2:	4631      	mov	r1, r6
 80037e4:	4620      	mov	r0, r4
 80037e6:	f000 f93a 	bl	8003a5e <_Bfree>
 80037ea:	2f00      	cmp	r7, #0
 80037ec:	f43f ae4b 	beq.w	8003486 <_dtoa_r+0x696>
 80037f0:	9b07      	ldr	r3, [sp, #28]
 80037f2:	b12b      	cbz	r3, 8003800 <_dtoa_r+0xa10>
 80037f4:	42bb      	cmp	r3, r7
 80037f6:	d003      	beq.n	8003800 <_dtoa_r+0xa10>
 80037f8:	4619      	mov	r1, r3
 80037fa:	4620      	mov	r0, r4
 80037fc:	f000 f92f 	bl	8003a5e <_Bfree>
 8003800:	4639      	mov	r1, r7
 8003802:	4620      	mov	r0, r4
 8003804:	f000 f92b 	bl	8003a5e <_Bfree>
 8003808:	e63d      	b.n	8003486 <_dtoa_r+0x696>
 800380a:	2600      	movs	r6, #0
 800380c:	4637      	mov	r7, r6
 800380e:	e7e2      	b.n	80037d6 <_dtoa_r+0x9e6>
 8003810:	46bb      	mov	fp, r7
 8003812:	4637      	mov	r7, r6
 8003814:	e53b      	b.n	800328e <_dtoa_r+0x49e>
 8003816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003818:	f8cd 9010 	str.w	r9, [sp, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f47f af12 	bne.w	8003646 <_dtoa_r+0x856>
 8003822:	9d06      	ldr	r5, [sp, #24]
 8003824:	4631      	mov	r1, r6
 8003826:	4650      	mov	r0, sl
 8003828:	f7ff fa56 	bl	8002cd8 <quorem>
 800382c:	9b06      	ldr	r3, [sp, #24]
 800382e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003832:	f805 9b01 	strb.w	r9, [r5], #1
 8003836:	9a04      	ldr	r2, [sp, #16]
 8003838:	1aeb      	subs	r3, r5, r3
 800383a:	429a      	cmp	r2, r3
 800383c:	f300 8081 	bgt.w	8003942 <_dtoa_r+0xb52>
 8003840:	9b06      	ldr	r3, [sp, #24]
 8003842:	2a01      	cmp	r2, #1
 8003844:	bfac      	ite	ge
 8003846:	189b      	addge	r3, r3, r2
 8003848:	3301      	addlt	r3, #1
 800384a:	4698      	mov	r8, r3
 800384c:	2300      	movs	r3, #0
 800384e:	9307      	str	r3, [sp, #28]
 8003850:	4651      	mov	r1, sl
 8003852:	2201      	movs	r2, #1
 8003854:	4620      	mov	r0, r4
 8003856:	f000 fa85 	bl	8003d64 <__lshift>
 800385a:	4631      	mov	r1, r6
 800385c:	4682      	mov	sl, r0
 800385e:	f000 fad2 	bl	8003e06 <__mcmp>
 8003862:	2800      	cmp	r0, #0
 8003864:	dc34      	bgt.n	80038d0 <_dtoa_r+0xae0>
 8003866:	d102      	bne.n	800386e <_dtoa_r+0xa7e>
 8003868:	f019 0f01 	tst.w	r9, #1
 800386c:	d130      	bne.n	80038d0 <_dtoa_r+0xae0>
 800386e:	4645      	mov	r5, r8
 8003870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003874:	1e6a      	subs	r2, r5, #1
 8003876:	2b30      	cmp	r3, #48	; 0x30
 8003878:	d1b3      	bne.n	80037e2 <_dtoa_r+0x9f2>
 800387a:	4615      	mov	r5, r2
 800387c:	e7f8      	b.n	8003870 <_dtoa_r+0xa80>
 800387e:	4638      	mov	r0, r7
 8003880:	e6ff      	b.n	8003682 <_dtoa_r+0x892>
 8003882:	2301      	movs	r3, #1
 8003884:	e722      	b.n	80036cc <_dtoa_r+0x8dc>
 8003886:	9a02      	ldr	r2, [sp, #8]
 8003888:	2a00      	cmp	r2, #0
 800388a:	db04      	blt.n	8003896 <_dtoa_r+0xaa6>
 800388c:	d128      	bne.n	80038e0 <_dtoa_r+0xaf0>
 800388e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003890:	bb32      	cbnz	r2, 80038e0 <_dtoa_r+0xaf0>
 8003892:	9a08      	ldr	r2, [sp, #32]
 8003894:	bb22      	cbnz	r2, 80038e0 <_dtoa_r+0xaf0>
 8003896:	2b00      	cmp	r3, #0
 8003898:	f77f af32 	ble.w	8003700 <_dtoa_r+0x910>
 800389c:	4651      	mov	r1, sl
 800389e:	2201      	movs	r2, #1
 80038a0:	4620      	mov	r0, r4
 80038a2:	f000 fa5f 	bl	8003d64 <__lshift>
 80038a6:	4631      	mov	r1, r6
 80038a8:	4682      	mov	sl, r0
 80038aa:	f000 faac 	bl	8003e06 <__mcmp>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	dc05      	bgt.n	80038be <_dtoa_r+0xace>
 80038b2:	f47f af25 	bne.w	8003700 <_dtoa_r+0x910>
 80038b6:	f019 0f01 	tst.w	r9, #1
 80038ba:	f43f af21 	beq.w	8003700 <_dtoa_r+0x910>
 80038be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80038c2:	f47f af1b 	bne.w	80036fc <_dtoa_r+0x90c>
 80038c6:	2339      	movs	r3, #57	; 0x39
 80038c8:	f108 0801 	add.w	r8, r8, #1
 80038cc:	f808 3c01 	strb.w	r3, [r8, #-1]
 80038d0:	4645      	mov	r5, r8
 80038d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80038d6:	1e6a      	subs	r2, r5, #1
 80038d8:	2b39      	cmp	r3, #57	; 0x39
 80038da:	d03a      	beq.n	8003952 <_dtoa_r+0xb62>
 80038dc:	3301      	adds	r3, #1
 80038de:	e03f      	b.n	8003960 <_dtoa_r+0xb70>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f108 0501 	add.w	r5, r8, #1
 80038e6:	dd05      	ble.n	80038f4 <_dtoa_r+0xb04>
 80038e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80038ec:	d0eb      	beq.n	80038c6 <_dtoa_r+0xad6>
 80038ee:	f109 0901 	add.w	r9, r9, #1
 80038f2:	e707      	b.n	8003704 <_dtoa_r+0x914>
 80038f4:	9b06      	ldr	r3, [sp, #24]
 80038f6:	9a04      	ldr	r2, [sp, #16]
 80038f8:	1aeb      	subs	r3, r5, r3
 80038fa:	4293      	cmp	r3, r2
 80038fc:	46a8      	mov	r8, r5
 80038fe:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003902:	d0a5      	beq.n	8003850 <_dtoa_r+0xa60>
 8003904:	4651      	mov	r1, sl
 8003906:	2300      	movs	r3, #0
 8003908:	220a      	movs	r2, #10
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f8be 	bl	8003a8c <__multadd>
 8003910:	9b07      	ldr	r3, [sp, #28]
 8003912:	4682      	mov	sl, r0
 8003914:	42bb      	cmp	r3, r7
 8003916:	f04f 020a 	mov.w	r2, #10
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	9907      	ldr	r1, [sp, #28]
 8003920:	4620      	mov	r0, r4
 8003922:	d104      	bne.n	800392e <_dtoa_r+0xb3e>
 8003924:	f000 f8b2 	bl	8003a8c <__multadd>
 8003928:	9007      	str	r0, [sp, #28]
 800392a:	4607      	mov	r7, r0
 800392c:	e6b1      	b.n	8003692 <_dtoa_r+0x8a2>
 800392e:	f000 f8ad 	bl	8003a8c <__multadd>
 8003932:	2300      	movs	r3, #0
 8003934:	9007      	str	r0, [sp, #28]
 8003936:	220a      	movs	r2, #10
 8003938:	4639      	mov	r1, r7
 800393a:	4620      	mov	r0, r4
 800393c:	f000 f8a6 	bl	8003a8c <__multadd>
 8003940:	e7f3      	b.n	800392a <_dtoa_r+0xb3a>
 8003942:	4651      	mov	r1, sl
 8003944:	2300      	movs	r3, #0
 8003946:	220a      	movs	r2, #10
 8003948:	4620      	mov	r0, r4
 800394a:	f000 f89f 	bl	8003a8c <__multadd>
 800394e:	4682      	mov	sl, r0
 8003950:	e768      	b.n	8003824 <_dtoa_r+0xa34>
 8003952:	9b06      	ldr	r3, [sp, #24]
 8003954:	4293      	cmp	r3, r2
 8003956:	d105      	bne.n	8003964 <_dtoa_r+0xb74>
 8003958:	2331      	movs	r3, #49	; 0x31
 800395a:	9a06      	ldr	r2, [sp, #24]
 800395c:	f10b 0b01 	add.w	fp, fp, #1
 8003960:	7013      	strb	r3, [r2, #0]
 8003962:	e73e      	b.n	80037e2 <_dtoa_r+0x9f2>
 8003964:	4615      	mov	r5, r2
 8003966:	e7b4      	b.n	80038d2 <_dtoa_r+0xae2>
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <_dtoa_r+0xba0>)
 800396a:	f7ff baa3 	b.w	8002eb4 <_dtoa_r+0xc4>
 800396e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f aa7d 	bne.w	8002e70 <_dtoa_r+0x80>
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <_dtoa_r+0xba4>)
 8003978:	f7ff ba9c 	b.w	8002eb4 <_dtoa_r+0xc4>
 800397c:	9b04      	ldr	r3, [sp, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f73f af4f 	bgt.w	8003822 <_dtoa_r+0xa32>
 8003984:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003986:	2b02      	cmp	r3, #2
 8003988:	f77f af4b 	ble.w	8003822 <_dtoa_r+0xa32>
 800398c:	e714      	b.n	80037b8 <_dtoa_r+0x9c8>
 800398e:	bf00      	nop
 8003990:	080045e6 	.word	0x080045e6
 8003994:	0800460a 	.word	0x0800460a

08003998 <_localeconv_r>:
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <_localeconv_r+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6a18      	ldr	r0, [r3, #32]
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <_localeconv_r+0x18>)
 80039a0:	2800      	cmp	r0, #0
 80039a2:	bf08      	it	eq
 80039a4:	4618      	moveq	r0, r3
 80039a6:	30f0      	adds	r0, #240	; 0xf0
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000004 	.word	0x20000004
 80039b0:	20000068 	.word	0x20000068

080039b4 <malloc>:
 80039b4:	4b02      	ldr	r3, [pc, #8]	; (80039c0 <malloc+0xc>)
 80039b6:	4601      	mov	r1, r0
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	f000 bb47 	b.w	800404c <_malloc_r>
 80039be:	bf00      	nop
 80039c0:	20000004 	.word	0x20000004

080039c4 <memchr>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	b2c9      	uxtb	r1, r1
 80039c8:	4402      	add	r2, r0
 80039ca:	4290      	cmp	r0, r2
 80039cc:	4603      	mov	r3, r0
 80039ce:	d101      	bne.n	80039d4 <memchr+0x10>
 80039d0:	2000      	movs	r0, #0
 80039d2:	bd10      	pop	{r4, pc}
 80039d4:	781c      	ldrb	r4, [r3, #0]
 80039d6:	3001      	adds	r0, #1
 80039d8:	428c      	cmp	r4, r1
 80039da:	d1f6      	bne.n	80039ca <memchr+0x6>
 80039dc:	4618      	mov	r0, r3
 80039de:	bd10      	pop	{r4, pc}

080039e0 <memcpy>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	1e43      	subs	r3, r0, #1
 80039e4:	440a      	add	r2, r1
 80039e6:	4291      	cmp	r1, r2
 80039e8:	d100      	bne.n	80039ec <memcpy+0xc>
 80039ea:	bd10      	pop	{r4, pc}
 80039ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039f4:	e7f7      	b.n	80039e6 <memcpy+0x6>

080039f6 <_Balloc>:
 80039f6:	b570      	push	{r4, r5, r6, lr}
 80039f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80039fa:	4604      	mov	r4, r0
 80039fc:	460e      	mov	r6, r1
 80039fe:	b93d      	cbnz	r5, 8003a10 <_Balloc+0x1a>
 8003a00:	2010      	movs	r0, #16
 8003a02:	f7ff ffd7 	bl	80039b4 <malloc>
 8003a06:	6260      	str	r0, [r4, #36]	; 0x24
 8003a08:	6045      	str	r5, [r0, #4]
 8003a0a:	6085      	str	r5, [r0, #8]
 8003a0c:	6005      	str	r5, [r0, #0]
 8003a0e:	60c5      	str	r5, [r0, #12]
 8003a10:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003a12:	68eb      	ldr	r3, [r5, #12]
 8003a14:	b183      	cbz	r3, 8003a38 <_Balloc+0x42>
 8003a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003a1e:	b9b8      	cbnz	r0, 8003a50 <_Balloc+0x5a>
 8003a20:	2101      	movs	r1, #1
 8003a22:	fa01 f506 	lsl.w	r5, r1, r6
 8003a26:	1d6a      	adds	r2, r5, #5
 8003a28:	0092      	lsls	r2, r2, #2
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 fab3 	bl	8003f96 <_calloc_r>
 8003a30:	b160      	cbz	r0, 8003a4c <_Balloc+0x56>
 8003a32:	6046      	str	r6, [r0, #4]
 8003a34:	6085      	str	r5, [r0, #8]
 8003a36:	e00e      	b.n	8003a56 <_Balloc+0x60>
 8003a38:	2221      	movs	r2, #33	; 0x21
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f000 faaa 	bl	8003f96 <_calloc_r>
 8003a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a44:	60e8      	str	r0, [r5, #12]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e4      	bne.n	8003a16 <_Balloc+0x20>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	6802      	ldr	r2, [r0, #0]
 8003a52:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003a56:	2300      	movs	r3, #0
 8003a58:	6103      	str	r3, [r0, #16]
 8003a5a:	60c3      	str	r3, [r0, #12]
 8003a5c:	bd70      	pop	{r4, r5, r6, pc}

08003a5e <_Bfree>:
 8003a5e:	b570      	push	{r4, r5, r6, lr}
 8003a60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003a62:	4606      	mov	r6, r0
 8003a64:	460d      	mov	r5, r1
 8003a66:	b93c      	cbnz	r4, 8003a78 <_Bfree+0x1a>
 8003a68:	2010      	movs	r0, #16
 8003a6a:	f7ff ffa3 	bl	80039b4 <malloc>
 8003a6e:	6270      	str	r0, [r6, #36]	; 0x24
 8003a70:	6044      	str	r4, [r0, #4]
 8003a72:	6084      	str	r4, [r0, #8]
 8003a74:	6004      	str	r4, [r0, #0]
 8003a76:	60c4      	str	r4, [r0, #12]
 8003a78:	b13d      	cbz	r5, 8003a8a <_Bfree+0x2c>
 8003a7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003a7c:	686a      	ldr	r2, [r5, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a84:	6029      	str	r1, [r5, #0]
 8003a86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}

08003a8c <__multadd>:
 8003a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a90:	461f      	mov	r7, r3
 8003a92:	4606      	mov	r6, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	2300      	movs	r3, #0
 8003a98:	690d      	ldr	r5, [r1, #16]
 8003a9a:	f101 0e14 	add.w	lr, r1, #20
 8003a9e:	f8de 0000 	ldr.w	r0, [lr]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b281      	uxth	r1, r0
 8003aa6:	fb02 7101 	mla	r1, r2, r1, r7
 8003aaa:	0c00      	lsrs	r0, r0, #16
 8003aac:	0c0f      	lsrs	r7, r1, #16
 8003aae:	fb02 7000 	mla	r0, r2, r0, r7
 8003ab2:	b289      	uxth	r1, r1
 8003ab4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003ab8:	429d      	cmp	r5, r3
 8003aba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003abe:	f84e 1b04 	str.w	r1, [lr], #4
 8003ac2:	dcec      	bgt.n	8003a9e <__multadd+0x12>
 8003ac4:	b1d7      	cbz	r7, 8003afc <__multadd+0x70>
 8003ac6:	68a3      	ldr	r3, [r4, #8]
 8003ac8:	429d      	cmp	r5, r3
 8003aca:	db12      	blt.n	8003af2 <__multadd+0x66>
 8003acc:	6861      	ldr	r1, [r4, #4]
 8003ace:	4630      	mov	r0, r6
 8003ad0:	3101      	adds	r1, #1
 8003ad2:	f7ff ff90 	bl	80039f6 <_Balloc>
 8003ad6:	4680      	mov	r8, r0
 8003ad8:	6922      	ldr	r2, [r4, #16]
 8003ada:	f104 010c 	add.w	r1, r4, #12
 8003ade:	3202      	adds	r2, #2
 8003ae0:	0092      	lsls	r2, r2, #2
 8003ae2:	300c      	adds	r0, #12
 8003ae4:	f7ff ff7c 	bl	80039e0 <memcpy>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4630      	mov	r0, r6
 8003aec:	f7ff ffb7 	bl	8003a5e <_Bfree>
 8003af0:	4644      	mov	r4, r8
 8003af2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003af6:	3501      	adds	r5, #1
 8003af8:	615f      	str	r7, [r3, #20]
 8003afa:	6125      	str	r5, [r4, #16]
 8003afc:	4620      	mov	r0, r4
 8003afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b02 <__hi0bits>:
 8003b02:	0c02      	lsrs	r2, r0, #16
 8003b04:	0412      	lsls	r2, r2, #16
 8003b06:	4603      	mov	r3, r0
 8003b08:	b9b2      	cbnz	r2, 8003b38 <__hi0bits+0x36>
 8003b0a:	0403      	lsls	r3, r0, #16
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003b12:	bf04      	itt	eq
 8003b14:	021b      	lsleq	r3, r3, #8
 8003b16:	3008      	addeq	r0, #8
 8003b18:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003b1c:	bf04      	itt	eq
 8003b1e:	011b      	lsleq	r3, r3, #4
 8003b20:	3004      	addeq	r0, #4
 8003b22:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003b26:	bf04      	itt	eq
 8003b28:	009b      	lsleq	r3, r3, #2
 8003b2a:	3002      	addeq	r0, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db06      	blt.n	8003b3e <__hi0bits+0x3c>
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	d503      	bpl.n	8003b3c <__hi0bits+0x3a>
 8003b34:	3001      	adds	r0, #1
 8003b36:	4770      	bx	lr
 8003b38:	2000      	movs	r0, #0
 8003b3a:	e7e8      	b.n	8003b0e <__hi0bits+0xc>
 8003b3c:	2020      	movs	r0, #32
 8003b3e:	4770      	bx	lr

08003b40 <__lo0bits>:
 8003b40:	6803      	ldr	r3, [r0, #0]
 8003b42:	4601      	mov	r1, r0
 8003b44:	f013 0207 	ands.w	r2, r3, #7
 8003b48:	d00b      	beq.n	8003b62 <__lo0bits+0x22>
 8003b4a:	07da      	lsls	r2, r3, #31
 8003b4c:	d423      	bmi.n	8003b96 <__lo0bits+0x56>
 8003b4e:	0798      	lsls	r0, r3, #30
 8003b50:	bf49      	itett	mi
 8003b52:	085b      	lsrmi	r3, r3, #1
 8003b54:	089b      	lsrpl	r3, r3, #2
 8003b56:	2001      	movmi	r0, #1
 8003b58:	600b      	strmi	r3, [r1, #0]
 8003b5a:	bf5c      	itt	pl
 8003b5c:	600b      	strpl	r3, [r1, #0]
 8003b5e:	2002      	movpl	r0, #2
 8003b60:	4770      	bx	lr
 8003b62:	b298      	uxth	r0, r3
 8003b64:	b9a8      	cbnz	r0, 8003b92 <__lo0bits+0x52>
 8003b66:	2010      	movs	r0, #16
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003b6e:	bf04      	itt	eq
 8003b70:	0a1b      	lsreq	r3, r3, #8
 8003b72:	3008      	addeq	r0, #8
 8003b74:	071a      	lsls	r2, r3, #28
 8003b76:	bf04      	itt	eq
 8003b78:	091b      	lsreq	r3, r3, #4
 8003b7a:	3004      	addeq	r0, #4
 8003b7c:	079a      	lsls	r2, r3, #30
 8003b7e:	bf04      	itt	eq
 8003b80:	089b      	lsreq	r3, r3, #2
 8003b82:	3002      	addeq	r0, #2
 8003b84:	07da      	lsls	r2, r3, #31
 8003b86:	d402      	bmi.n	8003b8e <__lo0bits+0x4e>
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	d006      	beq.n	8003b9a <__lo0bits+0x5a>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	4770      	bx	lr
 8003b92:	4610      	mov	r0, r2
 8003b94:	e7e9      	b.n	8003b6a <__lo0bits+0x2a>
 8003b96:	2000      	movs	r0, #0
 8003b98:	4770      	bx	lr
 8003b9a:	2020      	movs	r0, #32
 8003b9c:	4770      	bx	lr

08003b9e <__i2b>:
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	f7ff ff27 	bl	80039f6 <_Balloc>
 8003ba8:	2201      	movs	r2, #1
 8003baa:	6144      	str	r4, [r0, #20]
 8003bac:	6102      	str	r2, [r0, #16]
 8003bae:	bd10      	pop	{r4, pc}

08003bb0 <__multiply>:
 8003bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	690a      	ldr	r2, [r1, #16]
 8003bb8:	6923      	ldr	r3, [r4, #16]
 8003bba:	4689      	mov	r9, r1
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	bfbe      	ittt	lt
 8003bc0:	460b      	movlt	r3, r1
 8003bc2:	46a1      	movlt	r9, r4
 8003bc4:	461c      	movlt	r4, r3
 8003bc6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003bca:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003bce:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003bd2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003bd6:	eb07 060a 	add.w	r6, r7, sl
 8003bda:	429e      	cmp	r6, r3
 8003bdc:	bfc8      	it	gt
 8003bde:	3101      	addgt	r1, #1
 8003be0:	f7ff ff09 	bl	80039f6 <_Balloc>
 8003be4:	f100 0514 	add.w	r5, r0, #20
 8003be8:	462b      	mov	r3, r5
 8003bea:	2200      	movs	r2, #0
 8003bec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003bf0:	4543      	cmp	r3, r8
 8003bf2:	d316      	bcc.n	8003c22 <__multiply+0x72>
 8003bf4:	f104 0214 	add.w	r2, r4, #20
 8003bf8:	f109 0114 	add.w	r1, r9, #20
 8003bfc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003c00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	9c01      	ldr	r4, [sp, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	4294      	cmp	r4, r2
 8003c0c:	d80c      	bhi.n	8003c28 <__multiply+0x78>
 8003c0e:	2e00      	cmp	r6, #0
 8003c10:	dd03      	ble.n	8003c1a <__multiply+0x6a>
 8003c12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d054      	beq.n	8003cc4 <__multiply+0x114>
 8003c1a:	6106      	str	r6, [r0, #16]
 8003c1c:	b003      	add	sp, #12
 8003c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c22:	f843 2b04 	str.w	r2, [r3], #4
 8003c26:	e7e3      	b.n	8003bf0 <__multiply+0x40>
 8003c28:	f8b3 a000 	ldrh.w	sl, [r3]
 8003c2c:	3204      	adds	r2, #4
 8003c2e:	f1ba 0f00 	cmp.w	sl, #0
 8003c32:	d020      	beq.n	8003c76 <__multiply+0xc6>
 8003c34:	46ae      	mov	lr, r5
 8003c36:	4689      	mov	r9, r1
 8003c38:	f04f 0c00 	mov.w	ip, #0
 8003c3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8003c40:	f8be b000 	ldrh.w	fp, [lr]
 8003c44:	b2a3      	uxth	r3, r4
 8003c46:	fb0a b303 	mla	r3, sl, r3, fp
 8003c4a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003c4e:	f8de 4000 	ldr.w	r4, [lr]
 8003c52:	4463      	add	r3, ip
 8003c54:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003c58:	fb0a c40b 	mla	r4, sl, fp, ip
 8003c5c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003c66:	454f      	cmp	r7, r9
 8003c68:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003c6c:	f84e 3b04 	str.w	r3, [lr], #4
 8003c70:	d8e4      	bhi.n	8003c3c <__multiply+0x8c>
 8003c72:	f8ce c000 	str.w	ip, [lr]
 8003c76:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8003c7a:	f1b9 0f00 	cmp.w	r9, #0
 8003c7e:	d01f      	beq.n	8003cc0 <__multiply+0x110>
 8003c80:	46ae      	mov	lr, r5
 8003c82:	468c      	mov	ip, r1
 8003c84:	f04f 0a00 	mov.w	sl, #0
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	f8bc 4000 	ldrh.w	r4, [ip]
 8003c8e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	fb09 b404 	mla	r4, r9, r4, fp
 8003c98:	44a2      	add	sl, r4
 8003c9a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003c9e:	f84e 3b04 	str.w	r3, [lr], #4
 8003ca2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003ca6:	f8be 4000 	ldrh.w	r4, [lr]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	fb09 4303 	mla	r3, r9, r3, r4
 8003cb0:	4567      	cmp	r7, ip
 8003cb2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003cb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003cba:	d8e6      	bhi.n	8003c8a <__multiply+0xda>
 8003cbc:	f8ce 3000 	str.w	r3, [lr]
 8003cc0:	3504      	adds	r5, #4
 8003cc2:	e7a0      	b.n	8003c06 <__multiply+0x56>
 8003cc4:	3e01      	subs	r6, #1
 8003cc6:	e7a2      	b.n	8003c0e <__multiply+0x5e>

08003cc8 <__pow5mult>:
 8003cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ccc:	4615      	mov	r5, r2
 8003cce:	f012 0203 	ands.w	r2, r2, #3
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	460f      	mov	r7, r1
 8003cd6:	d007      	beq.n	8003ce8 <__pow5mult+0x20>
 8003cd8:	4c21      	ldr	r4, [pc, #132]	; (8003d60 <__pow5mult+0x98>)
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ce2:	f7ff fed3 	bl	8003a8c <__multadd>
 8003ce6:	4607      	mov	r7, r0
 8003ce8:	10ad      	asrs	r5, r5, #2
 8003cea:	d035      	beq.n	8003d58 <__pow5mult+0x90>
 8003cec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003cee:	b93c      	cbnz	r4, 8003d00 <__pow5mult+0x38>
 8003cf0:	2010      	movs	r0, #16
 8003cf2:	f7ff fe5f 	bl	80039b4 <malloc>
 8003cf6:	6270      	str	r0, [r6, #36]	; 0x24
 8003cf8:	6044      	str	r4, [r0, #4]
 8003cfa:	6084      	str	r4, [r0, #8]
 8003cfc:	6004      	str	r4, [r0, #0]
 8003cfe:	60c4      	str	r4, [r0, #12]
 8003d00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003d08:	b94c      	cbnz	r4, 8003d1e <__pow5mult+0x56>
 8003d0a:	f240 2171 	movw	r1, #625	; 0x271
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f7ff ff45 	bl	8003b9e <__i2b>
 8003d14:	2300      	movs	r3, #0
 8003d16:	4604      	mov	r4, r0
 8003d18:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d1c:	6003      	str	r3, [r0, #0]
 8003d1e:	f04f 0800 	mov.w	r8, #0
 8003d22:	07eb      	lsls	r3, r5, #31
 8003d24:	d50a      	bpl.n	8003d3c <__pow5mult+0x74>
 8003d26:	4639      	mov	r1, r7
 8003d28:	4622      	mov	r2, r4
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7ff ff40 	bl	8003bb0 <__multiply>
 8003d30:	4681      	mov	r9, r0
 8003d32:	4639      	mov	r1, r7
 8003d34:	4630      	mov	r0, r6
 8003d36:	f7ff fe92 	bl	8003a5e <_Bfree>
 8003d3a:	464f      	mov	r7, r9
 8003d3c:	106d      	asrs	r5, r5, #1
 8003d3e:	d00b      	beq.n	8003d58 <__pow5mult+0x90>
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	b938      	cbnz	r0, 8003d54 <__pow5mult+0x8c>
 8003d44:	4622      	mov	r2, r4
 8003d46:	4621      	mov	r1, r4
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff ff31 	bl	8003bb0 <__multiply>
 8003d4e:	6020      	str	r0, [r4, #0]
 8003d50:	f8c0 8000 	str.w	r8, [r0]
 8003d54:	4604      	mov	r4, r0
 8003d56:	e7e4      	b.n	8003d22 <__pow5mult+0x5a>
 8003d58:	4638      	mov	r0, r7
 8003d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d5e:	bf00      	nop
 8003d60:	08004708 	.word	0x08004708

08003d64 <__lshift>:
 8003d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	460c      	mov	r4, r1
 8003d6a:	4607      	mov	r7, r0
 8003d6c:	4616      	mov	r6, r2
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d74:	eb0a 0903 	add.w	r9, sl, r3
 8003d78:	6849      	ldr	r1, [r1, #4]
 8003d7a:	68a3      	ldr	r3, [r4, #8]
 8003d7c:	f109 0501 	add.w	r5, r9, #1
 8003d80:	42ab      	cmp	r3, r5
 8003d82:	db31      	blt.n	8003de8 <__lshift+0x84>
 8003d84:	4638      	mov	r0, r7
 8003d86:	f7ff fe36 	bl	80039f6 <_Balloc>
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4680      	mov	r8, r0
 8003d8e:	4611      	mov	r1, r2
 8003d90:	f100 0314 	add.w	r3, r0, #20
 8003d94:	4552      	cmp	r2, sl
 8003d96:	db2a      	blt.n	8003dee <__lshift+0x8a>
 8003d98:	6920      	ldr	r0, [r4, #16]
 8003d9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d9e:	f104 0114 	add.w	r1, r4, #20
 8003da2:	f016 021f 	ands.w	r2, r6, #31
 8003da6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003daa:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003dae:	d022      	beq.n	8003df6 <__lshift+0x92>
 8003db0:	2000      	movs	r0, #0
 8003db2:	f1c2 0c20 	rsb	ip, r2, #32
 8003db6:	680e      	ldr	r6, [r1, #0]
 8003db8:	4096      	lsls	r6, r2
 8003dba:	4330      	orrs	r0, r6
 8003dbc:	f843 0b04 	str.w	r0, [r3], #4
 8003dc0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003dc4:	458e      	cmp	lr, r1
 8003dc6:	fa20 f00c 	lsr.w	r0, r0, ip
 8003dca:	d8f4      	bhi.n	8003db6 <__lshift+0x52>
 8003dcc:	6018      	str	r0, [r3, #0]
 8003dce:	b108      	cbz	r0, 8003dd4 <__lshift+0x70>
 8003dd0:	f109 0502 	add.w	r5, r9, #2
 8003dd4:	3d01      	subs	r5, #1
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	f8c8 5010 	str.w	r5, [r8, #16]
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f7ff fe3e 	bl	8003a5e <_Bfree>
 8003de2:	4640      	mov	r0, r8
 8003de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de8:	3101      	adds	r1, #1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	e7c8      	b.n	8003d80 <__lshift+0x1c>
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003df2:	3201      	adds	r2, #1
 8003df4:	e7ce      	b.n	8003d94 <__lshift+0x30>
 8003df6:	3b04      	subs	r3, #4
 8003df8:	f851 2b04 	ldr.w	r2, [r1], #4
 8003dfc:	458e      	cmp	lr, r1
 8003dfe:	f843 2f04 	str.w	r2, [r3, #4]!
 8003e02:	d8f9      	bhi.n	8003df8 <__lshift+0x94>
 8003e04:	e7e6      	b.n	8003dd4 <__lshift+0x70>

08003e06 <__mcmp>:
 8003e06:	6903      	ldr	r3, [r0, #16]
 8003e08:	690a      	ldr	r2, [r1, #16]
 8003e0a:	b530      	push	{r4, r5, lr}
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	d10c      	bne.n	8003e2a <__mcmp+0x24>
 8003e10:	0092      	lsls	r2, r2, #2
 8003e12:	3014      	adds	r0, #20
 8003e14:	3114      	adds	r1, #20
 8003e16:	1884      	adds	r4, r0, r2
 8003e18:	4411      	add	r1, r2
 8003e1a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003e1e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003e22:	4295      	cmp	r5, r2
 8003e24:	d003      	beq.n	8003e2e <__mcmp+0x28>
 8003e26:	d305      	bcc.n	8003e34 <__mcmp+0x2e>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	bd30      	pop	{r4, r5, pc}
 8003e2e:	42a0      	cmp	r0, r4
 8003e30:	d3f3      	bcc.n	8003e1a <__mcmp+0x14>
 8003e32:	e7fa      	b.n	8003e2a <__mcmp+0x24>
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	e7f7      	b.n	8003e2a <__mcmp+0x24>

08003e3a <__mdiff>:
 8003e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3e:	460d      	mov	r5, r1
 8003e40:	4607      	mov	r7, r0
 8003e42:	4611      	mov	r1, r2
 8003e44:	4628      	mov	r0, r5
 8003e46:	4614      	mov	r4, r2
 8003e48:	f7ff ffdd 	bl	8003e06 <__mcmp>
 8003e4c:	1e06      	subs	r6, r0, #0
 8003e4e:	d108      	bne.n	8003e62 <__mdiff+0x28>
 8003e50:	4631      	mov	r1, r6
 8003e52:	4638      	mov	r0, r7
 8003e54:	f7ff fdcf 	bl	80039f6 <_Balloc>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	6146      	str	r6, [r0, #20]
 8003e5c:	6103      	str	r3, [r0, #16]
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	bfa4      	itt	ge
 8003e64:	4623      	movge	r3, r4
 8003e66:	462c      	movge	r4, r5
 8003e68:	4638      	mov	r0, r7
 8003e6a:	6861      	ldr	r1, [r4, #4]
 8003e6c:	bfa6      	itte	ge
 8003e6e:	461d      	movge	r5, r3
 8003e70:	2600      	movge	r6, #0
 8003e72:	2601      	movlt	r6, #1
 8003e74:	f7ff fdbf 	bl	80039f6 <_Balloc>
 8003e78:	f04f 0c00 	mov.w	ip, #0
 8003e7c:	60c6      	str	r6, [r0, #12]
 8003e7e:	692b      	ldr	r3, [r5, #16]
 8003e80:	6926      	ldr	r6, [r4, #16]
 8003e82:	f104 0214 	add.w	r2, r4, #20
 8003e86:	f105 0914 	add.w	r9, r5, #20
 8003e8a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003e8e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003e92:	f100 0114 	add.w	r1, r0, #20
 8003e96:	f852 ab04 	ldr.w	sl, [r2], #4
 8003e9a:	f859 5b04 	ldr.w	r5, [r9], #4
 8003e9e:	fa1f f38a 	uxth.w	r3, sl
 8003ea2:	4463      	add	r3, ip
 8003ea4:	b2ac      	uxth	r4, r5
 8003ea6:	1b1b      	subs	r3, r3, r4
 8003ea8:	0c2c      	lsrs	r4, r5, #16
 8003eaa:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003eae:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003eb8:	45c8      	cmp	r8, r9
 8003eba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003ebe:	4696      	mov	lr, r2
 8003ec0:	f841 4b04 	str.w	r4, [r1], #4
 8003ec4:	d8e7      	bhi.n	8003e96 <__mdiff+0x5c>
 8003ec6:	45be      	cmp	lr, r7
 8003ec8:	d305      	bcc.n	8003ed6 <__mdiff+0x9c>
 8003eca:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003ece:	b18b      	cbz	r3, 8003ef4 <__mdiff+0xba>
 8003ed0:	6106      	str	r6, [r0, #16]
 8003ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003eda:	b2a2      	uxth	r2, r4
 8003edc:	4462      	add	r2, ip
 8003ede:	1413      	asrs	r3, r2, #16
 8003ee0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003eea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003eee:	f841 2b04 	str.w	r2, [r1], #4
 8003ef2:	e7e8      	b.n	8003ec6 <__mdiff+0x8c>
 8003ef4:	3e01      	subs	r6, #1
 8003ef6:	e7e8      	b.n	8003eca <__mdiff+0x90>

08003ef8 <__d2b>:
 8003ef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003efc:	461c      	mov	r4, r3
 8003efe:	2101      	movs	r1, #1
 8003f00:	4690      	mov	r8, r2
 8003f02:	9e08      	ldr	r6, [sp, #32]
 8003f04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003f06:	f7ff fd76 	bl	80039f6 <_Balloc>
 8003f0a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003f0e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003f12:	4607      	mov	r7, r0
 8003f14:	bb34      	cbnz	r4, 8003f64 <__d2b+0x6c>
 8003f16:	9201      	str	r2, [sp, #4]
 8003f18:	f1b8 0f00 	cmp.w	r8, #0
 8003f1c:	d027      	beq.n	8003f6e <__d2b+0x76>
 8003f1e:	a802      	add	r0, sp, #8
 8003f20:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003f24:	f7ff fe0c 	bl	8003b40 <__lo0bits>
 8003f28:	9900      	ldr	r1, [sp, #0]
 8003f2a:	b1f0      	cbz	r0, 8003f6a <__d2b+0x72>
 8003f2c:	9a01      	ldr	r2, [sp, #4]
 8003f2e:	f1c0 0320 	rsb	r3, r0, #32
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	430b      	orrs	r3, r1
 8003f38:	40c2      	lsrs	r2, r0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	9201      	str	r2, [sp, #4]
 8003f3e:	9b01      	ldr	r3, [sp, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2102      	movne	r1, #2
 8003f46:	2101      	moveq	r1, #1
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	6139      	str	r1, [r7, #16]
 8003f4c:	b1c4      	cbz	r4, 8003f80 <__d2b+0x88>
 8003f4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003f52:	4404      	add	r4, r0
 8003f54:	6034      	str	r4, [r6, #0]
 8003f56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003f5a:	6028      	str	r0, [r5, #0]
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f68:	e7d5      	b.n	8003f16 <__d2b+0x1e>
 8003f6a:	6179      	str	r1, [r7, #20]
 8003f6c:	e7e7      	b.n	8003f3e <__d2b+0x46>
 8003f6e:	a801      	add	r0, sp, #4
 8003f70:	f7ff fde6 	bl	8003b40 <__lo0bits>
 8003f74:	2101      	movs	r1, #1
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	6139      	str	r1, [r7, #16]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	3020      	adds	r0, #32
 8003f7e:	e7e5      	b.n	8003f4c <__d2b+0x54>
 8003f80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003f84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003f88:	6030      	str	r0, [r6, #0]
 8003f8a:	6918      	ldr	r0, [r3, #16]
 8003f8c:	f7ff fdb9 	bl	8003b02 <__hi0bits>
 8003f90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003f94:	e7e1      	b.n	8003f5a <__d2b+0x62>

08003f96 <_calloc_r>:
 8003f96:	b538      	push	{r3, r4, r5, lr}
 8003f98:	fb02 f401 	mul.w	r4, r2, r1
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	f000 f855 	bl	800404c <_malloc_r>
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	b118      	cbz	r0, 8003fae <_calloc_r+0x18>
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f000 fa39 	bl	8004420 <memset>
 8003fae:	4628      	mov	r0, r5
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
	...

08003fb4 <_free_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d043      	beq.n	8004044 <_free_r+0x90>
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f0c      	subs	r4, r1, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	18e4      	addlt	r4, r4, r3
 8003fc8:	f000 fa32 	bl	8004430 <__malloc_lock>
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <_free_r+0x94>)
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	b933      	cbnz	r3, 8003fe2 <_free_r+0x2e>
 8003fd4:	6063      	str	r3, [r4, #4]
 8003fd6:	6014      	str	r4, [r2, #0]
 8003fd8:	4628      	mov	r0, r5
 8003fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fde:	f000 ba28 	b.w	8004432 <__malloc_unlock>
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	d90b      	bls.n	8003ffe <_free_r+0x4a>
 8003fe6:	6821      	ldr	r1, [r4, #0]
 8003fe8:	1862      	adds	r2, r4, r1
 8003fea:	4293      	cmp	r3, r2
 8003fec:	bf01      	itttt	eq
 8003fee:	681a      	ldreq	r2, [r3, #0]
 8003ff0:	685b      	ldreq	r3, [r3, #4]
 8003ff2:	1852      	addeq	r2, r2, r1
 8003ff4:	6022      	streq	r2, [r4, #0]
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	6004      	str	r4, [r0, #0]
 8003ffa:	e7ed      	b.n	8003fd8 <_free_r+0x24>
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	b10a      	cbz	r2, 8004006 <_free_r+0x52>
 8004002:	42a2      	cmp	r2, r4
 8004004:	d9fa      	bls.n	8003ffc <_free_r+0x48>
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	1858      	adds	r0, r3, r1
 800400a:	42a0      	cmp	r0, r4
 800400c:	d10b      	bne.n	8004026 <_free_r+0x72>
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	4401      	add	r1, r0
 8004012:	1858      	adds	r0, r3, r1
 8004014:	4282      	cmp	r2, r0
 8004016:	6019      	str	r1, [r3, #0]
 8004018:	d1de      	bne.n	8003fd8 <_free_r+0x24>
 800401a:	6810      	ldr	r0, [r2, #0]
 800401c:	6852      	ldr	r2, [r2, #4]
 800401e:	4401      	add	r1, r0
 8004020:	6019      	str	r1, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	e7d8      	b.n	8003fd8 <_free_r+0x24>
 8004026:	d902      	bls.n	800402e <_free_r+0x7a>
 8004028:	230c      	movs	r3, #12
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	e7d4      	b.n	8003fd8 <_free_r+0x24>
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	1821      	adds	r1, r4, r0
 8004032:	428a      	cmp	r2, r1
 8004034:	bf01      	itttt	eq
 8004036:	6811      	ldreq	r1, [r2, #0]
 8004038:	6852      	ldreq	r2, [r2, #4]
 800403a:	1809      	addeq	r1, r1, r0
 800403c:	6021      	streq	r1, [r4, #0]
 800403e:	6062      	str	r2, [r4, #4]
 8004040:	605c      	str	r4, [r3, #4]
 8004042:	e7c9      	b.n	8003fd8 <_free_r+0x24>
 8004044:	bd38      	pop	{r3, r4, r5, pc}
 8004046:	bf00      	nop
 8004048:	200001f4 	.word	0x200001f4

0800404c <_malloc_r>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	1ccd      	adds	r5, r1, #3
 8004050:	f025 0503 	bic.w	r5, r5, #3
 8004054:	3508      	adds	r5, #8
 8004056:	2d0c      	cmp	r5, #12
 8004058:	bf38      	it	cc
 800405a:	250c      	movcc	r5, #12
 800405c:	2d00      	cmp	r5, #0
 800405e:	4606      	mov	r6, r0
 8004060:	db01      	blt.n	8004066 <_malloc_r+0x1a>
 8004062:	42a9      	cmp	r1, r5
 8004064:	d903      	bls.n	800406e <_malloc_r+0x22>
 8004066:	230c      	movs	r3, #12
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	2000      	movs	r0, #0
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	f000 f9df 	bl	8004430 <__malloc_lock>
 8004072:	4a23      	ldr	r2, [pc, #140]	; (8004100 <_malloc_r+0xb4>)
 8004074:	6814      	ldr	r4, [r2, #0]
 8004076:	4621      	mov	r1, r4
 8004078:	b991      	cbnz	r1, 80040a0 <_malloc_r+0x54>
 800407a:	4c22      	ldr	r4, [pc, #136]	; (8004104 <_malloc_r+0xb8>)
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	b91b      	cbnz	r3, 8004088 <_malloc_r+0x3c>
 8004080:	4630      	mov	r0, r6
 8004082:	f000 f991 	bl	80043a8 <_sbrk_r>
 8004086:	6020      	str	r0, [r4, #0]
 8004088:	4629      	mov	r1, r5
 800408a:	4630      	mov	r0, r6
 800408c:	f000 f98c 	bl	80043a8 <_sbrk_r>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d126      	bne.n	80040e2 <_malloc_r+0x96>
 8004094:	230c      	movs	r3, #12
 8004096:	4630      	mov	r0, r6
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	f000 f9ca 	bl	8004432 <__malloc_unlock>
 800409e:	e7e4      	b.n	800406a <_malloc_r+0x1e>
 80040a0:	680b      	ldr	r3, [r1, #0]
 80040a2:	1b5b      	subs	r3, r3, r5
 80040a4:	d41a      	bmi.n	80040dc <_malloc_r+0x90>
 80040a6:	2b0b      	cmp	r3, #11
 80040a8:	d90f      	bls.n	80040ca <_malloc_r+0x7e>
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	18cc      	adds	r4, r1, r3
 80040ae:	50cd      	str	r5, [r1, r3]
 80040b0:	4630      	mov	r0, r6
 80040b2:	f000 f9be 	bl	8004432 <__malloc_unlock>
 80040b6:	f104 000b 	add.w	r0, r4, #11
 80040ba:	1d23      	adds	r3, r4, #4
 80040bc:	f020 0007 	bic.w	r0, r0, #7
 80040c0:	1ac3      	subs	r3, r0, r3
 80040c2:	d01b      	beq.n	80040fc <_malloc_r+0xb0>
 80040c4:	425a      	negs	r2, r3
 80040c6:	50e2      	str	r2, [r4, r3]
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	428c      	cmp	r4, r1
 80040cc:	bf0b      	itete	eq
 80040ce:	6863      	ldreq	r3, [r4, #4]
 80040d0:	684b      	ldrne	r3, [r1, #4]
 80040d2:	6013      	streq	r3, [r2, #0]
 80040d4:	6063      	strne	r3, [r4, #4]
 80040d6:	bf18      	it	ne
 80040d8:	460c      	movne	r4, r1
 80040da:	e7e9      	b.n	80040b0 <_malloc_r+0x64>
 80040dc:	460c      	mov	r4, r1
 80040de:	6849      	ldr	r1, [r1, #4]
 80040e0:	e7ca      	b.n	8004078 <_malloc_r+0x2c>
 80040e2:	1cc4      	adds	r4, r0, #3
 80040e4:	f024 0403 	bic.w	r4, r4, #3
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d005      	beq.n	80040f8 <_malloc_r+0xac>
 80040ec:	1a21      	subs	r1, r4, r0
 80040ee:	4630      	mov	r0, r6
 80040f0:	f000 f95a 	bl	80043a8 <_sbrk_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d0cd      	beq.n	8004094 <_malloc_r+0x48>
 80040f8:	6025      	str	r5, [r4, #0]
 80040fa:	e7d9      	b.n	80040b0 <_malloc_r+0x64>
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
 80040fe:	bf00      	nop
 8004100:	200001f4 	.word	0x200001f4
 8004104:	200001f8 	.word	0x200001f8

08004108 <__ssputs_r>:
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	688e      	ldr	r6, [r1, #8]
 800410e:	4682      	mov	sl, r0
 8004110:	429e      	cmp	r6, r3
 8004112:	460c      	mov	r4, r1
 8004114:	4691      	mov	r9, r2
 8004116:	4698      	mov	r8, r3
 8004118:	d835      	bhi.n	8004186 <__ssputs_r+0x7e>
 800411a:	898a      	ldrh	r2, [r1, #12]
 800411c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004120:	d031      	beq.n	8004186 <__ssputs_r+0x7e>
 8004122:	2302      	movs	r3, #2
 8004124:	6825      	ldr	r5, [r4, #0]
 8004126:	6909      	ldr	r1, [r1, #16]
 8004128:	1a6f      	subs	r7, r5, r1
 800412a:	6965      	ldr	r5, [r4, #20]
 800412c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004130:	fb95 f5f3 	sdiv	r5, r5, r3
 8004134:	f108 0301 	add.w	r3, r8, #1
 8004138:	443b      	add	r3, r7
 800413a:	429d      	cmp	r5, r3
 800413c:	bf38      	it	cc
 800413e:	461d      	movcc	r5, r3
 8004140:	0553      	lsls	r3, r2, #21
 8004142:	d531      	bpl.n	80041a8 <__ssputs_r+0xa0>
 8004144:	4629      	mov	r1, r5
 8004146:	f7ff ff81 	bl	800404c <_malloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	b950      	cbnz	r0, 8004164 <__ssputs_r+0x5c>
 800414e:	230c      	movs	r3, #12
 8004150:	f8ca 3000 	str.w	r3, [sl]
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	f04f 30ff 	mov.w	r0, #4294967295
 800415a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415e:	81a3      	strh	r3, [r4, #12]
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	463a      	mov	r2, r7
 8004166:	6921      	ldr	r1, [r4, #16]
 8004168:	f7ff fc3a 	bl	80039e0 <memcpy>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	6126      	str	r6, [r4, #16]
 800417a:	443e      	add	r6, r7
 800417c:	6026      	str	r6, [r4, #0]
 800417e:	4646      	mov	r6, r8
 8004180:	6165      	str	r5, [r4, #20]
 8004182:	1bed      	subs	r5, r5, r7
 8004184:	60a5      	str	r5, [r4, #8]
 8004186:	4546      	cmp	r6, r8
 8004188:	bf28      	it	cs
 800418a:	4646      	movcs	r6, r8
 800418c:	4649      	mov	r1, r9
 800418e:	4632      	mov	r2, r6
 8004190:	6820      	ldr	r0, [r4, #0]
 8004192:	f000 f92b 	bl	80043ec <memmove>
 8004196:	68a3      	ldr	r3, [r4, #8]
 8004198:	2000      	movs	r0, #0
 800419a:	1b9b      	subs	r3, r3, r6
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	441e      	add	r6, r3
 80041a2:	6026      	str	r6, [r4, #0]
 80041a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a8:	462a      	mov	r2, r5
 80041aa:	f000 f943 	bl	8004434 <_realloc_r>
 80041ae:	4606      	mov	r6, r0
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d1e1      	bne.n	8004178 <__ssputs_r+0x70>
 80041b4:	6921      	ldr	r1, [r4, #16]
 80041b6:	4650      	mov	r0, sl
 80041b8:	f7ff fefc 	bl	8003fb4 <_free_r>
 80041bc:	e7c7      	b.n	800414e <__ssputs_r+0x46>
	...

080041c0 <_svfiprintf_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	b09d      	sub	sp, #116	; 0x74
 80041c6:	9303      	str	r3, [sp, #12]
 80041c8:	898b      	ldrh	r3, [r1, #12]
 80041ca:	4680      	mov	r8, r0
 80041cc:	061c      	lsls	r4, r3, #24
 80041ce:	460d      	mov	r5, r1
 80041d0:	4616      	mov	r6, r2
 80041d2:	d50f      	bpl.n	80041f4 <_svfiprintf_r+0x34>
 80041d4:	690b      	ldr	r3, [r1, #16]
 80041d6:	b96b      	cbnz	r3, 80041f4 <_svfiprintf_r+0x34>
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	f7ff ff37 	bl	800404c <_malloc_r>
 80041de:	6028      	str	r0, [r5, #0]
 80041e0:	6128      	str	r0, [r5, #16]
 80041e2:	b928      	cbnz	r0, 80041f0 <_svfiprintf_r+0x30>
 80041e4:	230c      	movs	r3, #12
 80041e6:	f8c8 3000 	str.w	r3, [r8]
 80041ea:	f04f 30ff 	mov.w	r0, #4294967295
 80041ee:	e0c4      	b.n	800437a <_svfiprintf_r+0x1ba>
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	616b      	str	r3, [r5, #20]
 80041f4:	2300      	movs	r3, #0
 80041f6:	9309      	str	r3, [sp, #36]	; 0x24
 80041f8:	2320      	movs	r3, #32
 80041fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041fe:	2330      	movs	r3, #48	; 0x30
 8004200:	f04f 0b01 	mov.w	fp, #1
 8004204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004208:	4637      	mov	r7, r6
 800420a:	463c      	mov	r4, r7
 800420c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d13c      	bne.n	800428e <_svfiprintf_r+0xce>
 8004214:	ebb7 0a06 	subs.w	sl, r7, r6
 8004218:	d00b      	beq.n	8004232 <_svfiprintf_r+0x72>
 800421a:	4653      	mov	r3, sl
 800421c:	4632      	mov	r2, r6
 800421e:	4629      	mov	r1, r5
 8004220:	4640      	mov	r0, r8
 8004222:	f7ff ff71 	bl	8004108 <__ssputs_r>
 8004226:	3001      	adds	r0, #1
 8004228:	f000 80a2 	beq.w	8004370 <_svfiprintf_r+0x1b0>
 800422c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422e:	4453      	add	r3, sl
 8004230:	9309      	str	r3, [sp, #36]	; 0x24
 8004232:	783b      	ldrb	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 809b 	beq.w	8004370 <_svfiprintf_r+0x1b0>
 800423a:	2300      	movs	r3, #0
 800423c:	f04f 32ff 	mov.w	r2, #4294967295
 8004240:	9304      	str	r3, [sp, #16]
 8004242:	9307      	str	r3, [sp, #28]
 8004244:	9205      	str	r2, [sp, #20]
 8004246:	9306      	str	r3, [sp, #24]
 8004248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800424c:	931a      	str	r3, [sp, #104]	; 0x68
 800424e:	2205      	movs	r2, #5
 8004250:	7821      	ldrb	r1, [r4, #0]
 8004252:	4850      	ldr	r0, [pc, #320]	; (8004394 <_svfiprintf_r+0x1d4>)
 8004254:	f7ff fbb6 	bl	80039c4 <memchr>
 8004258:	1c67      	adds	r7, r4, #1
 800425a:	9b04      	ldr	r3, [sp, #16]
 800425c:	b9d8      	cbnz	r0, 8004296 <_svfiprintf_r+0xd6>
 800425e:	06d9      	lsls	r1, r3, #27
 8004260:	bf44      	itt	mi
 8004262:	2220      	movmi	r2, #32
 8004264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004268:	071a      	lsls	r2, r3, #28
 800426a:	bf44      	itt	mi
 800426c:	222b      	movmi	r2, #43	; 0x2b
 800426e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004272:	7822      	ldrb	r2, [r4, #0]
 8004274:	2a2a      	cmp	r2, #42	; 0x2a
 8004276:	d016      	beq.n	80042a6 <_svfiprintf_r+0xe6>
 8004278:	2100      	movs	r1, #0
 800427a:	200a      	movs	r0, #10
 800427c:	9a07      	ldr	r2, [sp, #28]
 800427e:	4627      	mov	r7, r4
 8004280:	783b      	ldrb	r3, [r7, #0]
 8004282:	3401      	adds	r4, #1
 8004284:	3b30      	subs	r3, #48	; 0x30
 8004286:	2b09      	cmp	r3, #9
 8004288:	d950      	bls.n	800432c <_svfiprintf_r+0x16c>
 800428a:	b1c9      	cbz	r1, 80042c0 <_svfiprintf_r+0x100>
 800428c:	e011      	b.n	80042b2 <_svfiprintf_r+0xf2>
 800428e:	2b25      	cmp	r3, #37	; 0x25
 8004290:	d0c0      	beq.n	8004214 <_svfiprintf_r+0x54>
 8004292:	4627      	mov	r7, r4
 8004294:	e7b9      	b.n	800420a <_svfiprintf_r+0x4a>
 8004296:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <_svfiprintf_r+0x1d4>)
 8004298:	463c      	mov	r4, r7
 800429a:	1a80      	subs	r0, r0, r2
 800429c:	fa0b f000 	lsl.w	r0, fp, r0
 80042a0:	4318      	orrs	r0, r3
 80042a2:	9004      	str	r0, [sp, #16]
 80042a4:	e7d3      	b.n	800424e <_svfiprintf_r+0x8e>
 80042a6:	9a03      	ldr	r2, [sp, #12]
 80042a8:	1d11      	adds	r1, r2, #4
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	9103      	str	r1, [sp, #12]
 80042ae:	2a00      	cmp	r2, #0
 80042b0:	db01      	blt.n	80042b6 <_svfiprintf_r+0xf6>
 80042b2:	9207      	str	r2, [sp, #28]
 80042b4:	e004      	b.n	80042c0 <_svfiprintf_r+0x100>
 80042b6:	4252      	negs	r2, r2
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	9207      	str	r2, [sp, #28]
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	783b      	ldrb	r3, [r7, #0]
 80042c2:	2b2e      	cmp	r3, #46	; 0x2e
 80042c4:	d10d      	bne.n	80042e2 <_svfiprintf_r+0x122>
 80042c6:	787b      	ldrb	r3, [r7, #1]
 80042c8:	1c79      	adds	r1, r7, #1
 80042ca:	2b2a      	cmp	r3, #42	; 0x2a
 80042cc:	d132      	bne.n	8004334 <_svfiprintf_r+0x174>
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	3702      	adds	r7, #2
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	9203      	str	r2, [sp, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bfb8      	it	lt
 80042dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80042e0:	9305      	str	r3, [sp, #20]
 80042e2:	4c2d      	ldr	r4, [pc, #180]	; (8004398 <_svfiprintf_r+0x1d8>)
 80042e4:	2203      	movs	r2, #3
 80042e6:	7839      	ldrb	r1, [r7, #0]
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff fb6b 	bl	80039c4 <memchr>
 80042ee:	b138      	cbz	r0, 8004300 <_svfiprintf_r+0x140>
 80042f0:	2340      	movs	r3, #64	; 0x40
 80042f2:	1b00      	subs	r0, r0, r4
 80042f4:	fa03 f000 	lsl.w	r0, r3, r0
 80042f8:	9b04      	ldr	r3, [sp, #16]
 80042fa:	3701      	adds	r7, #1
 80042fc:	4303      	orrs	r3, r0
 80042fe:	9304      	str	r3, [sp, #16]
 8004300:	7839      	ldrb	r1, [r7, #0]
 8004302:	2206      	movs	r2, #6
 8004304:	4825      	ldr	r0, [pc, #148]	; (800439c <_svfiprintf_r+0x1dc>)
 8004306:	1c7e      	adds	r6, r7, #1
 8004308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800430c:	f7ff fb5a 	bl	80039c4 <memchr>
 8004310:	2800      	cmp	r0, #0
 8004312:	d035      	beq.n	8004380 <_svfiprintf_r+0x1c0>
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <_svfiprintf_r+0x1e0>)
 8004316:	b9fb      	cbnz	r3, 8004358 <_svfiprintf_r+0x198>
 8004318:	9b03      	ldr	r3, [sp, #12]
 800431a:	3307      	adds	r3, #7
 800431c:	f023 0307 	bic.w	r3, r3, #7
 8004320:	3308      	adds	r3, #8
 8004322:	9303      	str	r3, [sp, #12]
 8004324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004326:	444b      	add	r3, r9
 8004328:	9309      	str	r3, [sp, #36]	; 0x24
 800432a:	e76d      	b.n	8004208 <_svfiprintf_r+0x48>
 800432c:	fb00 3202 	mla	r2, r0, r2, r3
 8004330:	2101      	movs	r1, #1
 8004332:	e7a4      	b.n	800427e <_svfiprintf_r+0xbe>
 8004334:	2300      	movs	r3, #0
 8004336:	240a      	movs	r4, #10
 8004338:	4618      	mov	r0, r3
 800433a:	9305      	str	r3, [sp, #20]
 800433c:	460f      	mov	r7, r1
 800433e:	783a      	ldrb	r2, [r7, #0]
 8004340:	3101      	adds	r1, #1
 8004342:	3a30      	subs	r2, #48	; 0x30
 8004344:	2a09      	cmp	r2, #9
 8004346:	d903      	bls.n	8004350 <_svfiprintf_r+0x190>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ca      	beq.n	80042e2 <_svfiprintf_r+0x122>
 800434c:	9005      	str	r0, [sp, #20]
 800434e:	e7c8      	b.n	80042e2 <_svfiprintf_r+0x122>
 8004350:	fb04 2000 	mla	r0, r4, r0, r2
 8004354:	2301      	movs	r3, #1
 8004356:	e7f1      	b.n	800433c <_svfiprintf_r+0x17c>
 8004358:	ab03      	add	r3, sp, #12
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	462a      	mov	r2, r5
 800435e:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <_svfiprintf_r+0x1e4>)
 8004360:	a904      	add	r1, sp, #16
 8004362:	4640      	mov	r0, r8
 8004364:	f7fe f8c4 	bl	80024f0 <_printf_float>
 8004368:	f1b0 3fff 	cmp.w	r0, #4294967295
 800436c:	4681      	mov	r9, r0
 800436e:	d1d9      	bne.n	8004324 <_svfiprintf_r+0x164>
 8004370:	89ab      	ldrh	r3, [r5, #12]
 8004372:	065b      	lsls	r3, r3, #25
 8004374:	f53f af39 	bmi.w	80041ea <_svfiprintf_r+0x2a>
 8004378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800437a:	b01d      	add	sp, #116	; 0x74
 800437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	462a      	mov	r2, r5
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <_svfiprintf_r+0x1e4>)
 8004388:	a904      	add	r1, sp, #16
 800438a:	4640      	mov	r0, r8
 800438c:	f7fe fb60 	bl	8002a50 <_printf_i>
 8004390:	e7ea      	b.n	8004368 <_svfiprintf_r+0x1a8>
 8004392:	bf00      	nop
 8004394:	08004714 	.word	0x08004714
 8004398:	0800471a 	.word	0x0800471a
 800439c:	0800471e 	.word	0x0800471e
 80043a0:	080024f1 	.word	0x080024f1
 80043a4:	08004109 	.word	0x08004109

080043a8 <_sbrk_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	2300      	movs	r3, #0
 80043ac:	4c05      	ldr	r4, [pc, #20]	; (80043c4 <_sbrk_r+0x1c>)
 80043ae:	4605      	mov	r5, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	6023      	str	r3, [r4, #0]
 80043b4:	f000 f87a 	bl	80044ac <_sbrk>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_sbrk_r+0x1a>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_sbrk_r+0x1a>
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	200002e4 	.word	0x200002e4

080043c8 <__ascii_mbtowc>:
 80043c8:	b082      	sub	sp, #8
 80043ca:	b901      	cbnz	r1, 80043ce <__ascii_mbtowc+0x6>
 80043cc:	a901      	add	r1, sp, #4
 80043ce:	b142      	cbz	r2, 80043e2 <__ascii_mbtowc+0x1a>
 80043d0:	b14b      	cbz	r3, 80043e6 <__ascii_mbtowc+0x1e>
 80043d2:	7813      	ldrb	r3, [r2, #0]
 80043d4:	600b      	str	r3, [r1, #0]
 80043d6:	7812      	ldrb	r2, [r2, #0]
 80043d8:	1c10      	adds	r0, r2, #0
 80043da:	bf18      	it	ne
 80043dc:	2001      	movne	r0, #1
 80043de:	b002      	add	sp, #8
 80043e0:	4770      	bx	lr
 80043e2:	4610      	mov	r0, r2
 80043e4:	e7fb      	b.n	80043de <__ascii_mbtowc+0x16>
 80043e6:	f06f 0001 	mvn.w	r0, #1
 80043ea:	e7f8      	b.n	80043de <__ascii_mbtowc+0x16>

080043ec <memmove>:
 80043ec:	4288      	cmp	r0, r1
 80043ee:	b510      	push	{r4, lr}
 80043f0:	eb01 0302 	add.w	r3, r1, r2
 80043f4:	d803      	bhi.n	80043fe <memmove+0x12>
 80043f6:	1e42      	subs	r2, r0, #1
 80043f8:	4299      	cmp	r1, r3
 80043fa:	d10c      	bne.n	8004416 <memmove+0x2a>
 80043fc:	bd10      	pop	{r4, pc}
 80043fe:	4298      	cmp	r0, r3
 8004400:	d2f9      	bcs.n	80043f6 <memmove+0xa>
 8004402:	1881      	adds	r1, r0, r2
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	42d3      	cmn	r3, r2
 8004408:	d100      	bne.n	800440c <memmove+0x20>
 800440a:	bd10      	pop	{r4, pc}
 800440c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004410:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004414:	e7f7      	b.n	8004406 <memmove+0x1a>
 8004416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800441e:	e7eb      	b.n	80043f8 <memmove+0xc>

08004420 <memset>:
 8004420:	4603      	mov	r3, r0
 8004422:	4402      	add	r2, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <__malloc_lock>:
 8004430:	4770      	bx	lr

08004432 <__malloc_unlock>:
 8004432:	4770      	bx	lr

08004434 <_realloc_r>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	4607      	mov	r7, r0
 8004438:	4614      	mov	r4, r2
 800443a:	460e      	mov	r6, r1
 800443c:	b921      	cbnz	r1, 8004448 <_realloc_r+0x14>
 800443e:	4611      	mov	r1, r2
 8004440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004444:	f7ff be02 	b.w	800404c <_malloc_r>
 8004448:	b922      	cbnz	r2, 8004454 <_realloc_r+0x20>
 800444a:	f7ff fdb3 	bl	8003fb4 <_free_r>
 800444e:	4625      	mov	r5, r4
 8004450:	4628      	mov	r0, r5
 8004452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004454:	f000 f821 	bl	800449a <_malloc_usable_size_r>
 8004458:	4284      	cmp	r4, r0
 800445a:	d90f      	bls.n	800447c <_realloc_r+0x48>
 800445c:	4621      	mov	r1, r4
 800445e:	4638      	mov	r0, r7
 8004460:	f7ff fdf4 	bl	800404c <_malloc_r>
 8004464:	4605      	mov	r5, r0
 8004466:	2800      	cmp	r0, #0
 8004468:	d0f2      	beq.n	8004450 <_realloc_r+0x1c>
 800446a:	4631      	mov	r1, r6
 800446c:	4622      	mov	r2, r4
 800446e:	f7ff fab7 	bl	80039e0 <memcpy>
 8004472:	4631      	mov	r1, r6
 8004474:	4638      	mov	r0, r7
 8004476:	f7ff fd9d 	bl	8003fb4 <_free_r>
 800447a:	e7e9      	b.n	8004450 <_realloc_r+0x1c>
 800447c:	4635      	mov	r5, r6
 800447e:	e7e7      	b.n	8004450 <_realloc_r+0x1c>

08004480 <__ascii_wctomb>:
 8004480:	b149      	cbz	r1, 8004496 <__ascii_wctomb+0x16>
 8004482:	2aff      	cmp	r2, #255	; 0xff
 8004484:	bf8b      	itete	hi
 8004486:	238a      	movhi	r3, #138	; 0x8a
 8004488:	700a      	strbls	r2, [r1, #0]
 800448a:	6003      	strhi	r3, [r0, #0]
 800448c:	2001      	movls	r0, #1
 800448e:	bf88      	it	hi
 8004490:	f04f 30ff 	movhi.w	r0, #4294967295
 8004494:	4770      	bx	lr
 8004496:	4608      	mov	r0, r1
 8004498:	4770      	bx	lr

0800449a <_malloc_usable_size_r>:
 800449a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800449e:	2800      	cmp	r0, #0
 80044a0:	f1a0 0004 	sub.w	r0, r0, #4
 80044a4:	bfbc      	itt	lt
 80044a6:	580b      	ldrlt	r3, [r1, r0]
 80044a8:	18c0      	addlt	r0, r0, r3
 80044aa:	4770      	bx	lr

080044ac <_sbrk>:
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <_sbrk+0x14>)
 80044ae:	4602      	mov	r2, r0
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	b909      	cbnz	r1, 80044b8 <_sbrk+0xc>
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <_sbrk+0x18>)
 80044b6:	6019      	str	r1, [r3, #0]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	4402      	add	r2, r0
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	4770      	bx	lr
 80044c0:	200001fc 	.word	0x200001fc
 80044c4:	200002e8 	.word	0x200002e8

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
